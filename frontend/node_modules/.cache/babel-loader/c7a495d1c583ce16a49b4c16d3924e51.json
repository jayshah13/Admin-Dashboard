{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { extend } from '@syncfusion/ej2-base';\nimport { DataManager, Query, Deferred, UrlAdaptor } from '@syncfusion/ej2-data';\nimport * as events from './constant';\n/**\n * Kanban data module\n */\n\nvar Data =\n/** @class */\nfunction () {\n  /**\n   * Constructor for data module\n   *\n   * @param {Kanban} parent Accepts the instance of the Kanban\n   */\n  function Data(parent) {\n    this.dataState = {\n      isPending: false,\n      resolver: null,\n      isDataChanged: false\n    };\n    this.parent = parent;\n    this.keyField = this.parent.cardSettings.headerField;\n    this.dataState = {\n      isDataChanged: false\n    };\n    this.isObservable = false;\n    this.initDataManager(parent.dataSource, parent.query);\n    this.refreshDataManager();\n  }\n  /**\n   * The function used to initialize dataManager` and query\n   *\n   * @param {Object[] | DataManager} dataSource Accepts the dataSource as collection of objects or Datamanager instance.\n   * @param {Query} query Accepts the query to process the data from collections.\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.initDataManager = function (dataSource, query) {\n    this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n    this.query = query instanceof Query ? query : new Query();\n    this.kanbanData = new DataManager(this.parent.kanbanData);\n  };\n  /**\n   * The function used to generate updated Query from schedule model\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.getQuery = function () {\n    return this.query.clone();\n  };\n  /**\n   * The function used to get dataSource by executing given Query\n   *\n   * @param  {Query} query - A Query that specifies to generate dataSource\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.getData = function (query) {\n    if (this.parent.dataSource && 'result' in this.parent.dataSource) {\n      var def = this.eventPromise({\n        requestType: ''\n      }, query);\n      this.isObservable = true;\n      return def.promise;\n    }\n\n    return this.dataManager.executeQuery(query);\n  };\n\n  Data.prototype.setState = function (state) {\n    return this.dataState = state;\n  };\n\n  Data.prototype.getStateEventArgument = function (query) {\n    var adaptr = new UrlAdaptor();\n    var dm = new DataManager({\n      url: '',\n      adaptor: new UrlAdaptor()\n    });\n    var state = adaptr.processQuery(dm, query);\n    var data = JSON.parse(state.data);\n    return extend(data, state.pvtData);\n  };\n\n  Data.prototype.eventPromise = function (args, query, index) {\n    var _this = this;\n\n    var dataArgs = args;\n    var state = this.getStateEventArgument(query);\n    var def = new Deferred();\n    var deff = new Deferred();\n\n    if (args.requestType !== undefined && this.dataState.isDataChanged !== false) {\n      state.action = args;\n\n      if (args.requestType === 'cardChanged' || args.requestType === 'cardRemoved' || args.requestType === 'cardCreated') {\n        var editArgs_1 = args;\n        editArgs_1.promise = deff.promise;\n        editArgs_1.state = state;\n        editArgs_1.index = index;\n        this.setState({\n          isPending: true,\n          resolver: deff.resolve\n        });\n        dataArgs.endEdit = deff.resolve;\n        dataArgs.cancelEdit = deff.reject;\n        this.parent.trigger(events.dataSourceChanged, editArgs_1);\n        deff.promise.then(function () {\n          _this.setState({\n            isPending: true,\n            resolver: def.resolve\n          });\n\n          _this.parent.trigger(events.dataStateChange, state);\n\n          editArgs_1.addedRecords.forEach(function (data) {\n            _this.parent.kanbanData.push(data);\n          });\n          editArgs_1.changedRecords.forEach(function (changedRecord) {\n            var cardObj = _this.parent.kanbanData.filter(function (data) {\n              return data[_this.parent.cardSettings.headerField] === changedRecord[_this.parent.cardSettings.headerField];\n            })[0];\n\n            extend(cardObj, changedRecord);\n          });\n          editArgs_1.deletedRecords.forEach(function (deletedRecord) {\n            var index = _this.parent.kanbanData.findIndex(function (data) {\n              return data[_this.parent.cardSettings.headerField] === deletedRecord[_this.parent.cardSettings.headerField];\n            });\n\n            _this.parent.kanbanData.splice(index, 1);\n          });\n        }).catch(function () {\n          _this.parent.hideSpinner();\n\n          void 0;\n        });\n      } else {\n        this.setState({\n          isPending: true,\n          resolver: def.resolve\n        });\n        this.parent.trigger(events.dataStateChange, state);\n      }\n    } else {\n      this.setState({});\n      def.resolve(this.parent.dataSource);\n    }\n\n    return def;\n  };\n  /**\n   * The function used to get the table name from the given Query\n   *\n   * @returns {string} Returns the table name.\n   * @private\n   */\n\n\n  Data.prototype.getTable = function () {\n    if (this.parent.query) {\n      var query = this.getQuery();\n      return query.fromTable;\n    } else {\n      return null;\n    }\n  };\n  /**\n   * The function is used to send the request and get response from datamanager\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.refreshDataManager = function () {\n    var _this = this;\n\n    var dataManager = this.getData(this.getQuery());\n    dataManager.then(function (e) {\n      return _this.dataManagerSuccess(e);\n    }).catch(function (e) {\n      return _this.dataManagerFailure(e);\n    });\n  };\n  /**\n   * The function is used to handle the success response from dataManager\n   *\n   * @param {ReturnType} e Accepts the dataManager success result\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.dataManagerSuccess = function (e, type, offlineArgs, index) {\n    var _this = this;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    if (type) {\n      var resultData = extend([], e.result, null, true);\n      this.parent.kanbanData = resultData;\n\n      if (offlineArgs.requestType === 'cardCreated') {\n        if (!Array.isArray(e)) {\n          offlineArgs.addedRecords[0] = extend(offlineArgs.addedRecords[0], e);\n        } else {\n          this.modifyArrayData(offlineArgs.addedRecords, e);\n        }\n      } else if (offlineArgs.requestType === 'cardChanged') {\n        if (!Array.isArray(e)) {\n          offlineArgs.changedRecords[0] = extend(offlineArgs.changedRecords[0], e);\n        } else {\n          this.modifyArrayData(offlineArgs.changedRecords, e);\n        }\n      } else if (offlineArgs.requestType === 'cardRemoved') {\n        if (!Array.isArray(e)) {\n          offlineArgs.deletedRecords[0] = extend(offlineArgs.deletedRecords[0], e);\n        } else {\n          this.modifyArrayData(offlineArgs.deletedRecords, e);\n        }\n      }\n\n      this.refreshUI(offlineArgs, index);\n    } else {\n      this.parent.trigger(events.dataBinding, e, function (args) {\n        var resultData = extend([], args.result, null, true);\n        _this.parent.kanbanData = resultData;\n\n        _this.parent.notify(events.dataReady, {\n          processedData: resultData\n        });\n\n        _this.parent.trigger(events.dataBound, null, function () {\n          return _this.parent.hideSpinner();\n        });\n      });\n    }\n  };\n  /**\n   * The function is used to handle the failure response from dataManager\n   *\n   * @param {ReturnType} e Accepts the dataManager failure result\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.dataManagerFailure = function (e) {\n    var _this = this;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.trigger(events.actionFailure, {\n      error: e\n    }, function () {\n      return _this.parent.hideSpinner();\n    });\n  };\n  /**\n   * The function is used to perform the insert, update, delete and batch actions in datamanager\n   *\n   * @param {string} updateType Accepts the update type action\n   * @param {SaveChanges} params Accepts the savechanges params\n   * @param {string} type Accepts the requestType as string\n   * @param {Object} data Accepts the data to perform crud action\n   * @param {number} index Accepts the index to refresh the data into UI\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.updateDataManager = function (updateType, params, type, data, index) {\n    var _this = this;\n\n    this.parent.showSpinner();\n    var promise;\n    var actionArgs = {\n      requestType: type,\n      cancel: false,\n      addedRecords: params.addedRecords,\n      changedRecords: params.changedRecords,\n      deletedRecords: params.deletedRecords\n    };\n    this.eventPromise(actionArgs, this.query, index);\n    this.parent.trigger(events.actionComplete, actionArgs, function (offlineArgs) {\n      if (!offlineArgs.cancel) {\n        switch (updateType) {\n          case 'insert':\n            promise = _this.dataManager.insert(data, _this.getTable(), _this.getQuery());\n            break;\n\n          case 'update':\n            promise = _this.dataManager.update(_this.keyField, data, _this.getTable(), _this.getQuery());\n            break;\n\n          case 'delete':\n            promise = _this.dataManager.remove(_this.keyField, data, _this.getTable(), _this.getQuery());\n            break;\n\n          case 'batch':\n            promise = _this.dataManager.saveChanges(params, _this.keyField, _this.getTable(), _this.getQuery());\n            break;\n        }\n\n        if (_this.dataManager.dataSource.offline) {\n          if (!_this.isObservable) {\n            _this.kanbanData = _this.dataManager;\n            _this.parent.kanbanData = _this.dataManager.dataSource.json;\n\n            _this.refreshUI(offlineArgs, index);\n          }\n        } else {\n          promise.then(function () {\n            if (_this.parent.isDestroyed) {\n              return;\n            }\n\n            var dataManager = _this.getData(_this.getQuery());\n\n            dataManager.then(function (e) {\n              return _this.dataManagerSuccess(e, 'DataSourceChange', offlineArgs, index);\n            }).catch(function (e) {\n              return _this.dataManagerFailure(e);\n            });\n          }).catch(function (e) {\n            _this.dataManagerFailure(e);\n          });\n        }\n      }\n    });\n  };\n\n  Data.prototype.modifyArrayData = function (onLineData, e) {\n    if (onLineData.length === e.length) {\n      for (var i = 0; i < e.length; i++) {\n        onLineData[i] = extend(onLineData[i], e[i]);\n      }\n    }\n\n    return onLineData;\n  };\n  /**\n   * The function is used to refresh the UI once the data manager action is completed\n   *\n   * @param {ActionEventArgs} args Accepts the ActionEventArgs to refresh UI.\n   * @param {number} position Accepts the index to refresh UI.\n   * @returns {void}\n   */\n\n\n  Data.prototype.refreshUI = function (args, position) {\n    var _this = this;\n\n    this.parent.layoutModule.columnData = this.parent.layoutModule.getColumnCards();\n\n    if (this.parent.swimlaneSettings.keyField) {\n      this.parent.layoutModule.kanbanRows = this.parent.layoutModule.getRows();\n      this.parent.layoutModule.swimlaneData = this.parent.layoutModule.getSwimlaneCards();\n    }\n\n    args.addedRecords.forEach(function (data, index) {\n      if (_this.parent.swimlaneSettings.keyField && !data[_this.parent.swimlaneSettings.keyField]) {\n        data[_this.parent.swimlaneSettings.keyField] = '';\n      }\n\n      _this.parent.layoutModule.renderCardBasedOnIndex(data, position + index);\n    });\n    args.changedRecords.forEach(function (data) {\n      if (_this.parent.swimlaneSettings.keyField && !data[_this.parent.swimlaneSettings.keyField]) {\n        data[_this.parent.swimlaneSettings.keyField] = '';\n      }\n\n      _this.parent.layoutModule.removeCard(data);\n\n      _this.parent.layoutModule.renderCardBasedOnIndex(data, position);\n\n      if (_this.parent.layoutModule.isSelectedCard) {\n        _this.parent.actionModule.SingleCardSelection(data);\n      }\n\n      if (_this.parent.sortSettings.field && _this.parent.sortSettings.sortBy === 'Index' && _this.parent.sortSettings.direction === 'Descending' && position > 0) {\n        --position;\n      }\n    });\n    args.deletedRecords.forEach(function (data) {\n      _this.parent.layoutModule.removeCard(data);\n    });\n    this.parent.layoutModule.refresh();\n    this.parent.renderTemplates();\n    this.parent.notify(events.contentReady, {});\n    this.parent.trigger(events.dataBound, args, function () {\n      return _this.parent.hideSpinner();\n    });\n  };\n\n  return Data;\n}();\n\nexport { Data };","map":{"version":3,"names":["extend","DataManager","Query","Deferred","UrlAdaptor","events","Data","parent","dataState","isPending","resolver","isDataChanged","keyField","cardSettings","headerField","isObservable","initDataManager","dataSource","query","refreshDataManager","prototype","dataManager","kanbanData","getQuery","clone","getData","def","eventPromise","requestType","promise","executeQuery","setState","state","getStateEventArgument","adaptr","dm","url","adaptor","processQuery","data","JSON","parse","pvtData","args","index","_this","dataArgs","deff","undefined","action","editArgs_1","resolve","endEdit","cancelEdit","reject","trigger","dataSourceChanged","then","dataStateChange","addedRecords","forEach","push","changedRecords","changedRecord","cardObj","filter","deletedRecords","deletedRecord","findIndex","splice","catch","hideSpinner","getTable","fromTable","e","dataManagerSuccess","dataManagerFailure","type","offlineArgs","isDestroyed","resultData","result","Array","isArray","modifyArrayData","refreshUI","dataBinding","notify","dataReady","processedData","dataBound","actionFailure","error","updateDataManager","updateType","params","showSpinner","actionArgs","cancel","actionComplete","insert","update","remove","saveChanges","offline","json","onLineData","length","i","position","layoutModule","columnData","getColumnCards","swimlaneSettings","kanbanRows","getRows","swimlaneData","getSwimlaneCards","renderCardBasedOnIndex","removeCard","isSelectedCard","actionModule","SingleCardSelection","sortSettings","field","sortBy","direction","refresh","renderTemplates","contentReady"],"sources":["C:/Users/shahj/OneDrive/Documents/GitHub/Admin Dashboard/Frontend/node_modules/@syncfusion/ej2-kanban/src/kanban/base/data.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { extend } from '@syncfusion/ej2-base';\nimport { DataManager, Query, Deferred, UrlAdaptor } from '@syncfusion/ej2-data';\nimport * as events from './constant';\n/**\n * Kanban data module\n */\nvar Data = /** @class */ (function () {\n    /**\n     * Constructor for data module\n     *\n     * @param {Kanban} parent Accepts the instance of the Kanban\n     */\n    function Data(parent) {\n        this.dataState = { isPending: false, resolver: null, isDataChanged: false };\n        this.parent = parent;\n        this.keyField = this.parent.cardSettings.headerField;\n        this.dataState = { isDataChanged: false };\n        this.isObservable = false;\n        this.initDataManager(parent.dataSource, parent.query);\n        this.refreshDataManager();\n    }\n    /**\n     * The function used to initialize dataManager` and query\n     *\n     * @param {Object[] | DataManager} dataSource Accepts the dataSource as collection of objects or Datamanager instance.\n     * @param {Query} query Accepts the query to process the data from collections.\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.initDataManager = function (dataSource, query) {\n        this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n        this.query = query instanceof Query ? query : new Query();\n        this.kanbanData = new DataManager(this.parent.kanbanData);\n    };\n    /**\n     * The function used to generate updated Query from schedule model\n     *\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.getQuery = function () {\n        return this.query.clone();\n    };\n    /**\n     * The function used to get dataSource by executing given Query\n     *\n     * @param  {Query} query - A Query that specifies to generate dataSource\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.getData = function (query) {\n        if (this.parent.dataSource && 'result' in this.parent.dataSource) {\n            var def = this.eventPromise({ requestType: '' }, query);\n            this.isObservable = true;\n            return def.promise;\n        }\n        return this.dataManager.executeQuery(query);\n    };\n    Data.prototype.setState = function (state) {\n        return this.dataState = state;\n    };\n    Data.prototype.getStateEventArgument = function (query) {\n        var adaptr = new UrlAdaptor();\n        var dm = new DataManager({ url: '', adaptor: new UrlAdaptor });\n        var state = adaptr.processQuery(dm, query);\n        var data = JSON.parse(state.data);\n        return extend(data, state.pvtData);\n    };\n    Data.prototype.eventPromise = function (args, query, index) {\n        var _this = this;\n        var dataArgs = args;\n        var state = this.getStateEventArgument(query);\n        var def = new Deferred();\n        var deff = new Deferred();\n        if (args.requestType !== undefined && this.dataState.isDataChanged !== false) {\n            state.action = args;\n            if (args.requestType === 'cardChanged' || args.requestType === 'cardRemoved' || args.requestType === 'cardCreated') {\n                var editArgs_1 = args;\n                editArgs_1.promise = deff.promise;\n                editArgs_1.state = state;\n                editArgs_1.index = index;\n                this.setState({ isPending: true, resolver: deff.resolve });\n                dataArgs.endEdit = deff.resolve;\n                dataArgs.cancelEdit = deff.reject;\n                this.parent.trigger(events.dataSourceChanged, editArgs_1);\n                deff.promise.then(function () {\n                    _this.setState({ isPending: true, resolver: def.resolve });\n                    _this.parent.trigger(events.dataStateChange, state);\n                    editArgs_1.addedRecords.forEach(function (data) {\n                        _this.parent.kanbanData.push(data);\n                    });\n                    editArgs_1.changedRecords.forEach(function (changedRecord) {\n                        var cardObj = _this.parent.kanbanData.filter(function (data) {\n                            return data[_this.parent.cardSettings.headerField] === changedRecord[_this.parent.cardSettings.headerField];\n                        })[0];\n                        extend(cardObj, changedRecord);\n                    });\n                    editArgs_1.deletedRecords.forEach(function (deletedRecord) {\n                        var index = _this.parent.kanbanData.findIndex(function (data) {\n                            return data[_this.parent.cardSettings.headerField] === deletedRecord[_this.parent.cardSettings.headerField];\n                        });\n                        _this.parent.kanbanData.splice(index, 1);\n                    });\n                }).catch(function () { _this.parent.hideSpinner(); void 0; });\n            }\n            else {\n                this.setState({ isPending: true, resolver: def.resolve });\n                this.parent.trigger(events.dataStateChange, state);\n            }\n        }\n        else {\n            this.setState({});\n            def.resolve(this.parent.dataSource);\n        }\n        return def;\n    };\n    /**\n     * The function used to get the table name from the given Query\n     *\n     * @returns {string} Returns the table name.\n     * @private\n     */\n    Data.prototype.getTable = function () {\n        if (this.parent.query) {\n            var query = this.getQuery();\n            return query.fromTable;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * The function is used to send the request and get response from datamanager\n     *\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.refreshDataManager = function () {\n        var _this = this;\n        var dataManager = this.getData(this.getQuery());\n        dataManager.then(function (e) { return _this.dataManagerSuccess(e); }).catch(function (e) { return _this.dataManagerFailure(e); });\n    };\n    /**\n     * The function is used to handle the success response from dataManager\n     *\n     * @param {ReturnType} e Accepts the dataManager success result\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.dataManagerSuccess = function (e, type, offlineArgs, index) {\n        var _this = this;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        if (type) {\n            var resultData = extend([], e.result, null, true);\n            this.parent.kanbanData = resultData;\n            if (offlineArgs.requestType === 'cardCreated') {\n                if (!Array.isArray(e)) {\n                    offlineArgs.addedRecords[0] = extend(offlineArgs.addedRecords[0], e);\n                }\n                else {\n                    this.modifyArrayData(offlineArgs.addedRecords, e);\n                }\n            }\n            else if (offlineArgs.requestType === 'cardChanged') {\n                if (!Array.isArray(e)) {\n                    offlineArgs.changedRecords[0] = extend(offlineArgs.changedRecords[0], e);\n                }\n                else {\n                    this.modifyArrayData(offlineArgs.changedRecords, e);\n                }\n            }\n            else if (offlineArgs.requestType === 'cardRemoved') {\n                if (!Array.isArray(e)) {\n                    offlineArgs.deletedRecords[0] = extend(offlineArgs.deletedRecords[0], e);\n                }\n                else {\n                    this.modifyArrayData(offlineArgs.deletedRecords, e);\n                }\n            }\n            this.refreshUI(offlineArgs, index);\n        }\n        else {\n            this.parent.trigger(events.dataBinding, e, function (args) {\n                var resultData = extend([], args.result, null, true);\n                _this.parent.kanbanData = resultData;\n                _this.parent.notify(events.dataReady, { processedData: resultData });\n                _this.parent.trigger(events.dataBound, null, function () { return _this.parent.hideSpinner(); });\n            });\n        }\n    };\n    /**\n     * The function is used to handle the failure response from dataManager\n     *\n     * @param {ReturnType} e Accepts the dataManager failure result\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.dataManagerFailure = function (e) {\n        var _this = this;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.trigger(events.actionFailure, { error: e }, function () { return _this.parent.hideSpinner(); });\n    };\n    /**\n     * The function is used to perform the insert, update, delete and batch actions in datamanager\n     *\n     * @param {string} updateType Accepts the update type action\n     * @param {SaveChanges} params Accepts the savechanges params\n     * @param {string} type Accepts the requestType as string\n     * @param {Object} data Accepts the data to perform crud action\n     * @param {number} index Accepts the index to refresh the data into UI\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.updateDataManager = function (updateType, params, type, data, index) {\n        var _this = this;\n        this.parent.showSpinner();\n        var promise;\n        var actionArgs = {\n            requestType: type, cancel: false, addedRecords: params.addedRecords,\n            changedRecords: params.changedRecords, deletedRecords: params.deletedRecords\n        };\n        this.eventPromise(actionArgs, this.query, index);\n        this.parent.trigger(events.actionComplete, actionArgs, function (offlineArgs) {\n            if (!offlineArgs.cancel) {\n                switch (updateType) {\n                    case 'insert':\n                        promise = _this.dataManager.insert(data, _this.getTable(), _this.getQuery());\n                        break;\n                    case 'update':\n                        promise = _this.dataManager.update(_this.keyField, data, _this.getTable(), _this.getQuery());\n                        break;\n                    case 'delete':\n                        promise = _this.dataManager.remove(_this.keyField, data, _this.getTable(), _this.getQuery());\n                        break;\n                    case 'batch':\n                        promise = _this.dataManager.saveChanges(params, _this.keyField, _this.getTable(), _this.getQuery());\n                        break;\n                }\n                if (_this.dataManager.dataSource.offline) {\n                    if (!_this.isObservable) {\n                        _this.kanbanData = _this.dataManager;\n                        _this.parent.kanbanData = _this.dataManager.dataSource.json;\n                        _this.refreshUI(offlineArgs, index);\n                    }\n                }\n                else {\n                    promise.then(function () {\n                        if (_this.parent.isDestroyed) {\n                            return;\n                        }\n                        var dataManager = _this.getData(_this.getQuery());\n                        dataManager.then(function (e) { return _this.dataManagerSuccess(e, 'DataSourceChange', offlineArgs, index); }).catch(function (e) { return _this.dataManagerFailure(e); });\n                    }).catch(function (e) {\n                        _this.dataManagerFailure(e);\n                    });\n                }\n            }\n        });\n    };\n    Data.prototype.modifyArrayData = function (onLineData, e) {\n        if (onLineData.length === e.length) {\n            for (var i = 0; i < e.length; i++) {\n                onLineData[i] = extend(onLineData[i], e[i]);\n            }\n        }\n        return onLineData;\n    };\n    /**\n     * The function is used to refresh the UI once the data manager action is completed\n     *\n     * @param {ActionEventArgs} args Accepts the ActionEventArgs to refresh UI.\n     * @param {number} position Accepts the index to refresh UI.\n     * @returns {void}\n     */\n    Data.prototype.refreshUI = function (args, position) {\n        var _this = this;\n        this.parent.layoutModule.columnData = this.parent.layoutModule.getColumnCards();\n        if (this.parent.swimlaneSettings.keyField) {\n            this.parent.layoutModule.kanbanRows = this.parent.layoutModule.getRows();\n            this.parent.layoutModule.swimlaneData = this.parent.layoutModule.getSwimlaneCards();\n        }\n        args.addedRecords.forEach(function (data, index) {\n            if (_this.parent.swimlaneSettings.keyField && !data[_this.parent.swimlaneSettings.keyField]) {\n                data[_this.parent.swimlaneSettings.keyField] = '';\n            }\n            _this.parent.layoutModule.renderCardBasedOnIndex(data, position + index);\n        });\n        args.changedRecords.forEach(function (data) {\n            if (_this.parent.swimlaneSettings.keyField && !data[_this.parent.swimlaneSettings.keyField]) {\n                data[_this.parent.swimlaneSettings.keyField] = '';\n            }\n            _this.parent.layoutModule.removeCard(data);\n            _this.parent.layoutModule.renderCardBasedOnIndex(data, position);\n            if (_this.parent.layoutModule.isSelectedCard) {\n                _this.parent.actionModule.SingleCardSelection(data);\n            }\n            if (_this.parent.sortSettings.field && _this.parent.sortSettings.sortBy === 'Index'\n                && _this.parent.sortSettings.direction === 'Descending' && position > 0) {\n                --position;\n            }\n        });\n        args.deletedRecords.forEach(function (data) {\n            _this.parent.layoutModule.removeCard(data);\n        });\n        this.parent.layoutModule.refresh();\n        this.parent.renderTemplates();\n        this.parent.notify(events.contentReady, {});\n        this.parent.trigger(events.dataBound, args, function () { return _this.parent.hideSpinner(); });\n    };\n    return Data;\n}());\nexport { Data };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}