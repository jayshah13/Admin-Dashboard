{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport * as CONSTANT from './../base/constant';\nimport { extend } from '@syncfusion/ej2-base';\nimport * as EVENTS from './../../common/constant';\n/**\n * SelectionCommands internal component\n *\n * @hidden\n\n */\n\nvar MDSelectionFormats =\n/** @class */\nfunction () {\n  function MDSelectionFormats(parent) {\n    extend(this, this, parent, true);\n    this.selection = this.parent.markdownSelection;\n    this.addEventListener();\n  }\n\n  MDSelectionFormats.prototype.addEventListener = function () {\n    this.parent.observer.on(CONSTANT.selectionCommand, this.applyCommands, this);\n    this.parent.observer.on(EVENTS.KEY_DOWN_HANDLER, this.keyDownHandler, this);\n  };\n\n  MDSelectionFormats.prototype.keyDownHandler = function (e) {\n    switch (e.event.action) {\n      case 'bold':\n        this.applyCommands({\n          subCommand: 'Bold',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'italic':\n        this.applyCommands({\n          subCommand: 'Italic',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'strikethrough':\n        this.applyCommands({\n          subCommand: 'StrikeThrough',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'uppercase':\n        this.applyCommands({\n          subCommand: 'UpperCase',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'lowercase':\n        this.applyCommands({\n          subCommand: 'LowerCase',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'superscript':\n        this.applyCommands({\n          subCommand: 'SuperScript',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'subscript':\n        this.applyCommands({\n          subCommand: 'SubScript',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n    }\n  };\n\n  MDSelectionFormats.prototype.isBold = function (text, cmd) {\n    return text.search('\\\\' + cmd + '\\\\' + cmd + '') !== -1;\n  };\n\n  MDSelectionFormats.prototype.isItalic = function (text, cmd) {\n    return text.search('\\\\' + cmd) !== -1;\n  };\n\n  MDSelectionFormats.prototype.isMatch = function (text, cmd) {\n    var matchText = [''];\n\n    switch (cmd) {\n      case this.syntax.Italic:\n        matchText = text.match(this.singleCharRegx(cmd));\n        break;\n\n      case this.syntax.InlineCode:\n        matchText = text.match(this.singleCharRegx(cmd));\n        break;\n\n      case this.syntax.StrikeThrough:\n        matchText = text.match(this.singleCharRegx(cmd));\n        break;\n    }\n\n    return matchText;\n  };\n\n  MDSelectionFormats.prototype.multiCharRegx = function (cmd) {\n    return new RegExp('(\\\\' + cmd + '\\\\' + cmd + ')', 'g');\n  };\n\n  MDSelectionFormats.prototype.singleCharRegx = function (cmd) {\n    return new RegExp('(\\\\' + cmd + ')', 'g');\n  };\n\n  MDSelectionFormats.prototype.isAppliedCommand = function (cmd) {\n    // eslint-disable-next-line\n    var selectCmd = '';\n    var isFormat = false;\n    var textArea = this.parent.element;\n    var start = textArea.selectionStart;\n\n    var splitAt = function (index) {\n      return function (x) {\n        return [x.slice(0, index), x.slice(index)];\n      };\n    };\n\n    var splitText = splitAt(start)(textArea.value);\n    var cmdB = this.syntax.Bold.substr(0, 1);\n    var cmdI = this.syntax.Italic;\n    var selectedText = this.parent.markdownSelection.getSelectedText(textArea);\n\n    if (selectedText !== '' && selectedText === selectedText.toLocaleUpperCase() && cmd === 'UpperCase') {\n      return true;\n    } else if (selectedText === '') {\n      var beforeText = textArea.value.substr(splitText[0].length - 1, 1);\n      var afterText = splitText[1].substr(0, 1);\n\n      if (beforeText !== '' && afterText !== '' && beforeText.match(/[a-z]/i) && beforeText === beforeText.toLocaleUpperCase() && afterText === afterText.toLocaleUpperCase() && cmd === 'UpperCase') {\n        return true;\n      }\n    }\n\n    if (!this.isBold(splitText[0], cmdB) && !this.isItalic(splitText[0], cmdI) && !this.isBold(splitText[1], cmdB) && !this.isItalic(splitText[1], cmdI)) {\n      if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.StrikeThrough)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.StrikeThrough)) && this.isMatch(splitText[0], this.syntax.StrikeThrough).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.StrikeThrough).length % 2 === 1 && cmd === 'StrikeThrough') {\n        isFormat = true;\n      }\n\n      if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.InlineCode)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.InlineCode)) && this.isMatch(splitText[0], this.syntax.InlineCode).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.InlineCode).length % 2 === 1 && cmd === 'InlineCode') {\n        isFormat = true;\n      }\n      /* eslint-disable */\n\n\n      if (!isNullOrUndefined(splitText[0].match(/\\<sub>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sub>/g)) && splitText[0].match(/\\<sub>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sub>/g).length % 2 === 1 && cmd === 'SubScript') {\n        isFormat = true;\n      }\n\n      if (!isNullOrUndefined(splitText[0].match(/\\<sup>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sup>/g)) && splitText[0].match(/\\<sup>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sup>/g).length % 2 === 1 && cmd === 'SuperScript') {\n        isFormat = true;\n      }\n      /* eslint-enable */\n\n    }\n\n    if (this.isBold(splitText[0], cmdB) && this.isBold(splitText[1], cmdB) && splitText[0].match(this.multiCharRegx(cmdB)).length % 2 === 1 && splitText[1].match(this.multiCharRegx(cmdB)).length % 2 === 1 && cmd === 'Bold') {\n      isFormat = true;\n    }\n\n    splitText[0] = this.isBold(splitText[0], cmdB) ? splitText[0].replace(this.multiCharRegx(cmdB), '$%@') : splitText[0];\n    splitText[1] = this.isBold(splitText[1], cmdB) ? splitText[1].replace(this.multiCharRegx(cmdB), '$%@') : splitText[1];\n\n    if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.Italic)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.Italic)) && this.isMatch(splitText[0], this.syntax.Italic).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.Italic).length % 2 === 1 && cmd === 'Italic') {\n      isFormat = true;\n    }\n\n    if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.StrikeThrough)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.StrikeThrough)) && this.isMatch(splitText[0], this.syntax.StrikeThrough).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.StrikeThrough).length % 2 === 1 && cmd === 'StrikeThrough') {\n      isFormat = true;\n    }\n\n    if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.InlineCode)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.InlineCode)) && this.isMatch(splitText[0], this.syntax.InlineCode).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.InlineCode).length % 2 === 1 && cmd === 'InlineCode') {\n      isFormat = true;\n    }\n    /* eslint-disable */\n\n\n    if (!isNullOrUndefined(splitText[0].match(/\\<sub>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sub>/g)) && splitText[0].match(/\\<sub>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sub>/g).length % 2 === 1 && cmd === 'SubScript') {\n      isFormat = true;\n    }\n\n    if (!isNullOrUndefined(splitText[0].match(/\\<sup>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sup>/g)) && splitText[0].match(/\\<sup>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sup>/g).length % 2 === 1 && cmd === 'SuperScript') {\n      isFormat = true;\n      /* eslint-enable */\n    }\n\n    return isFormat;\n  };\n\n  MDSelectionFormats.prototype.applyCommands = function (e) {\n    this.currentAction = e.subCommand;\n    var textArea = this.parent.element;\n    this.selection.save(textArea.selectionStart, textArea.selectionEnd);\n    var start = textArea.selectionStart;\n    var end = textArea.selectionEnd;\n    var addedLength = 0;\n    var selection = this.parent.markdownSelection.getSelectedInlinePoints(textArea);\n\n    if (this.isAppliedCommand(e.subCommand) && selection.text !== '') {\n      var startCmd = this.syntax[e.subCommand];\n      var endCmd = e.subCommand === 'SubScript' ? '</sub>' : e.subCommand === 'SuperScript' ? '</sup>' : this.syntax[e.subCommand];\n      var startLength = e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase' ? 0 : startCmd.length;\n      var startNo = textArea.value.substr(0, selection.start).lastIndexOf(startCmd);\n      var endNo = textArea.value.substr(selection.end, textArea.value.length).indexOf(endCmd);\n      endNo = endNo + selection.end;\n      var repStartText = this.replaceAt(textArea.value.substr(0, selection.start), startCmd, '', startNo, selection.start);\n      var repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), endCmd, '', 0, endNo);\n      textArea.value = repStartText + selection.text + repEndText;\n      this.restore(textArea, start - startLength, end - startLength, e);\n      return;\n    }\n\n    if (selection.text !== '' && !this.isApplied(selection, e.subCommand)) {\n      addedLength = e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase' ? 0 : this.syntax[e.subCommand].length;\n      var repStart = textArea.value.substr(selection.start - this.syntax[e.subCommand].length, this.syntax[e.subCommand].length);\n      var repEnd = void 0;\n\n      if (repStart === e.subCommand || selection.start - this.syntax[e.subCommand].length === textArea.value.indexOf(this.syntax[e.subCommand]) && (selection.end === textArea.value.lastIndexOf(this.syntax[e.subCommand]) || selection.end === textArea.value.lastIndexOf('</' + this.syntax[e.subCommand].substring(1, 5)))) {\n        if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {\n          repEnd = textArea.value.substr(selection.end, this.syntax[e.subCommand].length + 1);\n        } else {\n          repEnd = textArea.value.substr(selection.end, this.syntax[e.subCommand].length);\n        }\n\n        var repStartText = this.replaceAt(textArea.value.substr(0, selection.start), repStart, '', selection.start - this.syntax[e.subCommand].length, selection.start);\n        var repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), repEnd, '', 0, repEnd.length);\n        textArea.value = repStartText + selection.text + repEndText;\n        this.restore(textArea, start - addedLength, end - addedLength, e);\n      } else {\n        if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {\n          selection.text = this.syntax[e.subCommand] + selection.text + '</' + this.syntax[e.subCommand].substring(1, 5);\n        } else if (e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase') {\n          selection.text = e.subCommand === 'UpperCase' ? selection.text.toUpperCase() : selection.text.toLowerCase();\n        } else {\n          selection.text = this.syntax[e.subCommand] + selection.text + this.syntax[e.subCommand];\n        }\n\n        textArea.value = textArea.value.substr(0, selection.start) + selection.text + textArea.value.substr(selection.end, textArea.value.length);\n        this.restore(textArea, start + addedLength, end + addedLength, e);\n      }\n    } else if (e.subCommand !== 'UpperCase' && e.subCommand !== 'LowerCase') {\n      if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {\n        selection.text = this.textReplace(selection.text, e.subCommand);\n        selection.text = this.syntax[e.subCommand] + selection.text + '</' + this.syntax[e.subCommand].substring(1, 5);\n      } else {\n        selection.text = this.textReplace(selection.text, e.subCommand);\n        selection.text = this.syntax[e.subCommand] + selection.text + this.syntax[e.subCommand];\n      }\n\n      textArea.value = textArea.value.substr(0, selection.start) + selection.text + textArea.value.substr(selection.end, textArea.value.length);\n      addedLength = this.syntax[e.subCommand].length;\n\n      if (selection.start === selection.end) {\n        this.restore(textArea, start + addedLength, end + addedLength, e);\n      } else {\n        this.restore(textArea, start + addedLength, end - addedLength, e);\n      }\n    } else {\n      this.restore(textArea, start, end, e);\n    }\n\n    this.parent.undoRedoManager.saveData();\n  };\n\n  MDSelectionFormats.prototype.replaceAt = function (input, search, replace, start, end) {\n    return input.slice(0, start) + input.slice(start, end).replace(search, replace) + input.slice(end);\n  };\n\n  MDSelectionFormats.prototype.restore = function (textArea, start, end, event) {\n    this.selection.save(start, end);\n    this.selection.restore(textArea);\n\n    if (event && event.callBack) {\n      event.callBack({\n        requestType: this.currentAction,\n        selectedText: this.selection.getSelectedText(textArea),\n        editorMode: 'Markdown',\n        event: event.event\n      });\n    }\n  };\n\n  MDSelectionFormats.prototype.textReplace = function (text, command) {\n    var regx = this.singleCharRegx(this.syntax[command]);\n\n    switch (command) {\n      case 'Bold':\n        regx = this.multiCharRegx(this.syntax[command].substr(0, 1));\n        text = text.replace(regx, '');\n        break;\n\n      case 'Italic':\n        if (!this.isBold(text, this.syntax[command].substr(0, 1))) {\n          text = text.replace(regx, '');\n        } else {\n          var regxB = this.multiCharRegx(this.syntax[command].substr(0, 1));\n          var repText = text;\n          repText = repText.replace(regxB, '$%@').replace(regx, '');\n          var regxTemp = new RegExp('\\\\$%@', 'g');\n          text = repText.replace(regxTemp, this.syntax[command].substr(0, 1) + this.syntax[command].substr(0, 1));\n        }\n\n        break;\n\n      case 'StrikeThrough':\n        text = text.replace(regx, '');\n        break;\n\n      case 'InlineCode':\n        text = text.replace(regx, '');\n        break;\n\n      case 'SubScript':\n        text = text.replace(/<sub>/g, '').replace(/<\\/sub>/g, '');\n        break;\n\n      case 'SuperScript':\n        text = text.replace(/<sup>/g, '').replace(/<\\/sup>/g, '');\n        break;\n    }\n\n    return text;\n  };\n\n  MDSelectionFormats.prototype.isApplied = function (line, command) {\n    var regx = this.singleCharRegx(this.syntax[command]);\n\n    switch (command) {\n      case 'SubScript':\n      case 'SuperScript':\n        regx = this.singleCharRegx(this.syntax[command]);\n        return regx.test(line.text);\n\n      case 'Bold':\n      case 'StrikeThrough':\n        regx = this.multiCharRegx(this.syntax[command].substr(0, 1));\n        return regx.test(line.text);\n\n      case 'UpperCase':\n      case 'LowerCase':\n        regx = new RegExp('^[' + this.syntax[command] + ']*$', 'g');\n        return regx.test(line.text);\n\n      case 'Italic':\n        {\n          var regTest = void 0;\n          var regxB = this.multiCharRegx(this.syntax[command].substr(0, 1));\n\n          if (regxB.test(line.text)) {\n            var repText = line.text;\n            repText = repText.replace(regxB, '$%#');\n            regTest = regx.test(repText);\n          } else {\n            regTest = regx.test(line.text);\n          }\n\n          return regTest;\n        }\n\n      case 'InlineCode':\n        return regx.test(line.text);\n    }\n  };\n\n  return MDSelectionFormats;\n}();\n\nexport { MDSelectionFormats };","map":{"version":3,"names":["isNullOrUndefined","CONSTANT","extend","EVENTS","MDSelectionFormats","parent","selection","markdownSelection","addEventListener","prototype","observer","on","selectionCommand","applyCommands","KEY_DOWN_HANDLER","keyDownHandler","e","event","action","subCommand","callBack","preventDefault","isBold","text","cmd","search","isItalic","isMatch","matchText","syntax","Italic","match","singleCharRegx","InlineCode","StrikeThrough","multiCharRegx","RegExp","isAppliedCommand","selectCmd","isFormat","textArea","element","start","selectionStart","splitAt","index","x","slice","splitText","value","cmdB","Bold","substr","cmdI","selectedText","getSelectedText","toLocaleUpperCase","beforeText","length","afterText","replace","currentAction","save","selectionEnd","end","addedLength","getSelectedInlinePoints","startCmd","endCmd","startLength","startNo","lastIndexOf","endNo","indexOf","repStartText","replaceAt","repEndText","restore","isApplied","repStart","repEnd","substring","toUpperCase","toLowerCase","textReplace","undoRedoManager","saveData","input","requestType","editorMode","command","regx","regxB","repText","regxTemp","line","test","regTest"],"sources":["C:/Users/shahj/OneDrive/Documents/GitHub/Multifunctional-React-Dashboard/node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/md-selection-formats.js"],"sourcesContent":["import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport * as CONSTANT from './../base/constant';\nimport { extend } from '@syncfusion/ej2-base';\nimport * as EVENTS from './../../common/constant';\n/**\n * SelectionCommands internal component\n *\n * @hidden\n\n */\nvar MDSelectionFormats = /** @class */ (function () {\n    function MDSelectionFormats(parent) {\n        extend(this, this, parent, true);\n        this.selection = this.parent.markdownSelection;\n        this.addEventListener();\n    }\n    MDSelectionFormats.prototype.addEventListener = function () {\n        this.parent.observer.on(CONSTANT.selectionCommand, this.applyCommands, this);\n        this.parent.observer.on(EVENTS.KEY_DOWN_HANDLER, this.keyDownHandler, this);\n    };\n    MDSelectionFormats.prototype.keyDownHandler = function (e) {\n        switch (e.event.action) {\n            case 'bold':\n                this.applyCommands({ subCommand: 'Bold', callBack: e.callBack });\n                e.event.preventDefault();\n                break;\n            case 'italic':\n                this.applyCommands({ subCommand: 'Italic', callBack: e.callBack });\n                e.event.preventDefault();\n                break;\n            case 'strikethrough':\n                this.applyCommands({ subCommand: 'StrikeThrough', callBack: e.callBack });\n                e.event.preventDefault();\n                break;\n            case 'uppercase':\n                this.applyCommands({ subCommand: 'UpperCase', callBack: e.callBack });\n                e.event.preventDefault();\n                break;\n            case 'lowercase':\n                this.applyCommands({ subCommand: 'LowerCase', callBack: e.callBack });\n                e.event.preventDefault();\n                break;\n            case 'superscript':\n                this.applyCommands({ subCommand: 'SuperScript', callBack: e.callBack });\n                e.event.preventDefault();\n                break;\n            case 'subscript':\n                this.applyCommands({ subCommand: 'SubScript', callBack: e.callBack });\n                e.event.preventDefault();\n                break;\n        }\n    };\n    MDSelectionFormats.prototype.isBold = function (text, cmd) {\n        return text.search('\\\\' + cmd + '\\\\' + cmd + '') !== -1;\n    };\n    MDSelectionFormats.prototype.isItalic = function (text, cmd) {\n        return text.search('\\\\' + cmd) !== -1;\n    };\n    MDSelectionFormats.prototype.isMatch = function (text, cmd) {\n        var matchText = [''];\n        switch (cmd) {\n            case this.syntax.Italic:\n                matchText = text.match(this.singleCharRegx(cmd));\n                break;\n            case this.syntax.InlineCode:\n                matchText = text.match(this.singleCharRegx(cmd));\n                break;\n            case this.syntax.StrikeThrough:\n                matchText = text.match(this.singleCharRegx(cmd));\n                break;\n        }\n        return matchText;\n    };\n    MDSelectionFormats.prototype.multiCharRegx = function (cmd) {\n        return new RegExp('(\\\\' + cmd + '\\\\' + cmd + ')', 'g');\n    };\n    MDSelectionFormats.prototype.singleCharRegx = function (cmd) {\n        return new RegExp('(\\\\' + cmd + ')', 'g');\n    };\n    MDSelectionFormats.prototype.isAppliedCommand = function (cmd) {\n        // eslint-disable-next-line\n        var selectCmd = '';\n        var isFormat = false;\n        var textArea = this.parent.element;\n        var start = textArea.selectionStart;\n        var splitAt = function (index) { return function (x) { return [x.slice(0, index), x.slice(index)]; }; };\n        var splitText = splitAt(start)(textArea.value);\n        var cmdB = this.syntax.Bold.substr(0, 1);\n        var cmdI = this.syntax.Italic;\n        var selectedText = this.parent.markdownSelection.getSelectedText(textArea);\n        if (selectedText !== '' && selectedText === selectedText.toLocaleUpperCase() && cmd === 'UpperCase') {\n            return true;\n        }\n        else if (selectedText === '') {\n            var beforeText = textArea.value.substr(splitText[0].length - 1, 1);\n            var afterText = splitText[1].substr(0, 1);\n            if ((beforeText !== '' && afterText !== '' && beforeText.match(/[a-z]/i)) &&\n                beforeText === beforeText.toLocaleUpperCase() && afterText === afterText.toLocaleUpperCase() && cmd === 'UpperCase') {\n                return true;\n            }\n        }\n        if (!(this.isBold(splitText[0], cmdB)) && !(this.isItalic(splitText[0], cmdI)) && !(this.isBold(splitText[1], cmdB)) &&\n            !(this.isItalic(splitText[1], cmdI))) {\n            if ((!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.StrikeThrough)) &&\n                !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.StrikeThrough))) &&\n                (this.isMatch(splitText[0], this.syntax.StrikeThrough).length % 2 === 1 &&\n                    this.isMatch(splitText[1], this.syntax.StrikeThrough).length % 2 === 1) && cmd === 'StrikeThrough') {\n                isFormat = true;\n            }\n            if ((!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.InlineCode)) &&\n                !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.InlineCode))) &&\n                (this.isMatch(splitText[0], this.syntax.InlineCode).length % 2 === 1 &&\n                    this.isMatch(splitText[1], this.syntax.InlineCode).length % 2 === 1) && cmd === 'InlineCode') {\n                isFormat = true;\n            }\n            /* eslint-disable */\n            if ((!isNullOrUndefined(splitText[0].match(/\\<sub>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sub>/g))) &&\n                (splitText[0].match(/\\<sub>/g).length % 2 === 1 &&\n                    splitText[1].match(/\\<\\/sub>/g).length % 2 === 1) && cmd === 'SubScript') {\n                isFormat = true;\n            }\n            if ((!isNullOrUndefined(splitText[0].match(/\\<sup>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sup>/g))) &&\n                (splitText[0].match(/\\<sup>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sup>/g).length % 2 === 1) &&\n                cmd === 'SuperScript') {\n                isFormat = true;\n            }\n            /* eslint-enable */\n        }\n        if ((this.isBold(splitText[0], cmdB) && this.isBold(splitText[1], cmdB)) &&\n            (splitText[0].match(this.multiCharRegx(cmdB)).length % 2 === 1 &&\n                splitText[1].match(this.multiCharRegx(cmdB)).length % 2 === 1) && cmd === 'Bold') {\n            isFormat = true;\n        }\n        splitText[0] = this.isBold(splitText[0], cmdB) ? splitText[0].replace(this.multiCharRegx(cmdB), '$%@') : splitText[0];\n        splitText[1] = this.isBold(splitText[1], cmdB) ? splitText[1].replace(this.multiCharRegx(cmdB), '$%@') : splitText[1];\n        if ((!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.Italic)) &&\n            !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.Italic))) &&\n            (this.isMatch(splitText[0], this.syntax.Italic).length % 2 === 1 &&\n                this.isMatch(splitText[1], this.syntax.Italic).length % 2 === 1) && cmd === 'Italic') {\n            isFormat = true;\n        }\n        if ((!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.StrikeThrough)) &&\n            !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.StrikeThrough))) &&\n            (this.isMatch(splitText[0], this.syntax.StrikeThrough).length % 2 === 1 &&\n                this.isMatch(splitText[1], this.syntax.StrikeThrough).length % 2 === 1) && cmd === 'StrikeThrough') {\n            isFormat = true;\n        }\n        if ((!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.InlineCode)) &&\n            !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.InlineCode))) &&\n            (this.isMatch(splitText[0], this.syntax.InlineCode).length % 2 === 1 &&\n                this.isMatch(splitText[1], this.syntax.InlineCode).length % 2 === 1) && cmd === 'InlineCode') {\n            isFormat = true;\n        }\n        /* eslint-disable */\n        if ((!isNullOrUndefined(splitText[0].match(/\\<sub>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sub>/g))) &&\n            (splitText[0].match(/\\<sub>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sub>/g).length % 2 === 1) && cmd === 'SubScript') {\n            isFormat = true;\n        }\n        if ((!isNullOrUndefined(splitText[0].match(/\\<sup>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sup>/g))) &&\n            (splitText[0].match(/\\<sup>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sup>/g).length % 2 === 1) && cmd === 'SuperScript') {\n            isFormat = true;\n            /* eslint-enable */\n        }\n        return isFormat;\n    };\n    MDSelectionFormats.prototype.applyCommands = function (e) {\n        this.currentAction = e.subCommand;\n        var textArea = this.parent.element;\n        this.selection.save(textArea.selectionStart, textArea.selectionEnd);\n        var start = textArea.selectionStart;\n        var end = textArea.selectionEnd;\n        var addedLength = 0;\n        var selection = this.parent.markdownSelection.getSelectedInlinePoints(textArea);\n        if (this.isAppliedCommand(e.subCommand) && selection.text !== '') {\n            var startCmd = this.syntax[e.subCommand];\n            var endCmd = e.subCommand === 'SubScript' ? '</sub>' :\n                e.subCommand === 'SuperScript' ? '</sup>' : this.syntax[e.subCommand];\n            var startLength = (e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase') ? 0 : startCmd.length;\n            var startNo = textArea.value.substr(0, selection.start).lastIndexOf(startCmd);\n            var endNo = textArea.value.substr(selection.end, textArea.value.length).indexOf(endCmd);\n            endNo = endNo + selection.end;\n            var repStartText = this.replaceAt(textArea.value.substr(0, selection.start), startCmd, '', startNo, selection.start);\n            var repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), endCmd, '', 0, endNo);\n            textArea.value = repStartText + selection.text + repEndText;\n            this.restore(textArea, start - startLength, end - startLength, e);\n            return;\n        }\n        if (selection.text !== '' && !this.isApplied(selection, e.subCommand)) {\n            addedLength = (e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase') ? 0 :\n                this.syntax[e.subCommand].length;\n            var repStart = textArea.value.substr(selection.start - this.syntax[e.subCommand].length, this.syntax[e.subCommand].length);\n            var repEnd = void 0;\n            if ((repStart === e.subCommand) || ((selection.start - this.syntax[e.subCommand].length ===\n                textArea.value.indexOf(this.syntax[e.subCommand])) && (selection.end === textArea.value.lastIndexOf(this.syntax[e.subCommand]) || selection.end === textArea.value.lastIndexOf('</' + this.syntax[e.subCommand].substring(1, 5))))) {\n                if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {\n                    repEnd = textArea.value.substr(selection.end, this.syntax[e.subCommand].length + 1);\n                }\n                else {\n                    repEnd = textArea.value.substr(selection.end, this.syntax[e.subCommand].length);\n                }\n                var repStartText = this.replaceAt(textArea.value.substr(0, selection.start), repStart, '', selection.start - this.syntax[e.subCommand].length, selection.start);\n                var repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), repEnd, '', 0, repEnd.length);\n                textArea.value = repStartText + selection.text + repEndText;\n                this.restore(textArea, start - addedLength, end - addedLength, e);\n            }\n            else {\n                if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {\n                    selection.text = this.syntax[e.subCommand] + selection.text\n                        + '</' + this.syntax[e.subCommand].substring(1, 5);\n                }\n                else if (e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase') {\n                    selection.text = (e.subCommand === 'UpperCase') ? selection.text.toUpperCase()\n                        : selection.text.toLowerCase();\n                }\n                else {\n                    selection.text = this.syntax[e.subCommand] + selection.text + this.syntax[e.subCommand];\n                }\n                textArea.value = textArea.value.substr(0, selection.start) + selection.text +\n                    textArea.value.substr(selection.end, textArea.value.length);\n                this.restore(textArea, start + addedLength, end + addedLength, e);\n            }\n        }\n        else if (e.subCommand !== 'UpperCase' && e.subCommand !== 'LowerCase') {\n            if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {\n                selection.text = this.textReplace(selection.text, e.subCommand);\n                selection.text = this.syntax[e.subCommand] + selection.text\n                    + '</' + this.syntax[e.subCommand].substring(1, 5);\n            }\n            else {\n                selection.text = this.textReplace(selection.text, e.subCommand);\n                selection.text = this.syntax[e.subCommand] + selection.text + this.syntax[e.subCommand];\n            }\n            textArea.value = textArea.value.substr(0, selection.start)\n                + selection.text + textArea.value.substr(selection.end, textArea.value.length);\n            addedLength = this.syntax[e.subCommand].length;\n            if (selection.start === selection.end) {\n                this.restore(textArea, start + addedLength, end + addedLength, e);\n            }\n            else {\n                this.restore(textArea, start + addedLength, end - addedLength, e);\n            }\n        }\n        else {\n            this.restore(textArea, start, end, e);\n        }\n        this.parent.undoRedoManager.saveData();\n    };\n    MDSelectionFormats.prototype.replaceAt = function (input, search, replace, start, end) {\n        return input.slice(0, start)\n            + input.slice(start, end).replace(search, replace)\n            + input.slice(end);\n    };\n    MDSelectionFormats.prototype.restore = function (textArea, start, end, event) {\n        this.selection.save(start, end);\n        this.selection.restore(textArea);\n        if (event && event.callBack) {\n            event.callBack({\n                requestType: this.currentAction,\n                selectedText: this.selection.getSelectedText(textArea),\n                editorMode: 'Markdown',\n                event: event.event\n            });\n        }\n    };\n    MDSelectionFormats.prototype.textReplace = function (text, command) {\n        var regx = this.singleCharRegx(this.syntax[command]);\n        switch (command) {\n            case 'Bold':\n                regx = this.multiCharRegx(this.syntax[command].substr(0, 1));\n                text = text.replace(regx, '');\n                break;\n            case 'Italic':\n                if (!this.isBold(text, this.syntax[command].substr(0, 1))) {\n                    text = text.replace(regx, '');\n                }\n                else {\n                    var regxB = this.multiCharRegx(this.syntax[command].substr(0, 1));\n                    var repText = text;\n                    repText = repText.replace(regxB, '$%@').replace(regx, '');\n                    var regxTemp = new RegExp('\\\\$%@', 'g');\n                    text = repText.replace(regxTemp, this.syntax[command].substr(0, 1) + this.syntax[command].substr(0, 1));\n                }\n                break;\n            case 'StrikeThrough':\n                text = text.replace(regx, '');\n                break;\n            case 'InlineCode':\n                text = text.replace(regx, '');\n                break;\n            case 'SubScript':\n                text = text.replace(/<sub>/g, '').replace(/<\\/sub>/g, '');\n                break;\n            case 'SuperScript':\n                text = text.replace(/<sup>/g, '').replace(/<\\/sup>/g, '');\n                break;\n        }\n        return text;\n    };\n    MDSelectionFormats.prototype.isApplied = function (line, command) {\n        var regx = this.singleCharRegx(this.syntax[command]);\n        switch (command) {\n            case 'SubScript':\n            case 'SuperScript':\n                regx = this.singleCharRegx(this.syntax[command]);\n                return regx.test(line.text);\n            case 'Bold':\n            case 'StrikeThrough':\n                regx = this.multiCharRegx(this.syntax[command].substr(0, 1));\n                return regx.test(line.text);\n            case 'UpperCase':\n            case 'LowerCase':\n                regx = new RegExp('^[' + this.syntax[command] + ']*$', 'g');\n                return regx.test(line.text);\n            case 'Italic': {\n                var regTest = void 0;\n                var regxB = this.multiCharRegx(this.syntax[command].substr(0, 1));\n                if (regxB.test(line.text)) {\n                    var repText = line.text;\n                    repText = repText.replace(regxB, '$%#');\n                    regTest = regx.test(repText);\n                }\n                else {\n                    regTest = regx.test(line.text);\n                }\n                return regTest;\n            }\n            case 'InlineCode':\n                return regx.test(line.text);\n        }\n    };\n    return MDSelectionFormats;\n}());\nexport { MDSelectionFormats };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}