{"ast":null,"code":"import * as CONSTANT from './../base/constant';\nimport { InsertHtml } from './inserthtml';\n/**\n * Selection EXEC internal component\n *\n * @hidden\n\n */\n\nvar InsertHtmlExec =\n/** @class */\nfunction () {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {EditorManager} parent - sepcifies the parent element\n   * @hidden\n    */\n  function InsertHtmlExec(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  InsertHtmlExec.prototype.addEventListener = function () {\n    this.parent.observer.on(CONSTANT.INSERTHTML_TYPE, this.applyHtml, this);\n  };\n\n  InsertHtmlExec.prototype.applyHtml = function (e) {\n    InsertHtml.Insert(this.parent.currentDocument, e.value, this.parent.editableElement, true);\n\n    if (e.subCommand === 'pasteCleanup') {\n      var pastedElements = this.parent.editableElement.querySelectorAll('.pasteContent_RTE');\n      var allPastedElements = [].slice.call(pastedElements);\n      var imgElements = this.parent.editableElement.querySelectorAll('.pasteContent_Img');\n      var allImgElm = [].slice.call(imgElements);\n      e.callBack({\n        requestType: e.subCommand,\n        editorMode: 'HTML',\n        elements: allPastedElements,\n        imgElem: allImgElm\n      });\n    } else {\n      if (e.callBack) {\n        e.callBack({\n          requestType: e.subCommand,\n          editorMode: 'HTML',\n          event: e.event,\n          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n        });\n      }\n    }\n  };\n\n  return InsertHtmlExec;\n}();\n\nexport { InsertHtmlExec };","map":{"version":3,"names":["CONSTANT","InsertHtml","InsertHtmlExec","parent","addEventListener","prototype","observer","on","INSERTHTML_TYPE","applyHtml","e","Insert","currentDocument","value","editableElement","subCommand","pastedElements","querySelectorAll","allPastedElements","slice","call","imgElements","allImgElm","callBack","requestType","editorMode","elements","imgElem","event","range","nodeSelection","getRange","getSelectedNodes"],"sources":["C:/Users/shahj/OneDrive/Documents/GitHub/Multifunctional-React-Dashboard/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/inserthtml-exec.js"],"sourcesContent":["import * as CONSTANT from './../base/constant';\nimport { InsertHtml } from './inserthtml';\n/**\n * Selection EXEC internal component\n *\n * @hidden\n\n */\nvar InsertHtmlExec = /** @class */ (function () {\n    /**\n     * Constructor for creating the Formats plugin\n     *\n     * @param {EditorManager} parent - sepcifies the parent element\n     * @hidden\n\n     */\n    function InsertHtmlExec(parent) {\n        this.parent = parent;\n        this.addEventListener();\n    }\n    InsertHtmlExec.prototype.addEventListener = function () {\n        this.parent.observer.on(CONSTANT.INSERTHTML_TYPE, this.applyHtml, this);\n    };\n    InsertHtmlExec.prototype.applyHtml = function (e) {\n        InsertHtml.Insert(this.parent.currentDocument, e.value, this.parent.editableElement, true);\n        if (e.subCommand === 'pasteCleanup') {\n            var pastedElements = this.parent.editableElement.querySelectorAll('.pasteContent_RTE');\n            var allPastedElements = [].slice.call(pastedElements);\n            var imgElements = this.parent.editableElement.querySelectorAll('.pasteContent_Img');\n            var allImgElm = [].slice.call(imgElements);\n            e.callBack({\n                requestType: e.subCommand,\n                editorMode: 'HTML',\n                elements: allPastedElements,\n                imgElem: allImgElm\n            });\n        }\n        else {\n            if (e.callBack) {\n                e.callBack({\n                    requestType: e.subCommand,\n                    editorMode: 'HTML',\n                    event: e.event,\n                    range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n                    elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n                });\n            }\n        }\n    };\n    return InsertHtmlExec;\n}());\nexport { InsertHtmlExec };\n"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,oBAA1B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc;AAAG;AAAe,YAAY;EAC5C;AACJ;AACA;AACA;AACA;AACA;EAEI,SAASA,cAAT,CAAwBC,MAAxB,EAAgC;IAC5B,KAAKA,MAAL,GAAcA,MAAd;IACA,KAAKC,gBAAL;EACH;;EACDF,cAAc,CAACG,SAAf,CAAyBD,gBAAzB,GAA4C,YAAY;IACpD,KAAKD,MAAL,CAAYG,QAAZ,CAAqBC,EAArB,CAAwBP,QAAQ,CAACQ,eAAjC,EAAkD,KAAKC,SAAvD,EAAkE,IAAlE;EACH,CAFD;;EAGAP,cAAc,CAACG,SAAf,CAAyBI,SAAzB,GAAqC,UAAUC,CAAV,EAAa;IAC9CT,UAAU,CAACU,MAAX,CAAkB,KAAKR,MAAL,CAAYS,eAA9B,EAA+CF,CAAC,CAACG,KAAjD,EAAwD,KAAKV,MAAL,CAAYW,eAApE,EAAqF,IAArF;;IACA,IAAIJ,CAAC,CAACK,UAAF,KAAiB,cAArB,EAAqC;MACjC,IAAIC,cAAc,GAAG,KAAKb,MAAL,CAAYW,eAAZ,CAA4BG,gBAA5B,CAA6C,mBAA7C,CAArB;MACA,IAAIC,iBAAiB,GAAG,GAAGC,KAAH,CAASC,IAAT,CAAcJ,cAAd,CAAxB;MACA,IAAIK,WAAW,GAAG,KAAKlB,MAAL,CAAYW,eAAZ,CAA4BG,gBAA5B,CAA6C,mBAA7C,CAAlB;MACA,IAAIK,SAAS,GAAG,GAAGH,KAAH,CAASC,IAAT,CAAcC,WAAd,CAAhB;MACAX,CAAC,CAACa,QAAF,CAAW;QACPC,WAAW,EAAEd,CAAC,CAACK,UADR;QAEPU,UAAU,EAAE,MAFL;QAGPC,QAAQ,EAAER,iBAHH;QAIPS,OAAO,EAAEL;MAJF,CAAX;IAMH,CAXD,MAYK;MACD,IAAIZ,CAAC,CAACa,QAAN,EAAgB;QACZb,CAAC,CAACa,QAAF,CAAW;UACPC,WAAW,EAAEd,CAAC,CAACK,UADR;UAEPU,UAAU,EAAE,MAFL;UAGPG,KAAK,EAAElB,CAAC,CAACkB,KAHF;UAIPC,KAAK,EAAE,KAAK1B,MAAL,CAAY2B,aAAZ,CAA0BC,QAA1B,CAAmC,KAAK5B,MAAL,CAAYS,eAA/C,CAJA;UAKPc,QAAQ,EAAE,KAAKvB,MAAL,CAAY2B,aAAZ,CAA0BE,gBAA1B,CAA2C,KAAK7B,MAAL,CAAYS,eAAvD;QALH,CAAX;MAOH;IACJ;EACJ,CAzBD;;EA0BA,OAAOV,cAAP;AACH,CA1CmC,EAApC;;AA2CA,SAASA,cAAT"},"metadata":{},"sourceType":"module"}