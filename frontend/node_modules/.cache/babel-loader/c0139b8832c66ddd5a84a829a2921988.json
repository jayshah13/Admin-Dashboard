{"ast":null,"code":"import { merge } from '@syncfusion/ej2-base';\n/**\n * Row\n *\n * @hidden\n */\n\nvar Row =\n/** @class */\nfunction () {\n  function Row(options, parent) {\n    merge(this, options);\n    this.parent = parent;\n  }\n\n  Row.prototype.clone = function () {\n    var row = new Row({});\n    merge(row, this);\n    row.cells = this.cells.map(function (cell) {\n      return cell.clone();\n    });\n    return row;\n  };\n  /**\n   * Replaces the row data and grid refresh the particular row element only.\n   *\n   * @param  {Object} data - To update new data for the particular row.\n   * @returns {void}\n   */\n\n\n  Row.prototype.setRowValue = function (data) {\n    if (!this.parent) {\n      return;\n    }\n\n    var key = this.data[this.parent.getPrimaryKeyFieldNames()[0]];\n    this.parent.setRowData(key, data);\n  };\n  /**\n   * Replaces the given field value and refresh the particular cell element only.\n   *\n   * @param {string} field - Specifies the field name which you want to update.\n   * @param {string | number | boolean | Date} value - To update new value for the particular cell.\n   * @returns {void}\n   */\n\n\n  Row.prototype.setCellValue = function (field, value) {\n    if (!this.parent) {\n      return;\n    }\n\n    var isValDiff = !(this.data[field].toString() === value.toString());\n\n    if (isValDiff) {\n      var pKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n      var key = this.data[pKeyField];\n      this.parent.setCellValue(key, field, value);\n      this.makechanges(pKeyField, this.data);\n    } else {\n      return;\n    }\n  };\n\n  Row.prototype.makechanges = function (key, data) {\n    if (!this.parent) {\n      return;\n    }\n\n    var gObj = this.parent;\n    var dataManager = gObj.getDataModule().dataManager;\n    dataManager.update(key, data);\n  };\n\n  return Row;\n}();\n\nexport { Row };","map":{"version":3,"names":["merge","Row","options","parent","prototype","clone","row","cells","map","cell","setRowValue","data","key","getPrimaryKeyFieldNames","setRowData","setCellValue","field","value","isValDiff","toString","pKeyField","makechanges","gObj","dataManager","getDataModule","update"],"sources":["C:/Users/shahj/OneDrive/Documents/GitHub/Admin-Dashboard/frontend/node_modules/@syncfusion/ej2-grids/src/grid/models/row.js"],"sourcesContent":["import { merge } from '@syncfusion/ej2-base';\n/**\n * Row\n *\n * @hidden\n */\nvar Row = /** @class */ (function () {\n    function Row(options, parent) {\n        merge(this, options);\n        this.parent = parent;\n    }\n    Row.prototype.clone = function () {\n        var row = new Row({});\n        merge(row, this);\n        row.cells = this.cells.map(function (cell) { return cell.clone(); });\n        return row;\n    };\n    /**\n     * Replaces the row data and grid refresh the particular row element only.\n     *\n     * @param  {Object} data - To update new data for the particular row.\n     * @returns {void}\n     */\n    Row.prototype.setRowValue = function (data) {\n        if (!this.parent) {\n            return;\n        }\n        var key = this.data[this.parent.getPrimaryKeyFieldNames()[0]];\n        this.parent.setRowData(key, data);\n    };\n    /**\n     * Replaces the given field value and refresh the particular cell element only.\n     *\n     * @param {string} field - Specifies the field name which you want to update.\n     * @param {string | number | boolean | Date} value - To update new value for the particular cell.\n     * @returns {void}\n     */\n    Row.prototype.setCellValue = function (field, value) {\n        if (!this.parent) {\n            return;\n        }\n        var isValDiff = !(this.data[field].toString() === value.toString());\n        if (isValDiff) {\n            var pKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n            var key = this.data[pKeyField];\n            this.parent.setCellValue(key, field, value);\n            this.makechanges(pKeyField, this.data);\n        }\n        else {\n            return;\n        }\n    };\n    Row.prototype.makechanges = function (key, data) {\n        if (!this.parent) {\n            return;\n        }\n        var gObj = this.parent;\n        var dataManager = gObj.getDataModule().dataManager;\n        dataManager.update(key, data);\n    };\n    return Row;\n}());\nexport { Row };\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,sBAAtB;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,GAAG;AAAG;AAAe,YAAY;EACjC,SAASA,GAAT,CAAaC,OAAb,EAAsBC,MAAtB,EAA8B;IAC1BH,KAAK,CAAC,IAAD,EAAOE,OAAP,CAAL;IACA,KAAKC,MAAL,GAAcA,MAAd;EACH;;EACDF,GAAG,CAACG,SAAJ,CAAcC,KAAd,GAAsB,YAAY;IAC9B,IAAIC,GAAG,GAAG,IAAIL,GAAJ,CAAQ,EAAR,CAAV;IACAD,KAAK,CAACM,GAAD,EAAM,IAAN,CAAL;IACAA,GAAG,CAACC,KAAJ,GAAY,KAAKA,KAAL,CAAWC,GAAX,CAAe,UAAUC,IAAV,EAAgB;MAAE,OAAOA,IAAI,CAACJ,KAAL,EAAP;IAAsB,CAAvD,CAAZ;IACA,OAAOC,GAAP;EACH,CALD;EAMA;AACJ;AACA;AACA;AACA;AACA;;;EACIL,GAAG,CAACG,SAAJ,CAAcM,WAAd,GAA4B,UAAUC,IAAV,EAAgB;IACxC,IAAI,CAAC,KAAKR,MAAV,EAAkB;MACd;IACH;;IACD,IAAIS,GAAG,GAAG,KAAKD,IAAL,CAAU,KAAKR,MAAL,CAAYU,uBAAZ,GAAsC,CAAtC,CAAV,CAAV;IACA,KAAKV,MAAL,CAAYW,UAAZ,CAAuBF,GAAvB,EAA4BD,IAA5B;EACH,CAND;EAOA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIV,GAAG,CAACG,SAAJ,CAAcW,YAAd,GAA6B,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;IACjD,IAAI,CAAC,KAAKd,MAAV,EAAkB;MACd;IACH;;IACD,IAAIe,SAAS,GAAG,EAAE,KAAKP,IAAL,CAAUK,KAAV,EAAiBG,QAAjB,OAAgCF,KAAK,CAACE,QAAN,EAAlC,CAAhB;;IACA,IAAID,SAAJ,EAAe;MACX,IAAIE,SAAS,GAAG,KAAKjB,MAAL,CAAYU,uBAAZ,GAAsC,CAAtC,CAAhB;MACA,IAAID,GAAG,GAAG,KAAKD,IAAL,CAAUS,SAAV,CAAV;MACA,KAAKjB,MAAL,CAAYY,YAAZ,CAAyBH,GAAzB,EAA8BI,KAA9B,EAAqCC,KAArC;MACA,KAAKI,WAAL,CAAiBD,SAAjB,EAA4B,KAAKT,IAAjC;IACH,CALD,MAMK;MACD;IACH;EACJ,CAdD;;EAeAV,GAAG,CAACG,SAAJ,CAAciB,WAAd,GAA4B,UAAUT,GAAV,EAAeD,IAAf,EAAqB;IAC7C,IAAI,CAAC,KAAKR,MAAV,EAAkB;MACd;IACH;;IACD,IAAImB,IAAI,GAAG,KAAKnB,MAAhB;IACA,IAAIoB,WAAW,GAAGD,IAAI,CAACE,aAAL,GAAqBD,WAAvC;IACAA,WAAW,CAACE,MAAZ,CAAmBb,GAAnB,EAAwBD,IAAxB;EACH,CAPD;;EAQA,OAAOV,GAAP;AACH,CAvDwB,EAAzB;;AAwDA,SAASA,GAAT"},"metadata":{},"sourceType":"module"}