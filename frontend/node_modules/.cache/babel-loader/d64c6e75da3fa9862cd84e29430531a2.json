{"ast":null,"code":"import { NodeSelection } from './../../selection/index';\nimport { isNullOrUndefined as isNOU } from '@syncfusion/ej2-base';\nimport { InsertMethods } from './insert-methods';\n/**\n * Split the Node based on selection\n *\n * @hidden\n\n */\n\nvar NodeCutter =\n/** @class */\nfunction () {\n  function NodeCutter() {\n    this.enterAction = 'P';\n    this.position = -1;\n    this.nodeSelection = new NodeSelection();\n  } // Split Selection Node\n\n  /**\n   * GetSpliceNode method\n   *\n   * @param {Range} range - specifies the range\n   * @param {HTMLElement} node - specifies the node element.\n   * @returns {Node} - returns the node value\n   * @hidden\n    */\n\n\n  NodeCutter.prototype.GetSpliceNode = function (range, node) {\n    node = this.SplitNode(range, node, true);\n    node = this.SplitNode(range, node, false);\n    return node;\n  };\n  /**\n   * @param {Range} range - specifies the range\n   * @param {HTMLElement} node - specifies the node element.\n   * @param {boolean} isCollapsed - specifies the boolean value\n   * @returns {HTMLElement} - returns the element\n   * @hidden\n    */\n\n\n  NodeCutter.prototype.SplitNode = function (range, node, isCollapsed) {\n    if (node) {\n      var clone = range.cloneRange();\n      var parent_1 = node.parentNode;\n      var index = this.nodeSelection.getIndex(node);\n      clone.collapse(isCollapsed); // eslint-disable-next-line\n\n      isCollapsed ? clone.setStartBefore(node) : clone.setEndAfter(node);\n      var fragment = clone.extractContents();\n\n      if (isCollapsed) {\n        node = parent_1.childNodes[index];\n        fragment = this.spliceEmptyNode(fragment, false);\n\n        if (fragment && fragment.childNodes.length > 0) {\n          var isEmpty = fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== 'IMG' && this.isImgElm(fragment) && fragment.textContent === '' ? true : false;\n\n          if (!isEmpty) {\n            if (node) {\n              InsertMethods.AppendBefore(fragment, node);\n            } else {\n              parent_1.appendChild(fragment);\n              var divNode = document.createElement('div');\n              divNode.innerHTML = '&#65279;&#65279;';\n              node = divNode.firstChild;\n              parent_1.appendChild(node);\n            }\n          }\n        }\n      } else {\n        node = parent_1.childNodes.length > 1 ? parent_1.childNodes[index] : parent_1.childNodes[0];\n        fragment = this.spliceEmptyNode(fragment, true);\n\n        if (fragment && fragment.childNodes.length > 0) {\n          var isEmpty = fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== 'IMG' && this.isImgElm(fragment) && fragment.textContent.trim() === '' ? true : false;\n\n          if (!isEmpty) {\n            if (node) {\n              InsertMethods.AppendBefore(fragment, node, true);\n            } else {\n              parent_1.appendChild(fragment);\n              var divNode = document.createElement('div');\n              divNode.innerHTML = '&#65279;&#65279;';\n              parent_1.insertBefore(divNode.firstChild, parent_1.firstChild);\n              node = parent_1.firstChild;\n            }\n          }\n        }\n      }\n\n      return node;\n    } else {\n      return null;\n    }\n  };\n\n  NodeCutter.prototype.isImgElm = function (fragment) {\n    var result = true;\n\n    if (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== 'IMG') {\n      var firstChild = fragment.childNodes[0];\n\n      for (var i = 0; !isNOU(firstChild.childNodes) && i < firstChild.childNodes.length; i++) {\n        if (firstChild.childNodes[i].nodeName === 'IMG') {\n          result = false;\n        }\n      }\n    } else {\n      result = true;\n    }\n\n    return result;\n  };\n\n  NodeCutter.prototype.spliceEmptyNode = function (fragment, isStart) {\n    var len;\n\n    if (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName === '#text' && fragment.childNodes[0].textContent === '' || fragment.textContent === '') {\n      len = -1;\n    } else {\n      len = fragment.childNodes.length - 1;\n    }\n\n    if (len > -1 && !isStart) {\n      this.spliceEmptyNode(fragment.childNodes[len], isStart);\n    } else if (len > -1) {\n      this.spliceEmptyNode(fragment.childNodes[0], isStart);\n    } else if (fragment.nodeType !== 3 && fragment.nodeType !== 11) {\n      fragment.parentNode.removeChild(fragment);\n    }\n\n    return fragment;\n  }; // Cursor Position split\n\n\n  NodeCutter.prototype.GetCursorStart = function (indexes, index, isStart) {\n    indexes = isStart ? indexes : indexes.reverse();\n    var position = indexes[0];\n\n    for (var num = 0; num < indexes.length && (isStart ? indexes[num] < index : indexes[num] >= index); num++) {\n      position = indexes[num];\n    }\n\n    return position;\n  };\n  /**\n   * GetCursorRange method\n   *\n   * @param {Document} docElement - specifies the document\n   * @param {Range} range - specifies the range\n   * @param {Node} node - specifies the node.\n   * @returns {Range} - returns the range value\n   * @hidden\n    */\n\n\n  NodeCutter.prototype.GetCursorRange = function (docElement, range, node) {\n    var cursorRange = docElement.createRange();\n    var indexes = [];\n    indexes.push(0);\n    var str = this.TrimLineBreak(node.data);\n    var index = str.indexOf(' ', 0);\n\n    while (index !== -1) {\n      if (indexes.indexOf(index) < 0) {\n        indexes.push(index);\n      }\n\n      if (new RegExp('\\\\s').test(str[index - 1]) && indexes.indexOf(index - 1) < 0) {\n        indexes.push(index - 1);\n      }\n\n      if (new RegExp('\\\\s').test(str[index + 1])) {\n        indexes.push(index + 1);\n      }\n\n      index = str.indexOf(' ', index + 1);\n    }\n\n    indexes.push(str.length);\n\n    if (indexes.indexOf(range.startOffset) >= 0 || indexes.indexOf(range.startOffset - 1) >= 0 && (range.startOffset !== 1 || range.startOffset === 1 && new RegExp('\\\\s').test(str[0])) || indexes[indexes.length - 1] - 1 === range.startOffset) {\n      cursorRange = range;\n      this.position = 1;\n    } else {\n      var startOffset = this.GetCursorStart(indexes, range.startOffset, true);\n      this.position = range.startOffset - startOffset;\n      cursorRange.setStart(range.startContainer, startOffset);\n      cursorRange.setEnd(range.startContainer, this.GetCursorStart(indexes, range.startOffset, false));\n    }\n\n    return cursorRange;\n  };\n  /**\n   * GetCursorNode method\n   *\n   * @param {Document} docElement - specifies the document\n   * @param {Range} range - specifies the range\n   * @param {Node} node - specifies the node.\n   * @returns {Node} - returns the node value\n   * @hidden\n    */\n\n\n  NodeCutter.prototype.GetCursorNode = function (docElement, range, node) {\n    return this.GetSpliceNode(this.GetCursorRange(docElement, range, node), node);\n  };\n  /**\n   * TrimLineBreak method\n   *\n   * @param {string} line - specifies the string value.\n   * @returns {string} - returns the string\n   * @hidden\n    */\n\n\n  NodeCutter.prototype.TrimLineBreak = function (line) {\n    return line.replace(/(\\r\\n\\t|\\n|\\r\\t)/gm, ' ');\n  };\n\n  return NodeCutter;\n}();\n\nexport { NodeCutter };","map":{"version":3,"names":["NodeSelection","isNullOrUndefined","isNOU","InsertMethods","NodeCutter","enterAction","position","nodeSelection","prototype","GetSpliceNode","range","node","SplitNode","isCollapsed","clone","cloneRange","parent_1","parentNode","index","getIndex","collapse","setStartBefore","setEndAfter","fragment","extractContents","childNodes","spliceEmptyNode","length","isEmpty","nodeName","isImgElm","textContent","AppendBefore","appendChild","divNode","document","createElement","innerHTML","firstChild","trim","insertBefore","result","i","isStart","len","nodeType","removeChild","GetCursorStart","indexes","reverse","num","GetCursorRange","docElement","cursorRange","createRange","push","str","TrimLineBreak","data","indexOf","RegExp","test","startOffset","setStart","startContainer","setEnd","GetCursorNode","line","replace"],"sources":["C:/Users/shahj/OneDrive/Documents/GitHub/Multifunctional-React-Dashboard/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/nodecutter.js"],"sourcesContent":["import { NodeSelection } from './../../selection/index';\nimport { isNullOrUndefined as isNOU } from '@syncfusion/ej2-base';\nimport { InsertMethods } from './insert-methods';\n/**\n * Split the Node based on selection\n *\n * @hidden\n\n */\nvar NodeCutter = /** @class */ (function () {\n    function NodeCutter() {\n        this.enterAction = 'P';\n        this.position = -1;\n        this.nodeSelection = new NodeSelection();\n    }\n    // Split Selection Node\n    /**\n     * GetSpliceNode method\n     *\n     * @param {Range} range - specifies the range\n     * @param {HTMLElement} node - specifies the node element.\n     * @returns {Node} - returns the node value\n     * @hidden\n\n     */\n    NodeCutter.prototype.GetSpliceNode = function (range, node) {\n        node = this.SplitNode(range, node, true);\n        node = this.SplitNode(range, node, false);\n        return node;\n    };\n    /**\n     * @param {Range} range - specifies the range\n     * @param {HTMLElement} node - specifies the node element.\n     * @param {boolean} isCollapsed - specifies the boolean value\n     * @returns {HTMLElement} - returns the element\n     * @hidden\n\n     */\n    NodeCutter.prototype.SplitNode = function (range, node, isCollapsed) {\n        if (node) {\n            var clone = range.cloneRange();\n            var parent_1 = node.parentNode;\n            var index = this.nodeSelection.getIndex(node);\n            clone.collapse(isCollapsed);\n            // eslint-disable-next-line\n            (isCollapsed) ? clone.setStartBefore(node) : clone.setEndAfter(node);\n            var fragment = clone.extractContents();\n            if (isCollapsed) {\n                node = parent_1.childNodes[index];\n                fragment = this.spliceEmptyNode(fragment, false);\n                if (fragment && fragment.childNodes.length > 0) {\n                    var isEmpty = (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== 'IMG'\n                        && this.isImgElm(fragment) && fragment.textContent === '') ? true : false;\n                    if (!isEmpty) {\n                        if (node) {\n                            InsertMethods.AppendBefore(fragment, node);\n                        }\n                        else {\n                            parent_1.appendChild(fragment);\n                            var divNode = document.createElement('div');\n                            divNode.innerHTML = '&#65279;&#65279;';\n                            node = divNode.firstChild;\n                            parent_1.appendChild(node);\n                        }\n                    }\n                }\n            }\n            else {\n                node = parent_1.childNodes.length > 1 ? parent_1.childNodes[index] :\n                    parent_1.childNodes[0];\n                fragment = this.spliceEmptyNode(fragment, true);\n                if (fragment && fragment.childNodes.length > 0) {\n                    var isEmpty = (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== 'IMG'\n                        && this.isImgElm(fragment) && fragment.textContent.trim() === '') ? true : false;\n                    if (!isEmpty) {\n                        if (node) {\n                            InsertMethods.AppendBefore(fragment, node, true);\n                        }\n                        else {\n                            parent_1.appendChild(fragment);\n                            var divNode = document.createElement('div');\n                            divNode.innerHTML = '&#65279;&#65279;';\n                            parent_1.insertBefore(divNode.firstChild, parent_1.firstChild);\n                            node = parent_1.firstChild;\n                        }\n                    }\n                }\n            }\n            return node;\n        }\n        else {\n            return null;\n        }\n    };\n    NodeCutter.prototype.isImgElm = function (fragment) {\n        var result = true;\n        if (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== 'IMG') {\n            var firstChild = fragment.childNodes[0];\n            for (var i = 0; !isNOU(firstChild.childNodes) && i < firstChild.childNodes.length; i++) {\n                if (firstChild.childNodes[i].nodeName === 'IMG') {\n                    result = false;\n                }\n            }\n        }\n        else {\n            result = true;\n        }\n        return result;\n    };\n    NodeCutter.prototype.spliceEmptyNode = function (fragment, isStart) {\n        var len;\n        if (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName === '#text' &&\n            fragment.childNodes[0].textContent === '' || fragment.textContent === '') {\n            len = -1;\n        }\n        else {\n            len = fragment.childNodes.length - 1;\n        }\n        if (len > -1 && !isStart) {\n            this.spliceEmptyNode(fragment.childNodes[len], isStart);\n        }\n        else if (len > -1) {\n            this.spliceEmptyNode(fragment.childNodes[0], isStart);\n        }\n        else if (fragment.nodeType !== 3 && fragment.nodeType !== 11) {\n            fragment.parentNode.removeChild(fragment);\n        }\n        return fragment;\n    };\n    // Cursor Position split\n    NodeCutter.prototype.GetCursorStart = function (indexes, index, isStart) {\n        indexes = (isStart) ? indexes : indexes.reverse();\n        var position = indexes[0];\n        for (var num = 0; num < indexes.length && ((isStart) ? (indexes[num] < index) : (indexes[num] >= index)); num++) {\n            position = indexes[num];\n        }\n        return position;\n    };\n    /**\n     * GetCursorRange method\n     *\n     * @param {Document} docElement - specifies the document\n     * @param {Range} range - specifies the range\n     * @param {Node} node - specifies the node.\n     * @returns {Range} - returns the range value\n     * @hidden\n\n     */\n    NodeCutter.prototype.GetCursorRange = function (docElement, range, node) {\n        var cursorRange = docElement.createRange();\n        var indexes = [];\n        indexes.push(0);\n        var str = this.TrimLineBreak(node.data);\n        var index = str.indexOf(' ', 0);\n        while (index !== -1) {\n            if (indexes.indexOf(index) < 0) {\n                indexes.push(index);\n            }\n            if (new RegExp('\\\\s').test(str[index - 1]) && (indexes.indexOf(index - 1) < 0)) {\n                indexes.push(index - 1);\n            }\n            if (new RegExp('\\\\s').test(str[index + 1])) {\n                indexes.push(index + 1);\n            }\n            index = str.indexOf(' ', (index + 1));\n        }\n        indexes.push(str.length);\n        if ((indexes.indexOf(range.startOffset) >= 0)\n            || ((indexes.indexOf(range.startOffset - 1) >= 0) && (range.startOffset !== 1\n                || (range.startOffset === 1 && new RegExp('\\\\s').test(str[0])))\n                || ((indexes[indexes.length - 1] - 1) === range.startOffset))) {\n            cursorRange = range;\n            this.position = 1;\n        }\n        else {\n            var startOffset = this.GetCursorStart(indexes, range.startOffset, true);\n            this.position = range.startOffset - startOffset;\n            cursorRange.setStart(range.startContainer, startOffset);\n            cursorRange.setEnd(range.startContainer, this.GetCursorStart(indexes, range.startOffset, false));\n        }\n        return cursorRange;\n    };\n    /**\n     * GetCursorNode method\n     *\n     * @param {Document} docElement - specifies the document\n     * @param {Range} range - specifies the range\n     * @param {Node} node - specifies the node.\n     * @returns {Node} - returns the node value\n     * @hidden\n\n     */\n    NodeCutter.prototype.GetCursorNode = function (docElement, range, node) {\n        return this.GetSpliceNode(this.GetCursorRange(docElement, range, node), node);\n    };\n    /**\n     * TrimLineBreak method\n     *\n     * @param {string} line - specifies the string value.\n     * @returns {string} - returns the string\n     * @hidden\n\n     */\n    NodeCutter.prototype.TrimLineBreak = function (line) {\n        return line.replace(/(\\r\\n\\t|\\n|\\r\\t)/gm, ' ');\n    };\n    return NodeCutter;\n}());\nexport { NodeCutter };\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,yBAA9B;AACA,SAASC,iBAAiB,IAAIC,KAA9B,QAA2C,sBAA3C;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU;AAAG;AAAe,YAAY;EACxC,SAASA,UAAT,GAAsB;IAClB,KAAKC,WAAL,GAAmB,GAAnB;IACA,KAAKC,QAAL,GAAgB,CAAC,CAAjB;IACA,KAAKC,aAAL,GAAqB,IAAIP,aAAJ,EAArB;EACH,CALuC,CAMxC;;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EAEII,UAAU,CAACI,SAAX,CAAqBC,aAArB,GAAqC,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;IACxDA,IAAI,GAAG,KAAKC,SAAL,CAAeF,KAAf,EAAsBC,IAAtB,EAA4B,IAA5B,CAAP;IACAA,IAAI,GAAG,KAAKC,SAAL,CAAeF,KAAf,EAAsBC,IAAtB,EAA4B,KAA5B,CAAP;IACA,OAAOA,IAAP;EACH,CAJD;EAKA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EAEIP,UAAU,CAACI,SAAX,CAAqBI,SAArB,GAAiC,UAAUF,KAAV,EAAiBC,IAAjB,EAAuBE,WAAvB,EAAoC;IACjE,IAAIF,IAAJ,EAAU;MACN,IAAIG,KAAK,GAAGJ,KAAK,CAACK,UAAN,EAAZ;MACA,IAAIC,QAAQ,GAAGL,IAAI,CAACM,UAApB;MACA,IAAIC,KAAK,GAAG,KAAKX,aAAL,CAAmBY,QAAnB,CAA4BR,IAA5B,CAAZ;MACAG,KAAK,CAACM,QAAN,CAAeP,WAAf,EAJM,CAKN;;MACCA,WAAD,GAAgBC,KAAK,CAACO,cAAN,CAAqBV,IAArB,CAAhB,GAA6CG,KAAK,CAACQ,WAAN,CAAkBX,IAAlB,CAA7C;MACA,IAAIY,QAAQ,GAAGT,KAAK,CAACU,eAAN,EAAf;;MACA,IAAIX,WAAJ,EAAiB;QACbF,IAAI,GAAGK,QAAQ,CAACS,UAAT,CAAoBP,KAApB,CAAP;QACAK,QAAQ,GAAG,KAAKG,eAAL,CAAqBH,QAArB,EAA+B,KAA/B,CAAX;;QACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACE,UAAT,CAAoBE,MAApB,GAA6B,CAA7C,EAAgD;UAC5C,IAAIC,OAAO,GAAIL,QAAQ,CAACE,UAAT,CAAoBE,MAApB,KAA+B,CAA/B,IAAoCJ,QAAQ,CAACE,UAAT,CAAoB,CAApB,EAAuBI,QAAvB,KAAoC,KAAxE,IACR,KAAKC,QAAL,CAAcP,QAAd,CADQ,IACmBA,QAAQ,CAACQ,WAAT,KAAyB,EAD7C,GACmD,IADnD,GAC0D,KADxE;;UAEA,IAAI,CAACH,OAAL,EAAc;YACV,IAAIjB,IAAJ,EAAU;cACNR,aAAa,CAAC6B,YAAd,CAA2BT,QAA3B,EAAqCZ,IAArC;YACH,CAFD,MAGK;cACDK,QAAQ,CAACiB,WAAT,CAAqBV,QAArB;cACA,IAAIW,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;cACAF,OAAO,CAACG,SAAR,GAAoB,kBAApB;cACA1B,IAAI,GAAGuB,OAAO,CAACI,UAAf;cACAtB,QAAQ,CAACiB,WAAT,CAAqBtB,IAArB;YACH;UACJ;QACJ;MACJ,CAnBD,MAoBK;QACDA,IAAI,GAAGK,QAAQ,CAACS,UAAT,CAAoBE,MAApB,GAA6B,CAA7B,GAAiCX,QAAQ,CAACS,UAAT,CAAoBP,KAApB,CAAjC,GACHF,QAAQ,CAACS,UAAT,CAAoB,CAApB,CADJ;QAEAF,QAAQ,GAAG,KAAKG,eAAL,CAAqBH,QAArB,EAA+B,IAA/B,CAAX;;QACA,IAAIA,QAAQ,IAAIA,QAAQ,CAACE,UAAT,CAAoBE,MAApB,GAA6B,CAA7C,EAAgD;UAC5C,IAAIC,OAAO,GAAIL,QAAQ,CAACE,UAAT,CAAoBE,MAApB,KAA+B,CAA/B,IAAoCJ,QAAQ,CAACE,UAAT,CAAoB,CAApB,EAAuBI,QAAvB,KAAoC,KAAxE,IACR,KAAKC,QAAL,CAAcP,QAAd,CADQ,IACmBA,QAAQ,CAACQ,WAAT,CAAqBQ,IAArB,OAAgC,EADpD,GAC0D,IAD1D,GACiE,KAD/E;;UAEA,IAAI,CAACX,OAAL,EAAc;YACV,IAAIjB,IAAJ,EAAU;cACNR,aAAa,CAAC6B,YAAd,CAA2BT,QAA3B,EAAqCZ,IAArC,EAA2C,IAA3C;YACH,CAFD,MAGK;cACDK,QAAQ,CAACiB,WAAT,CAAqBV,QAArB;cACA,IAAIW,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;cACAF,OAAO,CAACG,SAAR,GAAoB,kBAApB;cACArB,QAAQ,CAACwB,YAAT,CAAsBN,OAAO,CAACI,UAA9B,EAA0CtB,QAAQ,CAACsB,UAAnD;cACA3B,IAAI,GAAGK,QAAQ,CAACsB,UAAhB;YACH;UACJ;QACJ;MACJ;;MACD,OAAO3B,IAAP;IACH,CAlDD,MAmDK;MACD,OAAO,IAAP;IACH;EACJ,CAvDD;;EAwDAP,UAAU,CAACI,SAAX,CAAqBsB,QAArB,GAAgC,UAAUP,QAAV,EAAoB;IAChD,IAAIkB,MAAM,GAAG,IAAb;;IACA,IAAIlB,QAAQ,CAACE,UAAT,CAAoBE,MAApB,KAA+B,CAA/B,IAAoCJ,QAAQ,CAACE,UAAT,CAAoB,CAApB,EAAuBI,QAAvB,KAAoC,KAA5E,EAAmF;MAC/E,IAAIS,UAAU,GAAGf,QAAQ,CAACE,UAAT,CAAoB,CAApB,CAAjB;;MACA,KAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgB,CAACxC,KAAK,CAACoC,UAAU,CAACb,UAAZ,CAAN,IAAiCiB,CAAC,GAAGJ,UAAU,CAACb,UAAX,CAAsBE,MAA3E,EAAmFe,CAAC,EAApF,EAAwF;QACpF,IAAIJ,UAAU,CAACb,UAAX,CAAsBiB,CAAtB,EAAyBb,QAAzB,KAAsC,KAA1C,EAAiD;UAC7CY,MAAM,GAAG,KAAT;QACH;MACJ;IACJ,CAPD,MAQK;MACDA,MAAM,GAAG,IAAT;IACH;;IACD,OAAOA,MAAP;EACH,CAdD;;EAeArC,UAAU,CAACI,SAAX,CAAqBkB,eAArB,GAAuC,UAAUH,QAAV,EAAoBoB,OAApB,EAA6B;IAChE,IAAIC,GAAJ;;IACA,IAAIrB,QAAQ,CAACE,UAAT,CAAoBE,MAApB,KAA+B,CAA/B,IAAoCJ,QAAQ,CAACE,UAAT,CAAoB,CAApB,EAAuBI,QAAvB,KAAoC,OAAxE,IACAN,QAAQ,CAACE,UAAT,CAAoB,CAApB,EAAuBM,WAAvB,KAAuC,EADvC,IAC6CR,QAAQ,CAACQ,WAAT,KAAyB,EAD1E,EAC8E;MAC1Ea,GAAG,GAAG,CAAC,CAAP;IACH,CAHD,MAIK;MACDA,GAAG,GAAGrB,QAAQ,CAACE,UAAT,CAAoBE,MAApB,GAA6B,CAAnC;IACH;;IACD,IAAIiB,GAAG,GAAG,CAAC,CAAP,IAAY,CAACD,OAAjB,EAA0B;MACtB,KAAKjB,eAAL,CAAqBH,QAAQ,CAACE,UAAT,CAAoBmB,GAApB,CAArB,EAA+CD,OAA/C;IACH,CAFD,MAGK,IAAIC,GAAG,GAAG,CAAC,CAAX,EAAc;MACf,KAAKlB,eAAL,CAAqBH,QAAQ,CAACE,UAAT,CAAoB,CAApB,CAArB,EAA6CkB,OAA7C;IACH,CAFI,MAGA,IAAIpB,QAAQ,CAACsB,QAAT,KAAsB,CAAtB,IAA2BtB,QAAQ,CAACsB,QAAT,KAAsB,EAArD,EAAyD;MAC1DtB,QAAQ,CAACN,UAAT,CAAoB6B,WAApB,CAAgCvB,QAAhC;IACH;;IACD,OAAOA,QAAP;EACH,CAnBD,CApGwC,CAwHxC;;;EACAnB,UAAU,CAACI,SAAX,CAAqBuC,cAArB,GAAsC,UAAUC,OAAV,EAAmB9B,KAAnB,EAA0ByB,OAA1B,EAAmC;IACrEK,OAAO,GAAIL,OAAD,GAAYK,OAAZ,GAAsBA,OAAO,CAACC,OAAR,EAAhC;IACA,IAAI3C,QAAQ,GAAG0C,OAAO,CAAC,CAAD,CAAtB;;IACA,KAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,OAAO,CAACrB,MAAd,KAA0BgB,OAAD,GAAaK,OAAO,CAACE,GAAD,CAAP,GAAehC,KAA5B,GAAsC8B,OAAO,CAACE,GAAD,CAAP,IAAgBhC,KAA/E,CAAlB,EAA0GgC,GAAG,EAA7G,EAAiH;MAC7G5C,QAAQ,GAAG0C,OAAO,CAACE,GAAD,CAAlB;IACH;;IACD,OAAO5C,QAAP;EACH,CAPD;EAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAEIF,UAAU,CAACI,SAAX,CAAqB2C,cAArB,GAAsC,UAAUC,UAAV,EAAsB1C,KAAtB,EAA6BC,IAA7B,EAAmC;IACrE,IAAI0C,WAAW,GAAGD,UAAU,CAACE,WAAX,EAAlB;IACA,IAAIN,OAAO,GAAG,EAAd;IACAA,OAAO,CAACO,IAAR,CAAa,CAAb;IACA,IAAIC,GAAG,GAAG,KAAKC,aAAL,CAAmB9C,IAAI,CAAC+C,IAAxB,CAAV;IACA,IAAIxC,KAAK,GAAGsC,GAAG,CAACG,OAAJ,CAAY,GAAZ,EAAiB,CAAjB,CAAZ;;IACA,OAAOzC,KAAK,KAAK,CAAC,CAAlB,EAAqB;MACjB,IAAI8B,OAAO,CAACW,OAAR,CAAgBzC,KAAhB,IAAyB,CAA7B,EAAgC;QAC5B8B,OAAO,CAACO,IAAR,CAAarC,KAAb;MACH;;MACD,IAAI,IAAI0C,MAAJ,CAAW,KAAX,EAAkBC,IAAlB,CAAuBL,GAAG,CAACtC,KAAK,GAAG,CAAT,CAA1B,KAA2C8B,OAAO,CAACW,OAAR,CAAgBzC,KAAK,GAAG,CAAxB,IAA6B,CAA5E,EAAgF;QAC5E8B,OAAO,CAACO,IAAR,CAAarC,KAAK,GAAG,CAArB;MACH;;MACD,IAAI,IAAI0C,MAAJ,CAAW,KAAX,EAAkBC,IAAlB,CAAuBL,GAAG,CAACtC,KAAK,GAAG,CAAT,CAA1B,CAAJ,EAA4C;QACxC8B,OAAO,CAACO,IAAR,CAAarC,KAAK,GAAG,CAArB;MACH;;MACDA,KAAK,GAAGsC,GAAG,CAACG,OAAJ,CAAY,GAAZ,EAAkBzC,KAAK,GAAG,CAA1B,CAAR;IACH;;IACD8B,OAAO,CAACO,IAAR,CAAaC,GAAG,CAAC7B,MAAjB;;IACA,IAAKqB,OAAO,CAACW,OAAR,CAAgBjD,KAAK,CAACoD,WAAtB,KAAsC,CAAvC,IACKd,OAAO,CAACW,OAAR,CAAgBjD,KAAK,CAACoD,WAAN,GAAoB,CAApC,KAA0C,CAA3C,KAAkDpD,KAAK,CAACoD,WAAN,KAAsB,CAAtB,IAC9CpD,KAAK,CAACoD,WAAN,KAAsB,CAAtB,IAA2B,IAAIF,MAAJ,CAAW,KAAX,EAAkBC,IAAlB,CAAuBL,GAAG,CAAC,CAAD,CAA1B,CAD/B,KAEKR,OAAO,CAACA,OAAO,CAACrB,MAAR,GAAiB,CAAlB,CAAP,GAA8B,CAA/B,KAAsCjB,KAAK,CAACoD,WAHxD,EAGuE;MACnET,WAAW,GAAG3C,KAAd;MACA,KAAKJ,QAAL,GAAgB,CAAhB;IACH,CAND,MAOK;MACD,IAAIwD,WAAW,GAAG,KAAKf,cAAL,CAAoBC,OAApB,EAA6BtC,KAAK,CAACoD,WAAnC,EAAgD,IAAhD,CAAlB;MACA,KAAKxD,QAAL,GAAgBI,KAAK,CAACoD,WAAN,GAAoBA,WAApC;MACAT,WAAW,CAACU,QAAZ,CAAqBrD,KAAK,CAACsD,cAA3B,EAA2CF,WAA3C;MACAT,WAAW,CAACY,MAAZ,CAAmBvD,KAAK,CAACsD,cAAzB,EAAyC,KAAKjB,cAAL,CAAoBC,OAApB,EAA6BtC,KAAK,CAACoD,WAAnC,EAAgD,KAAhD,CAAzC;IACH;;IACD,OAAOT,WAAP;EACH,CAjCD;EAkCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAEIjD,UAAU,CAACI,SAAX,CAAqB0D,aAArB,GAAqC,UAAUd,UAAV,EAAsB1C,KAAtB,EAA6BC,IAA7B,EAAmC;IACpE,OAAO,KAAKF,aAAL,CAAmB,KAAK0C,cAAL,CAAoBC,UAApB,EAAgC1C,KAAhC,EAAuCC,IAAvC,CAAnB,EAAiEA,IAAjE,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EAEIP,UAAU,CAACI,SAAX,CAAqBiD,aAArB,GAAqC,UAAUU,IAAV,EAAgB;IACjD,OAAOA,IAAI,CAACC,OAAL,CAAa,oBAAb,EAAmC,GAAnC,CAAP;EACH,CAFD;;EAGA,OAAOhE,UAAP;AACH,CAtM+B,EAAhC;;AAuMA,SAASA,UAAT"},"metadata":{},"sourceType":"module"}