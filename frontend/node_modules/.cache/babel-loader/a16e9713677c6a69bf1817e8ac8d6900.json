{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types */\nimport { Query, DataManager, Deferred } from '@syncfusion/ej2-data';\n/**\n * data module is used to generate query and dataSource\n */\n\nvar Data =\n/** @class */\nfunction () {\n  /**\n   * Constructor for data module\n   *\n   * @param dataSource\n   * @param query\n   * @param dataSource\n   * @param query\n   * @private\n   */\n  function Data(dataSource, query) {\n    this.initDataManager(dataSource, query);\n  }\n  /**\n   * The function used to initialize dataManager and query\n   *\n   * @param dataSource\n   * @param query\n   * @param dataSource\n   * @param query\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.initDataManager = function (dataSource, query) {\n    this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n    this.query = query instanceof Query ? query : new Query();\n  };\n  /**\n   * The function used to generate updated Query from chart model\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.generateQuery = function () {\n    var query = this.query.clone();\n    return query;\n  };\n  /**\n   * The function used to get dataSource by executing given Query\n   *\n   * @param  {Query} query - A Query that specifies to generate dataSource\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.getData = function (dataQuery) {\n    var _this = this;\n\n    if (this.dataManager.ready) {\n      var dataManagerDeferred_1 = new Deferred();\n      var ready = this.dataManager.ready;\n      ready.then(function () {\n        _this.dataManager.executeQuery(dataQuery).then(function (result) {\n          dataManagerDeferred_1.resolve(result);\n        });\n      }).catch(function (e) {\n        dataManagerDeferred_1.reject(e);\n      });\n      return dataManagerDeferred_1.promise;\n    } else {\n      return this.dataManager.executeQuery(dataQuery);\n    }\n  };\n\n  return Data;\n}();\n\nexport { Data };","map":{"version":3,"names":["Query","DataManager","Deferred","Data","dataSource","query","initDataManager","prototype","dataManager","generateQuery","clone","getData","dataQuery","_this","ready","dataManagerDeferred_1","then","executeQuery","result","resolve","catch","e","reject","promise"],"sources":["C:/Users/shahj/OneDrive/Documents/GitHub/Admin Dashboard/frontend/node_modules/@syncfusion/ej2-charts/src/common/model/data.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { Query, DataManager, Deferred } from '@syncfusion/ej2-data';\n/**\n * data module is used to generate query and dataSource\n */\nvar Data = /** @class */ (function () {\n    /**\n     * Constructor for data module\n     *\n     * @param dataSource\n     * @param query\n     * @param dataSource\n     * @param query\n     * @private\n     */\n    function Data(dataSource, query) {\n        this.initDataManager(dataSource, query);\n    }\n    /**\n     * The function used to initialize dataManager and query\n     *\n     * @param dataSource\n     * @param query\n     * @param dataSource\n     * @param query\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.initDataManager = function (dataSource, query) {\n        this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n        this.query = query instanceof Query ? query : new Query();\n    };\n    /**\n     * The function used to generate updated Query from chart model\n     *\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.generateQuery = function () {\n        var query = this.query.clone();\n        return query;\n    };\n    /**\n     * The function used to get dataSource by executing given Query\n     *\n     * @param  {Query} query - A Query that specifies to generate dataSource\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.getData = function (dataQuery) {\n        var _this = this;\n        if (this.dataManager.ready) {\n            var dataManagerDeferred_1 = new Deferred();\n            var ready = this.dataManager.ready;\n            ready.then(function () {\n                _this.dataManager.executeQuery(dataQuery).then(function (result) {\n                    dataManagerDeferred_1.resolve(result);\n                });\n            }).catch(function (e) { dataManagerDeferred_1.reject(e); });\n            return dataManagerDeferred_1.promise;\n        }\n        else {\n            return this.dataManager.executeQuery(dataQuery);\n        }\n    };\n    return Data;\n}());\nexport { Data };\n"],"mappings":"AAAA;AACA,SAASA,KAAT,EAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,sBAA7C;AACA;AACA;AACA;;AACA,IAAIC,IAAI;AAAG;AAAe,YAAY;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,IAAT,CAAcC,UAAd,EAA0BC,KAA1B,EAAiC;IAC7B,KAAKC,eAAL,CAAqBF,UAArB,EAAiCC,KAAjC;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIF,IAAI,CAACI,SAAL,CAAeD,eAAf,GAAiC,UAAUF,UAAV,EAAsBC,KAAtB,EAA6B;IAC1D,KAAKG,WAAL,GAAmBJ,UAAU,YAAYH,WAAtB,GAAoCG,UAApC,GAAiD,IAAIH,WAAJ,CAAgBG,UAAhB,CAApE;IACA,KAAKC,KAAL,GAAaA,KAAK,YAAYL,KAAjB,GAAyBK,KAAzB,GAAiC,IAAIL,KAAJ,EAA9C;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;AACA;;;EACIG,IAAI,CAACI,SAAL,CAAeE,aAAf,GAA+B,YAAY;IACvC,IAAIJ,KAAK,GAAG,KAAKA,KAAL,CAAWK,KAAX,EAAZ;IACA,OAAOL,KAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIF,IAAI,CAACI,SAAL,CAAeI,OAAf,GAAyB,UAAUC,SAAV,EAAqB;IAC1C,IAAIC,KAAK,GAAG,IAAZ;;IACA,IAAI,KAAKL,WAAL,CAAiBM,KAArB,EAA4B;MACxB,IAAIC,qBAAqB,GAAG,IAAIb,QAAJ,EAA5B;MACA,IAAIY,KAAK,GAAG,KAAKN,WAAL,CAAiBM,KAA7B;MACAA,KAAK,CAACE,IAAN,CAAW,YAAY;QACnBH,KAAK,CAACL,WAAN,CAAkBS,YAAlB,CAA+BL,SAA/B,EAA0CI,IAA1C,CAA+C,UAAUE,MAAV,EAAkB;UAC7DH,qBAAqB,CAACI,OAAtB,CAA8BD,MAA9B;QACH,CAFD;MAGH,CAJD,EAIGE,KAJH,CAIS,UAAUC,CAAV,EAAa;QAAEN,qBAAqB,CAACO,MAAtB,CAA6BD,CAA7B;MAAkC,CAJ1D;MAKA,OAAON,qBAAqB,CAACQ,OAA7B;IACH,CATD,MAUK;MACD,OAAO,KAAKf,WAAL,CAAiBS,YAAjB,CAA8BL,SAA9B,CAAP;IACH;EACJ,CAfD;;EAgBA,OAAOT,IAAP;AACH,CA7DyB,EAA1B;;AA8DA,SAASA,IAAT"},"metadata":{},"sourceType":"module"}