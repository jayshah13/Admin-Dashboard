{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable jsdoc/require-returns */\n\n/* eslint-disable jsdoc/require-param */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n\n/**\n * Selection src file\n */\n\n\nimport { Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\n * `Selection` module handles the selection for chart.\n *\n * @private\n */\n\nvar Selection =\n/** @class */\nfunction (_super) {\n  __extends(Selection, _super);\n  /**\n   * Constructor for selection module.\n   *\n   * @private\n   */\n\n\n  function Selection(chart) {\n    var _this = _super.call(this, chart) || this;\n\n    _this.isdrawRect = true;\n    _this.multiDataIndexes = [];\n    _this.pathIndex = 0;\n    _this.seriesIndex = 0;\n    _this.count = -1;\n    _this.dragRectArray = [];\n    _this.filterArray = [];\n    _this.totalSelectedPoints = [];\n    _this.chart = chart;\n    _this.renderer = chart.renderer;\n    var mode = chart.selectionMode;\n    _this.isMultiDrag = chart.isMultiSelect && mode.indexOf('Drag') > -1;\n\n    _this.addEventListener();\n\n    return _this;\n  }\n  /**\n   * Binding events for selection module.\n   */\n\n\n  Selection.prototype.addEventListener = function () {\n    if (this.chart.isDestroyed || this.chart.stockChart && this.chart.stockChart.onPanning) {\n      return;\n    }\n\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.chart.on(cancelEvent, this.completeSelection, this);\n    this.chart.on('click', this.calculateSelectedElements, this);\n    this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n    this.chart.on(Browser.touchEndEvent, this.completeSelection, this);\n  };\n  /**\n   * Chart mouse down\n   */\n\n\n  Selection.prototype.mousedown = function (e) {\n    var chart = this.chart;\n\n    if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n      return;\n    }\n\n    if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n      this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n    }\n  };\n  /**\n   * UnBinding events for selection module.\n   */\n\n\n  Selection.prototype.removeEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n\n    this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n    this.chart.off('pointerleave' || 'mouseleave', this.completeSelection);\n    this.chart.off('click', this.calculateSelectedElements);\n    this.chart.off(Browser.touchStartEvent, this.mousedown);\n    this.chart.off(Browser.touchEndEvent, this.completeSelection);\n  };\n  /**\n   * To find private variable values\n   */\n\n\n  Selection.prototype.initPrivateVariables = function (chart) {\n    this.styleId = chart.element.id + '_ej2_chart_selection';\n    this.unselected = chart.element.id + '_ej2_deselected';\n    this.closeIconId = chart.element.id + '_ej2_drag_close';\n    this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n    this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n    this.draggedRect = chart.element.id + '_ej2_drag_rect';\n    this.lassoPath = chart.element.id + '_ej2_drag_path';\n    this.selectedDataIndexes = [];\n    this.rectPoints = null;\n    this.isSeriesMode = chart.selectionMode === 'Series';\n  };\n  /**\n   * Method to select the point and series.\n   *\n   * @returns {void}\n   */\n\n\n  Selection.prototype.invokeSelection = function (chart) {\n    this.initPrivateVariables(chart);\n    this.series = extend({}, chart.visibleSeries, null, true);\n    this.seriesStyles();\n    this.currentMode = chart.selectionMode;\n\n    if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n      this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n    }\n  };\n\n  Selection.prototype.generateStyle = function (series) {\n    if (series) {\n      if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n        this.unselected = series.unSelectedStyle || this.unselected;\n      }\n\n      if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightMode !== 'None') {\n        this.unselected = series.nonHighlightStyle || this.unselected;\n      }\n\n      return series.selectionStyle || this.styleId + '_series_' + series.index;\n    }\n\n    return 'undefined';\n  };\n  /**\n   *  Method to get the selected data index\n   *\n   * @private\n   */\n\n\n  Selection.prototype.selectDataIndex = function (chart, indexes) {\n    for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n      var index = indexes_1[_i];\n      this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n    }\n  };\n  /**\n   *  Method to get the selected index element\n   *\n   * @private\n   */\n\n\n  Selection.prototype.getElementByIndex = function (chart, index, suffix, marker) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n\n    var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n    var series = chart.series[index.series];\n    elementId = series.type !== 'Scatter' && series.type !== 'Bubble' && marker ? elementId + '_Symbol' + suffix : elementId;\n    return [getElement(elementId), (series.type === 'RangeArea' || series.type === 'SplineRangeArea') && series.marker.visible ? getElement(elementId + '1') : null];\n  };\n  /**\n   *  Method to get the selected cluster element\n   *\n   * @private\n   */\n\n\n  Selection.prototype.getClusterElements = function (chart, index) {\n    var clusters = [];\n    var seriesStyle;\n    var selectedElements;\n\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n\n      if (series.visible) {\n        index = new Index(series.index, index.point);\n\n        if (series.isRectSeries) {\n          clusters.push(this.getElementByIndex(chart, index)[0]);\n        }\n\n        clusters.push(this.getElementByIndex(chart, index, '', series.marker.visible)[0]);\n        seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n        selectedElements = document.querySelectorAll('.' + seriesStyle);\n        this.findTrackballElements(selectedElements, seriesStyle);\n        var clusterIndex = series.marker.visible && series.isRectSeries ? 2 : 1;\n\n        if (!chart.isMultiSelect && selectedElements.length > 0 && selectedElements[0].id !== clusters[clusters.length - clusterIndex].id) {\n          this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n        }\n      }\n    }\n\n    return clusters;\n  };\n  /**\n   *  Method to get trackball elements\n   *\n   * @private\n   */\n\n\n  Selection.prototype.findTrackballElements = function (selectedElements, className) {\n    var trackballElements;\n    var elements;\n\n    for (var i = 0; i < selectedElements.length; i++) {\n      if (!isNullOrUndefined(selectedElements[i])) {\n        trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ? [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n\n        if (trackballElements.length > 0) {\n          elements = [];\n\n          for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n            if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n              elements.push(trackballElements[i_1]);\n            }\n          }\n\n          this.removeStyles(elements);\n        }\n      }\n    }\n  };\n  /**\n   *  Method to get the selected element\n   *\n   * @private\n   */\n\n\n  Selection.prototype.findElements = function (chart, series, index, suffix, marker) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n\n    if (this.isSeriesMode) {\n      return this.getSeriesElements(series);\n    } else if (this.currentMode === 'Cluster') {\n      return this.getClusterElements(chart, index);\n    } else {\n      return this.getElementByIndex(chart, index, suffix, marker);\n    }\n  };\n  /**\n   * To find the selected element.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.isAlreadySelected = function (event) {\n    var targetElem = event.target;\n\n    if (event.type === 'click') {\n      this.currentMode = this.chart.selectionMode;\n      this.styleId = this.chart.element.id + '_ej2_chart_selection';\n    } else if (event.type === 'mousemove' || event.type === 'pointermove') {\n      this.currentMode = this.chart.highlightMode;\n      this.highlightDataIndexes = [];\n      this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n    }\n\n    if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n      if (event.type === 'click') {\n        return false;\n      }\n    }\n\n    if (this.chart.highlightMode !== 'None' && this.previousSelectedEle && this.previousSelectedEle[0]) {\n      var parentNodeId = targetElem.parentNode.id;\n      var isElement = void 0;\n\n      if (targetElem.parentNode) {\n        isElement = parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0 ? true : false;\n      }\n\n      for (var i = 0; i < this.previousSelectedEle.length; i++) {\n        if (this.previousSelectedEle[i].hasAttribute('class')) {\n          if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 && (isElement || event.type === 'click')) {\n            this.previousSelectedEle[i].removeAttribute('class');\n\n            if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n              if (this.previousSelectedEle[i].id.indexOf('Group') > 0) {\n                for (var j = 0; j < this.previousSelectedEle[i].children.length; j++) {\n                  this.previousSelectedEle[i].children[j].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                }\n              } else {\n                this.previousSelectedEle[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n              }\n            }\n\n            this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n          } else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n            this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n  /**\n   * To find the selected element.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.calculateSelectedElements = function (event) {\n    if (isNullOrUndefined(event.target)) {\n      return;\n    }\n\n    var targetElement = event.target;\n\n    if (this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None' || targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n      return;\n    }\n\n    if (event.type === 'mousemove' || event.type === 'pointermove') {\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n\n      if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') && (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 || targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n        return;\n      }\n    }\n\n    this.isAlreadySelected(event);\n\n    if (targetElement.id.indexOf('_Series_') > -1) {\n      var element = void 0;\n\n      if (targetElement.id.indexOf('_Trackball_1') > -1) {\n        element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n        element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n      } else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n        return null;\n      }\n\n      this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n    }\n  };\n  /**\n   *  Method to perform the selection\n   *\n   * @private\n   */\n\n\n  Selection.prototype.performSelection = function (index, chart, element) {\n    this.isSeriesMode = this.currentMode === 'Series';\n\n    if (chart.series[index.series].type === 'BoxAndWhisker' && element && element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n      element = element.parentNode;\n    }\n\n    if (chart.series[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element && element.id === this.chart.element.id + '_Series_' + index.series) {\n      var className = this.generateStyle(chart.series[index.series]);\n      var selectionEle = document.querySelectorAll('.' + className);\n      this.findTrackballElements(selectionEle, className);\n      this.blurEffect(chart.element.id, chart.visibleSeries);\n    }\n\n    switch (this.currentMode) {\n      case 'Series':\n        this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n        this.selectionComplete(chart, index, this.currentMode);\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        break;\n\n      case 'Point':\n        if (!isNaN(index.point) && element) {\n          var pointElements = [];\n          pointElements.push(element);\n\n          if (pointElements[0] !== null && chart.series[index.series].marker.visible && (chart.series[index.series].type.indexOf('Column') !== -1 || chart.series[index.series].type.indexOf('Bar') !== -1)) {\n            if (!(element.id.indexOf('_Symbol') !== -1) && getElement(element.id + '_Symbol')) {\n              pointElements.push(getElement(element.id + '_Symbol'));\n            } else if (element.id.indexOf('_Symbol') !== -1 && getElement(element.id.replace('_Symbol', ''))) {\n              pointElements.push(getElement(element.id.replace('_Symbol', '')));\n            }\n          }\n\n          this.selection(chart, index, pointElements);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n\n        break;\n\n      case 'Cluster':\n        if (!isNaN(index.point)) {\n          this.clusterSelection(chart, index);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n\n        break;\n    }\n  };\n  /**\n   *  Method to get the selected data index\n   *\n   * @private\n   */\n\n\n  Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n    var points;\n    var pointIndex;\n    var seriesIndex;\n    var selectedPointValues = [];\n    var yValue;\n    var selectedPointX;\n\n    if (selectionMode === 'Cluster') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n\n        if (series.visible) {\n          for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n            pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n            seriesIndex = series.index;\n            points = series.points;\n\n            if (!isNaN(pointIndex)) {\n              yValue = series.type !== 'RangeArea' || 'SplineRangeArea' ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n              selectedPointX = points[pointIndex].xValue;\n\n              if (chart.primaryXAxis.valueType === 'Category') {\n                selectedPointX = points[pointIndex].x.toLocaleString();\n              } else if (chart.primaryXAxis.valueType === 'DateTime') {\n                selectedPointX = new Date(points[pointIndex].xValue);\n              }\n\n              if (series.category !== 'Indicator') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: yValue,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n\n              if (series.type === 'RangeArea' || series.type === 'SplineRangeArea') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: points[pointIndex].regions[0].y,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n            }\n          }\n        }\n      }\n    } else if (selectionMode === 'Series') {\n      if (chart.isMultiSelect) {\n        for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n          seriesIndex = this.selectedDataIndexes[i].series;\n          selectedPointValues.push({\n            seriesIndex: seriesIndex\n          });\n        }\n      } else {\n        seriesIndex = this.selectedDataIndexes.length > 0 ? this.selectedDataIndexes[0].series : 0;\n        selectedPointValues.push({\n          seriesIndex: seriesIndex\n        });\n      }\n    } else if (selectionMode === 'Point') {\n      for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n        pointIndex = this.selectedDataIndexes[i].point;\n        seriesIndex = this.selectedDataIndexes[i].series;\n        var series = chart.series[seriesIndex];\n        points = series.points;\n\n        if (!isNaN(pointIndex)) {\n          selectedPointX = points[pointIndex].xValue;\n          yValue = series.type !== 'RangeArea' || 'SplineRangeArea' ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[pointIndex].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[pointIndex].xValue);\n          }\n\n          selectedPointValues.push({\n            x: selectedPointX,\n            y: yValue,\n            seriesIndex: seriesIndex,\n            pointIndex: pointIndex\n          });\n        }\n      }\n    }\n\n    var args = {\n      name: selectionComplete,\n      selectedDataValues: selectedPointValues,\n      cancel: false\n    };\n    chart.trigger(selectionComplete, args);\n  };\n  /**\n   *  Method to perform selection\n   *\n   * @private\n   */\n\n\n  Selection.prototype.selection = function (chart, index, selectedElements) {\n    if (!(this.currentMode === 'Lasso')) {\n      if (!chart.isMultiSelect && this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 && chart.selectionMode !== 'None') {\n        this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n      }\n    }\n\n    if (!isNullOrUndefined(selectedElements[0])) {\n      if (chart.series[index.series].isRectSeries) {\n        if (selectedElements[0].id) {\n          if (document.getElementById(selectedElements[0].id + '_Symbol')) {\n            selectedElements.push(getElement(selectedElements[0].id + '_Symbol'));\n          } else if (selectedElements[0].id.indexOf('SeriesGroup') !== -1) {\n            if (document.getElementById(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup'))) {\n              selectedElements.push(getElement(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup')));\n            }\n          }\n        }\n      }\n\n      var isAdd = void 0;\n      var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n      var pClassName = selectedElements[0].parentNode && (selectedElements[0].parentNode.getAttribute('class') || '');\n\n      if (className !== '' && this.currentMode !== 'Cluster') {\n        this.findTrackballElements(selectedElements, className);\n      }\n\n      if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles(selectedElements);\n      } else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles([selectedElements[0].parentNode]);\n      } else {\n        this.previousSelectedEle = chart.highlightMode !== 'None' ? selectedElements : [];\n        this.applyStyles(selectedElements);\n        isAdd = true;\n      }\n\n      if (this.styleId.indexOf('highlight') > 0 && chart.highlightMode !== 'None') {\n        this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n      } else {\n        this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n      }\n    }\n  };\n  /**\n   *  Method to get the cluster selection element\n   *\n   * @private\n   */\n\n\n  Selection.prototype.clusterSelection = function (chart, index) {\n    this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n  };\n  /**\n   * Method to remove the multi selected elements\n   *\n   * @private\n   */\n\n\n  Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n    var series;\n\n    for (var i = 0; i < index.length; i++) {\n      series = seriesCollection[index[i].series];\n\n      if (this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode) || this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false) || !this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false)) {\n        this.removeStyles(this.findElements(chart, series, index[i], '', false));\n\n        if (series.marker.visible) {\n          this.removeStyles(this.findElements(chart, series, index[i], '', true));\n        }\n\n        index.splice(i, 1);\n        i--;\n      }\n    }\n  };\n  /**\n   * Method to remove the selection\n   *\n   * @private\n   */\n\n\n  Selection.prototype.blurEffect = function (chartId, visibleSeries, legendClick) {\n    if (legendClick === void 0) {\n      legendClick = false;\n    }\n\n    var visibility = this.checkVisibility(this.highlightDataIndexes) || this.checkVisibility(this.selectedDataIndexes); // legend click scenario\n\n    for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n      var series = visibleSeries_1[_i];\n\n      if (series.visible) {\n        this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n\n        if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n          this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n        }\n      }\n    }\n  };\n  /**\n   * Method to add the add/remove class to element\n   *\n   * @private\n   */\n\n\n  Selection.prototype.checkSelectionElements = function (element, className, visibility, legendClick, series) {\n    var children = this.isSeriesMode ? [element] : element.childNodes;\n\n    if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n      children = element.childNodes;\n    }\n\n    var elementClassName;\n    var parentClassName;\n    var legendShape;\n    var selectElement = element;\n\n    for (var i = 0; i < children.length; i++) {\n      elementClassName = children[i].getAttribute('class') || '';\n      parentClassName = children[i].parentNode.getAttribute('class') || '';\n\n      if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n        className = elementClassName.indexOf('selection') > 0 || elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n        className = parentClassName.indexOf('selection') > 0 || parentClassName.indexOf('highlight') > 0 ? parentClassName : className;\n      }\n\n      if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n        this.addSvgClass(children[i], this.unselected);\n      } else {\n        selectElement = children[i];\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n      }\n\n      if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n        this.addSvgClass(children[i], className);\n      }\n    }\n\n    if (element.id.indexOf('Symbol') > -1) {\n      if (element.querySelectorAll('.' + className)[0] && element.querySelectorAll('.' + className)[0].getAttribute('class') === className) {\n        var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n        var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n\n        if (seriesClassName.indexOf(this.unselected) > -1) {\n          this.removeSvgClass(symbolEle, this.unselected);\n        }\n      }\n    }\n\n    if (this.control.legendModule && this.control.legendSettings.visible) {\n      legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n\n      if (legendShape) {\n        if (legendShape.hasAttribute('class')) {\n          this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n\n          if (!isNullOrUndefined(this.chart.highlightColor && this.chart.highlightColor !== '')) {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n        }\n\n        elementClassName = selectElement.getAttribute('class') || '';\n        parentClassName = selectElement.parentNode.getAttribute('class') || '';\n\n        if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n          this.addSvgClass(legendShape, this.unselected);\n          this.removeSvgClass(legendShape, className);\n\n          if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n        } else {\n          this.removeSvgClass(legendShape, this.unselected);\n\n          if (!isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== '') {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n\n          if (elementClassName === '' && parentClassName === '' || elementClassName.trim() === 'EJ2-Trackball') {\n            this.removeSvgClass(legendShape, className);\n          } else {\n            this.addSvgClass(legendShape, className);\n\n            if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n              legendShape.setAttribute('stroke', this.chart.highlightColor);\n\n              if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\n                legendShape.setAttribute('fill', this.chart.highlightColor);\n              }\n            }\n          }\n        }\n\n        if (legendClick && parentClassName.indexOf(className) > -1) {\n          this.addSvgClass(legendShape, className);\n        }\n      }\n    }\n  };\n  /**\n   *  Method to apply the styles\n   *\n   * @private\n   */\n\n\n  Selection.prototype.applyStyles = function (elements) {\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n\n      if (element) {\n        this.removeSvgClass(element.parentNode, this.unselected);\n        this.removeSvgClass(element, this.unselected);\n        this.addSvgClass(element, this.getSelectionClass(element.id));\n\n        if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n          if (element.id.indexOf('Group') > 0) {\n            for (var i = 0; i < element.children.length; i++) {\n              element.children[i].setAttribute('fill', this.chart.highlightColor);\n            }\n          } else {\n            element.setAttribute('fill', this.chart.highlightColor);\n          }\n        }\n      }\n    }\n  };\n  /**\n   *  Method to get the selection class\n   *\n   * @private\n   */\n\n\n  Selection.prototype.getSelectionClass = function (id) {\n    return this.generateStyle(this.control.series[this.indexFinder(id).series]);\n  };\n  /**\n   *  Method to remove styles\n   *\n   * @private\n   */\n\n\n  Selection.prototype.removeStyles = function (elements) {\n    for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n      var element = elements_2[_i];\n\n      if (element) {\n        this.removeSvgClass(element, this.getSelectionClass(element.id));\n\n        if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n          if (element.id.indexOf('Group') > 0) {\n            for (var i = 0; i < element.children.length; i++) {\n              element.children[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n            }\n          } else {\n            element.setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n          }\n        }\n      }\n    }\n  };\n  /**\n   *  Method to remove the selected data index\n   *\n   * @private\n   */\n\n\n  Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n    for (var i = 0; i < indexes.length; i++) {\n      if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n        indexes.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (isAdd) {\n      indexes.push(index);\n    }\n  };\n  /**\n   *  Method to get the equal index\n   *\n   * @private\n   */\n\n\n  Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n    return (first.series === second.series || this.currentMode === 'Cluster' && !checkSeriesOnly) && (checkSeriesOnly || first.point === second.point);\n  };\n  /**\n   * To redraw the selected points.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n    this.isSeriesMode = oldMode === 'Series';\n\n    if (!isNullOrUndefined(oldMode)) {\n      if (oldMode.indexOf('Drag') !== -1 || oldMode === 'Lasso' || chartRedraw) {\n        chart.isRedrawSelection = false;\n      } else {\n        chart.isRedrawSelection = true;\n      }\n    }\n\n    var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n    var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n\n    if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n      this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n      selectedDataIndexes = highlightDataIndexes;\n    } else {\n      this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    }\n\n    this.blurEffect(chart.element.id, chart.visibleSeries);\n    this.selectDataIndex(chart, selectedDataIndexes);\n  };\n  /** @private */\n\n\n  Selection.prototype.legendSelection = function (chart, series, event) {\n    var targetElement = event.target;\n\n    if (event.type === 'mousemove') {\n      if (event.target.id.indexOf('text') > 1) {\n        targetElement = getElement(event.target.id.replace('text', 'shape'));\n      }\n\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n\n      this.currentMode = this.chart.highlightMode;\n    }\n\n    var isPreSelected = this.isAlreadySelected(event);\n\n    if (isPreSelected) {\n      var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n      var selectedElements = document.querySelectorAll('.' + seriesStyle);\n      this.isSeriesMode = this.currentMode === 'Series';\n      var isBlurEffectNeeded = true;\n\n      if (selectedElements.length > 0) {\n        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n      } else {\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n          var element = _a[_i];\n\n          if (element.index !== series && !chart.isMultiSelect) {\n            seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n            selectedElements = document.querySelectorAll('.' + seriesStyle);\n            this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n          }\n        }\n\n        var seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n\n        for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n          var seriesElement = seriesElements_1[_b];\n\n          if (isNullOrUndefined(seriesElement)) {\n            return;\n          }\n\n          this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n        }\n\n        this.isSeriesMode = true;\n        this.selection(chart, new Index(series, NaN), seriesElements);\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries, true);\n      }\n    }\n  };\n\n  Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n    if (selectedElements.length > 0) {\n      var elements = [];\n\n      for (var i = 0; i < selectedElements.length; i++) {\n        elements.push(selectedElements[i]);\n      }\n\n      this.removeStyles(elements);\n      this.isSeriesMode = true;\n      this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var value = _a[_i];\n        seriesStyle = this.generateStyle(value);\n\n        if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n          for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n            var element = elements_3[_b];\n            this.checkSelectionElements(element, seriesStyle, true, true, series);\n          }\n\n          isBlurEffectNeeded = false;\n          break;\n        }\n      }\n\n      if (isBlurEffectNeeded) {\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n      }\n    }\n  };\n  /** @private */\n\n\n  Selection.prototype.getSeriesElements = function (series) {\n    var seriesElements = [series.seriesElement];\n\n    if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n      seriesElements.push(series.symbolElement);\n    } else if (series.marker.visible && series.isRectSeries) {\n      seriesElements.push(series.symbolElement);\n    }\n\n    return seriesElements;\n  };\n  /** @private */\n\n\n  Selection.prototype.indexFinder = function (id) {\n    var ids = ['NaN', 'NaN'];\n\n    if (id.indexOf('SeriesGroup') > -1) {\n      ids = id.split('SeriesGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('SymbolGroup') > -1) {\n      ids = id.split('SymbolGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('_Point_') > -1) {\n      ids = id.split('_Series_')[1].split('_Point_');\n    } else if (id.indexOf('_Series_') > -1) {\n      ids[0] = id.split('_Series_')[1];\n    } else if (id.indexOf('_chart_legend_shape_') > -1) {\n      ids = id.split('_chart_legend_shape_');\n      ids[0] = ids[1];\n    }\n\n    return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n  };\n  /**\n   * Drag selection that returns the selected data.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n    this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    var isLasso = chart.selectionMode === 'Lasso';\n    var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n    var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n    this.removeOffset(rect, axisOffset);\n    var points;\n    var index;\n    var selectedPointValues = [];\n    var selectedSeriesValues = [];\n    this.isSeriesMode = false;\n    var isDragResize = chart.allowMultiSelection && (this.rectGrabbing || this.resizing);\n    this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n\n    if (dragRect.width && dragRect.height && !isClose) {\n      var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n      this.removeOffset(rt, axisOffset);\n      this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n    }\n\n    var _loop_1 = function (series) {\n      if (series.visible) {\n        points = series.points;\n        selectedPointValues = [];\n        var xAxisOffset_1;\n        var yAxisOffset_1;\n\n        if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) && !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n          xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n          yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n        } else {\n          xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n          yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n        }\n\n        for (var j = 0; j < points.length; j++) {\n          var yValue = series.type !== 'RangeArea' || 'SplineRangeArea' ? points[j].yValue : points[j].regions[0].y;\n          var isCurrentPoint = void 0;\n          var selectedPointX = points[j].xValue;\n\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[j].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[j].xValue);\n          }\n\n          if (series.type === 'BoxAndWhisker') {\n            isCurrentPoint = points[j].regions.some(function (region) {\n              return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n            });\n          } else {\n            if (chart.selectionMode === 'Lasso') {\n              isCurrentPoint = points[j].isSelect;\n            } else {\n              isCurrentPoint = chart.allowMultiSelection ? this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray) : points[j].symbolLocations.some(function (location) {\n                return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n              });\n            }\n          }\n\n          if (isCurrentPoint && series.category !== 'Indicator') {\n            index = new Index(series.index, points[j].index);\n            this_1.selection(chart, index, this_1.findElements(chart, series, index, '', !series.isRectSeries ? series.marker.visible : false));\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: yValue\n            });\n          }\n\n          if (isCurrentPoint && (series.type === 'RangeArea' || series.type === 'SplineRangeArea')) {\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: points[j].regions[0].y\n            });\n          }\n        }\n\n        selectedSeriesValues.push(selectedPointValues);\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n\n      _loop_1(series);\n    }\n\n    this.blurEffect(chart.element.id, chart.visibleSeries);\n    var x = isLasso ? chart.mouseDownX : dragRect.x + dragRect.width;\n    var y = isLasso ? chart.mouseDownY : dragRect.y;\n\n    if (!isClose) {\n      this.createCloseButton(x, y);\n    }\n\n    var args = {\n      name: dragComplete,\n      selectedDataValues: selectedSeriesValues,\n      cancel: false\n    };\n    chart.trigger(dragComplete, args);\n  };\n\n  Selection.prototype.removeOffset = function (rect, clip) {\n    rect.x -= clip.x;\n    rect.y -= clip.y;\n  };\n\n  Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection) {\n    var location = points.symbolLocations[0];\n\n    for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n      var rect = rectCollection_1[_i];\n\n      if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Method to draw dragging rect.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.drawDraggingRect = function (chart, dragRect, target) {\n    var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n    var border = chart.chartArea.border.width;\n    var rectFill = chart.themeStyle.selectionRectFill;\n    var rectStroke = chart.themeStyle.selectionRectStroke;\n    var isLasso = chart.selectionMode === 'Lasso';\n\n    if (this.isdrawRect) {\n      cartesianLayout.x = cartesianLayout.x - border / 2;\n      cartesianLayout.y = cartesianLayout.y - border / 2;\n      cartesianLayout.width = cartesianLayout.width + border;\n      cartesianLayout.height = cartesianLayout.height + border;\n      this.isdrawRect = false;\n    }\n\n    switch (chart.selectionMode) {\n      case 'DragX':\n        dragRect.y = cartesianLayout.y;\n        dragRect.height = cartesianLayout.height;\n        break;\n\n      case 'DragY':\n        dragRect.x = cartesianLayout.x;\n        dragRect.width = cartesianLayout.width;\n        break;\n    }\n\n    if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n      return null;\n    }\n\n    var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n\n    if (chart.allowMultiSelection && isDragMode) {\n      var element = void 0;\n      var dragGroup = void 0;\n      var multiGroup = getElement(this.multiRectGroup);\n\n      if (!multiGroup) {\n        multiGroup = chart.svgRenderer.createGroup({\n          id: this.multiRectGroup\n        });\n        chart.svgObject.appendChild(multiGroup);\n      }\n\n      if (this.rectGrabbing || this.resizing) {\n        var rectElement = void 0;\n        rectElement = getElement(this.draggedRect + this.targetIndex);\n\n        if (rectElement.nextSibling) {\n          remove(rectElement.nextSibling);\n        }\n\n        this.setAttributes(rectElement, dragRect);\n      } else if (!getElement(this.draggedRectGroup + this.count)) {\n        dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup + this.count\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg'); // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n        chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n      }\n\n      if (!(chart.selectionMode === 'Lasso')) {\n        element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, {\n          color: rectStroke,\n          width: 1\n        }, 1, dragRect));\n        element.style.cursor = \"move\";\n      } else {\n        element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n      }\n\n      if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n        getElement(this.draggedRectGroup + this.count).appendChild(element);\n      } else if (!this.rectGrabbing && !this.resizing) {\n        dragGroup.appendChild(element);\n      }\n    } else {\n      var element = isLasso ? getElement(this.lassoPath) : getElement(this.draggedRect);\n\n      if (this.closeIcon) {\n        removeElement(this.closeIconId);\n      }\n\n      if (element) {\n        if (isLasso) {\n          element.setAttribute('d', this.path);\n        } else {\n          this.setAttributes(element, dragRect);\n        }\n      } else {\n        var dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg'); // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n        chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n\n        if (!(chart.selectionMode === 'Lasso')) {\n          element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, {\n            color: rectStroke,\n            width: 1\n          }, 1, dragRect));\n        } else {\n          element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n        }\n\n        dragGroup.appendChild(element);\n      }\n    }\n  };\n  /**\n   * To get drag selected group element index from its id\n   *\n   * @param {string} id element id\n   */\n\n\n  Selection.prototype.getIndex = function (id) {\n    var i;\n\n    for (i = id.length - 1; i > 0; i--) {\n      var x = Number(id[i]);\n\n      if (!isNaN(x)) {\n        continue;\n      } else {\n        break;\n      }\n    }\n\n    var index = +id.substr(i + 1, id.length - 1);\n    return index;\n  };\n\n  Selection.prototype.createCloseButton = function (x, y) {\n    var isMultiDrag = this.chart.allowMultiSelection;\n    var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n    var isDrag = this.rectGrabbing || this.resizing;\n    var closeIcon = this.chart.svgRenderer.createGroup({\n      id: this.closeIconId + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      style: 'cursor:pointer; visibility: visible;'\n    });\n    closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''), '#FFFFFF', {\n      color: circleStroke,\n      width: 1\n    }, 1, x, y, 10)));\n    var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) + ' L ' + (x + 4) + ' ' + (y - 4);\n    closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n      id: this.closeIconId + '_cross' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      d: direction,\n      stroke: circleStroke,\n      'stroke-width': 2,\n      fill: circleStroke\n    }));\n    this.closeIcon = closeIcon;\n    var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''));\n\n    if (pathElement) {\n      pathElement.appendChild(closeIcon);\n    }\n  };\n  /**\n   * Method to remove dragged element.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.removeDraggedElements = function (chart, event) {\n    if (event.target.id.indexOf(this.closeIconId) > -1 && event.type.indexOf('move') === -1) {\n      var isSelectedvalues = true;\n\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(event.target.id);\n        var multiRectGroupElement = getElement(this.multiRectGroup);\n        remove(getElement(this.draggedRectGroup + index));\n        this.dragRectArray[index] = null;\n        this.filterArray[index] = null;\n        this.totalSelectedPoints[index] = null;\n\n        if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n          removeElement(multiRectGroupElement);\n          this.dragRectArray = [];\n          this.filterArray = [];\n          this.totalSelectedPoints = [];\n        }\n\n        if (this.currentMode === 'Lasso') {\n          if (this.multiDataIndexes[index] != null) {\n            for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n              this.multiDataIndexes[index][i].isSelect = false;\n            }\n          }\n\n          this.multiDataIndexes[index] = null;\n\n          for (var j = 0; j < this.multiDataIndexes.length; j++) {\n            if (this.multiDataIndexes[j] != null) {\n              isSelectedvalues = false;\n\n              for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                this.multiDataIndexes[j][k].isSelect = true;\n              }\n            }\n          }\n\n          this.calculateDragSelectedElements(chart, this.dragRect, true);\n        } else if (this.filterArray.length) {\n          for (var i = 0; i < this.filterArray.length; i++) {\n            if (this.filterArray[i]) {\n              isSelectedvalues = false;\n              this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n            }\n          }\n        } else {\n          this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n        }\n      } else {\n        remove(getElement(this.draggedRectGroup));\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n      }\n\n      this.blurEffect(chart.element.id, chart.visibleSeries);\n      this.changeCursorStyle(false, chart.svgObject, 'auto');\n\n      if (!chart.allowMultiSelection || isSelectedvalues) {\n        this.rectPoints = null;\n      }\n    }\n  };\n  /**\n   * Method to resize the drag rect.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n    var rect;\n\n    if (chart.allowMultiSelection && target.id.indexOf('_ej2_drag_rect') > -1 || this.dragRectArray[this.targetIndex]) {\n      if (target.id.indexOf('_ej2_drag_rect') > -1) {\n        this.targetIndex = this.getIndex(target.id);\n      }\n\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    }\n\n    if (!chart.allowMultiSelection) {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n\n    if (rect) {\n      var resize = this.findResizeMode(chart.svgObject, rect, location);\n\n      if (this.resizing) {\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, chart.chartAxisLayoutPanel.seriesClipRect);\n        this.drawDraggingRect(chart, rect);\n        this.dragRect = rect;\n      }\n\n      if (tapped) {\n        this.resizing = resize;\n      }\n    } else {\n      return;\n    }\n  };\n\n  Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n    var cursorStyle = 'se-resize';\n    var resize = false;\n\n    if (!this.resizing) {\n      var resizeEdges = [new Rect(rect.x, rect.y, rect.width - 5, 5), new Rect(rect.x, rect.y, 5, rect.height), new Rect(rect.x, rect.y + rect.height - 5, rect.width - 5, 5), new Rect(rect.x + rect.width - 5, rect.y + 5, 5, rect.height - 15), new Rect(rect.x + rect.width - 10, rect.y + rect.height - 10, 10, 10)]; //corner\n\n      for (var i = 0; i < resizeEdges.length; i++) {\n        if (withInBounds(location.x, location.y, resizeEdges[i])) {\n          cursorStyle = i === 4 ? cursorStyle : i % 2 === 0 ? 'ns-resize' : 'ew-resize';\n          resize = true;\n          this.resizeMode = i;\n          break;\n        }\n      }\n    } else {\n      var x = rect.x;\n      var y = rect.y;\n      var width = location.x - x;\n      var height = location.y - y;\n\n      switch (this.resizeMode) {\n        case 0:\n          height = Math.abs(rect.height + rect.y - location.y);\n          rect.y = Math.min(rect.height + rect.y, location.y);\n          rect.height = height;\n          break;\n\n        case 1:\n          width = Math.abs(rect.width + rect.x - location.x);\n          rect.x = Math.min(rect.width + rect.x, location.x);\n          rect.width = width;\n          break;\n\n        case 2:\n          rect.height = Math.abs(height);\n          rect.y = Math.min(location.y, y);\n          break;\n\n        case 3:\n          rect.width = Math.abs(width);\n          rect.x = Math.min(location.x, x);\n          break;\n\n        case 4:\n          rect.width = Math.abs(width);\n          rect.height = Math.abs(height);\n          rect.x = Math.min(location.x, x);\n          rect.y = Math.min(location.y, y);\n          break;\n      }\n    }\n\n    if (this.currentMode !== 'Lasso') {\n      this.changeCursorStyle(resize, getElement(this.chart.allowMultiSelection ? this.draggedRect + this.targetIndex : this.draggedRect), cursorStyle);\n    }\n\n    this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n    return resize;\n  };\n\n  Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n    cursorStyle = isResize ? cursorStyle : this.control.svgObject === rectelement ? 'auto' : 'move';\n\n    if (rectelement) {\n      rectelement.style.cursor = cursorStyle;\n    }\n  };\n\n  Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n    index = chart.isRedrawSelection ? index : index.splice(0, index.length); // No need to remove selected indexes while redrawing\n\n    var seriesElements;\n\n    for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n      var series = seriesCollection_1[_i];\n      seriesElements = this.getSeriesElements(series);\n      this.removeStyles(seriesElements);\n\n      for (var _a = 0, seriesElements_2 = seriesElements; _a < seriesElements_2.length; _a++) {\n        var seriesElement = seriesElements_2[_a];\n        this.removeStyles(this.getChildren(seriesElement));\n      }\n    }\n  };\n\n  Selection.prototype.setAttributes = function (ele, object) {\n    var keys = Object.keys(object);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      ele.setAttribute(key, object[key]);\n    }\n  };\n  /**\n   * Method to move the dragged rect.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing, target) {\n    var rect;\n\n    if ((this.resizing || this.rectGrabbing) && chart.allowMultiSelection) {\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    } else {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n\n    rect.x -= grabbedPoint.x - chart.mouseX;\n    rect.y -= grabbedPoint.y - chart.mouseY;\n    rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n\n    if (doDrawing) {\n      this.drawDraggingRect(chart, rect, target);\n    } else {\n      this.calculateDragSelectedElements(chart, rect);\n    }\n  };\n  /**\n   * To complete the selection.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.completeSelection = function (e) {\n    var chart = this.chart;\n\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n\n    this.currentMode = chart.selectionMode;\n\n    if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n      this.calculateDragSelectedElements(chart, this.dragRect);\n    } else if (!chart.allowMultiSelection && this.rectGrabbing && this.rectPoints.width && this.rectPoints.height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    } else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    }\n\n    if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n      if (this.path.indexOf('L') !== -1) {\n        if (!chart.allowMultiSelection) {\n          getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath));\n        } else if (getElement(this.lassoPath + this.count)) {\n          getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath + this.count));\n        }\n\n        if (this.dragging || this.resizing) {\n          this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n      }\n    }\n\n    this.dragging = false;\n    this.rectGrabbing = false;\n    this.resizing = false;\n    this.removeDraggedElements(chart, e);\n  };\n\n  Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n    return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n  };\n  /** @private */\n\n\n  Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n    var mode = chart.selectionMode;\n    this.currentMode = chart.selectionMode;\n    this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) && chart.chartAreaType !== 'PolarRadar';\n    var target = event.target;\n    this.path = undefined;\n\n    if (this.dragging) {\n      this.count = getElement(this.multiRectGroup) ? this.count + 1 : 0;\n      this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n\n      if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > seriesClipRect.x + seriesClipRect.width || chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > seriesClipRect.y + seriesClipRect.height) {\n        this.dragging = false;\n      }\n    }\n\n    if (mode === 'Lasso') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n\n        if (series.visible) {\n          for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n            var point = _c[_b];\n\n            if (!chart.allowMultiSelection) {\n              point.isSelect = false;\n            }\n          }\n        }\n      }\n    }\n\n    if (!(mode === 'Lasso')) {\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n        this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n        this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n      }\n\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(target.id);\n        this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n\n        if (this.dragRectArray.length && this.isDragRect(target.id)) {\n          this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n          this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n        }\n      }\n    }\n  };\n\n  Selection.prototype.isDragRect = function (id) {\n    return id.indexOf('_ej2_drag_rect') > -1;\n  };\n  /** @private */\n\n\n  Selection.prototype.mouseMove = function (event) {\n    var chart = this.chart;\n    var target = event.target;\n\n    if (chart.highlightMode !== 'None') {\n      if (!isNullOrUndefined(target)) {\n        if (event.target.id.indexOf('text') > 1) {\n          target = getElement(event.target.id.replace('text', 'shape'));\n        }\n\n        if (target.hasAttribute('class') && (target.getAttribute('class').indexOf('highlight') > -1 || target.getAttribute('class').indexOf('selection') > -1)) {\n          return;\n        }\n\n        this.calculateSelectedElements(event);\n        return;\n      }\n    }\n\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n\n    if (event.type === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n      event.preventDefault();\n    }\n\n    var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n\n    if (insideMoving) {\n      if (this.rectGrabbing && !this.resizing) {\n        this.draggedRectMoved(chart, this.dragRect, true, target);\n      } else if (this.dragging && !this.resizing) {\n        if (chart.selectionMode === 'Lasso') {\n          this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n          this.drawDraggingRect(chart, this.dragRect, target);\n        } else {\n          this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n          this.drawDraggingRect(chart, this.dragRect, target);\n        }\n      }\n\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      } else if (chart.allowMultiSelection && !this.dragging || this.resizing) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      }\n    } else {\n      this.completeSelection(event);\n    }\n  };\n\n  Selection.prototype.getPath = function (startX, startY, endX, endY) {\n    if (this.dragging) {\n      if (this.path) {\n        this.path = this.path + ' L' + endX + ' ' + endY;\n      } else {\n        this.path = 'M ' + startX + ' ' + startY;\n      }\n    }\n  };\n\n  Selection.prototype.pointChecking = function (path) {\n    var _this = this;\n\n    var chart = this.chart;\n    var element;\n    var svgRect = getElement(chart.svgId).getBoundingClientRect();\n    var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n    var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n    this.multiDataIndexes[this.count] = [];\n\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      series.points.filter(function (point) {\n        // To check whether the point have symbol location value or not.\n        if (point.symbolLocations && point.symbolLocations.length) {\n          element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n        }\n\n        if (element === path) {\n          point.isSelect = true;\n\n          if (_this.chart.allowMultiSelection && _this.currentMode === 'Lasso') {\n            _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n            _this.seriesIndex++;\n          }\n        } else if (!chart.allowMultiSelection) {\n          point.isSelect = false;\n        }\n      });\n    }\n\n    this.seriesIndex = 0;\n  };\n  /**\n   * Get module name.\n   *\n   * @private\n   */\n\n\n  Selection.prototype.getModuleName = function () {\n    return 'Selection';\n  };\n  /**\n   * To destroy the selection.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Selection.prototype.destroy = function () {\n    this.removeEventListener(); // Destroy method performed here\n  };\n\n  return Selection;\n}(BaseSelection);\n\nexport { Selection };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Browser","remove","extend","isNullOrUndefined","ChartLocation","RectOption","CircleOption","withInBounds","getDraggedRectLocation","removeElement","getElement","Rect","PathOption","Index","dragComplete","selectionComplete","BaseSelection","Selection","_super","chart","_this","call","isdrawRect","multiDataIndexes","pathIndex","seriesIndex","count","dragRectArray","filterArray","totalSelectedPoints","renderer","mode","selectionMode","isMultiDrag","isMultiSelect","indexOf","addEventListener","isDestroyed","stockChart","onPanning","cancelEvent","isPointer","on","touchMoveEvent","mouseMove","completeSelection","calculateSelectedElements","touchStartEvent","mousedown","touchEndEvent","e","isPointMouseDown","isChartDrag","isDoubleTap","isTouch","rectPoints","dragStart","chartAxisLayoutPanel","seriesClipRect","mouseDownX","mouseDownY","removeEventListener","off","initPrivateVariables","styleId","element","id","unselected","closeIconId","draggedRectGroup","multiRectGroup","draggedRect","lassoPath","selectedDataIndexes","isSeriesMode","invokeSelection","series","visibleSeries","seriesStyles","currentMode","selectDataIndex","concatIndexes","generateStyle","unSelectedStyle","highlightMode","nonHighlightStyle","selectionStyle","index","indexes","_i","indexes_1","length","performSelection","getElementByIndex","suffix","marker","elementId","point","type","visible","getClusterElements","clusters","seriesStyle","selectedElements","_a","isRectSeries","push","document","querySelectorAll","findTrackballElements","clusterIndex","removeSelection","className","trackballElements","elements","i","parentNode","slice","i_1","removeStyles","findElements","getSeriesElements","isAlreadySelected","event","targetElem","target","highlightDataIndexes","previousSelectedEle","parentNodeId","isElement","hasAttribute","getAttribute","removeAttribute","highlightColor","highlightPattern","j","children","setAttribute","control","indexFinder","interior","addOrRemoveIndex","targetElement","split","selectionEle","blurEffect","selection","isNaN","pointElements","replace","clusterSelection","points","pointIndex","selectedPointValues","yValue","selectedPointX","regions","y","xValue","primaryXAxis","valueType","x","toLocaleString","Date","category","args","name","selectedDataValues","cancel","trigger","removeMultiSelectElements","getElementById","isAdd","pClassName","getSelectionClass","applyStyles","currentIndex","seriesCollection","toEquals","splice","chartId","legendClick","visibility","checkVisibility","visibleSeries_1","checkSelectionElements","childNodes","elementClassName","parentClassName","legendShape","selectElement","addSvgClass","removeSvgClass","classList","symbolEle","seriesClassName","legendModule","legendSettings","trim","elements_1","elements_2","first","second","checkSeriesOnly","redrawSelection","oldMode","chartRedraw","isRedrawSelection","removeSelectedElements","legendSelection","isPreSelected","isBlurEffectNeeded","seriesElements","_b","seriesElements_1","seriesElement","NaN","value","elements_3","symbolElement","ids","parseInt","calculateDragSelectedElements","dragRect","isClose","isLasso","rect","width","height","axisOffset","removeOffset","selectedSeriesValues","isDragResize","allowMultiSelection","rectGrabbing","resizing","targetIndex","rt","_loop_1","xAxisOffset_1","yAxisOffset_1","isTransposed","xAxis","yAxis","isCurrentPoint","some","region","isSelect","this_1","isPointSelect","symbolLocations","location","createCloseButton","clip","xAxisOffset","yAxisOffset","rectCollection","rectCollection_1","drawDraggingRect","cartesianLayout","border","chartArea","rectFill","themeStyle","selectionRectFill","rectStroke","selectionRectStroke","isDragMode","dragGroup","multiGroup","svgRenderer","createGroup","svgObject","appendChild","rectElement","nextSibling","setAttributes","svgElement","enableCanvas","drawRectangle","color","style","cursor","drawPath","path","closeIcon","getIndex","Number","substr","circleStroke","selectionCircleStroke","isDrag","drawCircle","direction","stroke","fill","pathElement","removeDraggedElements","isSelectedvalues","multiRectGroupElement","childElementCount","k","changeCursorStyle","resizingSelectionRect","tapped","r","resize","findResizeMode","chartSvgObject","cursorStyle","resizeEdges","resizeMode","Math","abs","min","isResize","rectelement","seriesCollection_1","seriesElements_2","getChildren","ele","object","keys","keys_1","key","draggedRectMoved","grabbedPoint","doDrawing","mouseX","mouseY","dragging","pointChecking","getDragRect","chartAreaType","undefined","_c","isDragRect","isIos","isIos7","preventDefault","insideMoving","getPath","startX","startY","endX","endY","svgRect","svgId","getBoundingClientRect","offsetX","max","left","offsetY","top","filter","elementFromPoint","getModuleName","destroy"],"sources":["C:/Users/shahj/OneDrive/Documents/GitHub/Admin Dashboard/Frontend/node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/selection.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/**\n * Selection src file\n */\nimport { Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\n * `Selection` module handles the selection for chart.\n *\n * @private\n */\nvar Selection = /** @class */ (function (_super) {\n    __extends(Selection, _super);\n    /**\n     * Constructor for selection module.\n     *\n     * @private\n     */\n    function Selection(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.isdrawRect = true;\n        _this.multiDataIndexes = [];\n        _this.pathIndex = 0;\n        _this.seriesIndex = 0;\n        _this.count = -1;\n        _this.dragRectArray = [];\n        _this.filterArray = [];\n        _this.totalSelectedPoints = [];\n        _this.chart = chart;\n        _this.renderer = chart.renderer;\n        var mode = chart.selectionMode;\n        _this.isMultiDrag = chart.isMultiSelect && (mode.indexOf('Drag') > -1);\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for selection module.\n     */\n    Selection.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed || (this.chart.stockChart && this.chart.stockChart.onPanning)) {\n            return;\n        }\n        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on(cancelEvent, this.completeSelection, this);\n        this.chart.on('click', this.calculateSelectedElements, this);\n        this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n        this.chart.on(Browser.touchEndEvent, this.completeSelection, this);\n    };\n    /**\n     * Chart mouse down\n     */\n    Selection.prototype.mousedown = function (e) {\n        var chart = this.chart;\n        if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n            return;\n        }\n        if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n            this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n        }\n    };\n    /**\n     * UnBinding events for selection module.\n     */\n    Selection.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('pointerleave' || 'mouseleave', this.completeSelection);\n        this.chart.off('click', this.calculateSelectedElements);\n        this.chart.off(Browser.touchStartEvent, this.mousedown);\n        this.chart.off(Browser.touchEndEvent, this.completeSelection);\n    };\n    /**\n     * To find private variable values\n     */\n    Selection.prototype.initPrivateVariables = function (chart) {\n        this.styleId = chart.element.id + '_ej2_chart_selection';\n        this.unselected = chart.element.id + '_ej2_deselected';\n        this.closeIconId = chart.element.id + '_ej2_drag_close';\n        this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n        this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n        this.draggedRect = chart.element.id + '_ej2_drag_rect';\n        this.lassoPath = chart.element.id + '_ej2_drag_path';\n        this.selectedDataIndexes = [];\n        this.rectPoints = null;\n        this.isSeriesMode = chart.selectionMode === 'Series';\n    };\n    /**\n     * Method to select the point and series.\n     *\n     * @returns {void}\n     */\n    Selection.prototype.invokeSelection = function (chart) {\n        this.initPrivateVariables(chart);\n        this.series = extend({}, chart.visibleSeries, null, true);\n        this.seriesStyles();\n        this.currentMode = chart.selectionMode;\n        if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n            this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n        }\n    };\n    Selection.prototype.generateStyle = function (series) {\n        if (series) {\n            if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n                this.unselected = series.unSelectedStyle || this.unselected;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightMode !== 'None') {\n                this.unselected = series.nonHighlightStyle || this.unselected;\n            }\n            return (series.selectionStyle || this.styleId + '_series_' + series.index);\n        }\n        return 'undefined';\n    };\n    /**\n     *  Method to get the selected data index\n     *\n     * @private\n     */\n    Selection.prototype.selectDataIndex = function (chart, indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n        }\n    };\n    /**\n     *  Method to get the selected index element\n     *\n     * @private\n     */\n    Selection.prototype.getElementByIndex = function (chart, index, suffix, marker) {\n        if (suffix === void 0) { suffix = ''; }\n        var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n        var series = chart.series[index.series];\n        elementId = (series.type !== 'Scatter' && series.type !== 'Bubble' && marker) ? (elementId + '_Symbol' + suffix) : elementId;\n        return [getElement(elementId), ((series.type === 'RangeArea' || series.type === 'SplineRangeArea') && series.marker.visible) ?\n                getElement(elementId + '1') : null];\n    };\n    /**\n     *  Method to get the selected cluster element\n     *\n     * @private\n     */\n    Selection.prototype.getClusterElements = function (chart, index) {\n        var clusters = [];\n        var seriesStyle;\n        var selectedElements;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (series.visible) {\n                index = new Index(series.index, index.point);\n                if (series.isRectSeries) {\n                    clusters.push(this.getElementByIndex(chart, index)[0]);\n                }\n                clusters.push(this.getElementByIndex(chart, index, '', series.marker.visible)[0]);\n                seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n                selectedElements = document.querySelectorAll('.' + seriesStyle);\n                this.findTrackballElements(selectedElements, seriesStyle);\n                var clusterIndex = series.marker.visible && series.isRectSeries ? 2 : 1;\n                if (!chart.isMultiSelect && selectedElements.length > 0 &&\n                    selectedElements[0].id !== clusters[clusters.length - clusterIndex].id) {\n                    this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n                }\n            }\n        }\n        return clusters;\n    };\n    /**\n     *  Method to get trackball elements\n     *\n     * @private\n     */\n    Selection.prototype.findTrackballElements = function (selectedElements, className) {\n        var trackballElements;\n        var elements;\n        for (var i = 0; i < selectedElements.length; i++) {\n            if (!isNullOrUndefined(selectedElements[i])) {\n                trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ?\n                    [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n                if (trackballElements.length > 0) {\n                    elements = [];\n                    for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n                        if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n                            elements.push(trackballElements[i_1]);\n                        }\n                    }\n                    this.removeStyles(elements);\n                }\n            }\n        }\n    };\n    /**\n     *  Method to get the selected element\n     *\n     * @private\n     */\n    Selection.prototype.findElements = function (chart, series, index, suffix, marker) {\n        if (suffix === void 0) { suffix = ''; }\n        if (this.isSeriesMode) {\n            return this.getSeriesElements(series);\n        }\n        else if (this.currentMode === 'Cluster') {\n            return this.getClusterElements(chart, index);\n        }\n        else {\n            return this.getElementByIndex(chart, index, suffix, marker);\n        }\n    };\n    /**\n     * To find the selected element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.isAlreadySelected = function (event) {\n        var targetElem = event.target;\n        if (event.type === 'click') {\n            this.currentMode = this.chart.selectionMode;\n            this.styleId = this.chart.element.id + '_ej2_chart_selection';\n        }\n        else if (event.type === 'mousemove' || event.type === 'pointermove') {\n            this.currentMode = this.chart.highlightMode;\n            this.highlightDataIndexes = [];\n            this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n        }\n        if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n            if (event.type === 'click') {\n                return false;\n            }\n        }\n        if ((this.chart.highlightMode !== 'None' && this.previousSelectedEle && this.previousSelectedEle[0])) {\n            var parentNodeId = targetElem.parentNode.id;\n            var isElement = void 0;\n            if (targetElem.parentNode) {\n                isElement = (parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0) ? true : false;\n            }\n            for (var i = 0; i < this.previousSelectedEle.length; i++) {\n                if (this.previousSelectedEle[i].hasAttribute('class')) {\n                    if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 &&\n                        (isElement || event.type === 'click')) {\n                        this.previousSelectedEle[i].removeAttribute('class');\n                        if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n                            if (this.previousSelectedEle[i].id.indexOf('Group') > 0) {\n                                for (var j = 0; j < this.previousSelectedEle[i].children.length; j++) {\n                                    this.previousSelectedEle[i].children[j].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                                }\n                            }\n                            else {\n                                this.previousSelectedEle[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                            }\n                        }\n                        this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n                    }\n                    else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n                        this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    /**\n     * To find the selected element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.calculateSelectedElements = function (event) {\n        if (isNullOrUndefined(event.target)) {\n            return;\n        }\n        var targetElement = event.target;\n        if ((this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None') ||\n            targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n            return;\n        }\n        if (event.type === 'mousemove' || event.type === 'pointermove') {\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') &&\n                (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 ||\n                    targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n                return;\n            }\n        }\n        this.isAlreadySelected(event);\n        if (targetElement.id.indexOf('_Series_') > -1) {\n            var element = void 0;\n            if (targetElement.id.indexOf('_Trackball_1') > -1) {\n                element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n                element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n            }\n            else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n                return null;\n            }\n            this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n        }\n    };\n    /**\n     *  Method to perform the selection\n     *\n     * @private\n     */\n    Selection.prototype.performSelection = function (index, chart, element) {\n        this.isSeriesMode = this.currentMode === 'Series';\n        if (chart.series[index.series].type === 'BoxAndWhisker' && element &&\n            element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n            element = element.parentNode;\n        }\n        if (chart.series[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element &&\n            (element.id === this.chart.element.id + '_Series_' + index.series)) {\n            var className = this.generateStyle(chart.series[index.series]);\n            var selectionEle = document.querySelectorAll('.' + className);\n            this.findTrackballElements(selectionEle, className);\n            this.blurEffect(chart.element.id, chart.visibleSeries);\n        }\n        switch (this.currentMode) {\n            case 'Series':\n                this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n                this.selectionComplete(chart, index, this.currentMode);\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n                break;\n            case 'Point':\n                if (!isNaN(index.point) && element) {\n                    var pointElements = [];\n                    pointElements.push(element);\n                    if (pointElements[0] !== null && chart.series[index.series].marker.visible &&\n                        (chart.series[index.series].type.indexOf('Column') !== -1 || chart.series[index.series].type.indexOf('Bar') !== -1)) {\n                        if (!(element.id.indexOf('_Symbol') !== -1) && getElement(element.id + '_Symbol')) {\n                            pointElements.push(getElement(element.id + '_Symbol'));\n                        }\n                        else if (element.id.indexOf('_Symbol') !== -1 && getElement(element.id.replace('_Symbol', ''))) {\n                            pointElements.push(getElement(element.id.replace('_Symbol', '')));\n                        }\n                    }\n                    this.selection(chart, index, pointElements);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n                break;\n            case 'Cluster':\n                if (!isNaN(index.point)) {\n                    this.clusterSelection(chart, index);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries);\n                }\n                break;\n        }\n    };\n    /**\n     *  Method to get the selected data index\n     *\n     * @private\n     */\n    Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n        var points;\n        var pointIndex;\n        var seriesIndex;\n        var selectedPointValues = [];\n        var yValue;\n        var selectedPointX;\n        if (selectionMode === 'Cluster') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                        pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n                        seriesIndex = series.index;\n                        points = series.points;\n                        if (!isNaN(pointIndex)) {\n                            yValue = (series.type !== 'RangeArea' || 'SplineRangeArea') ? points[pointIndex].yValue :\n                                points[pointIndex].regions[0].y;\n                            selectedPointX = points[pointIndex].xValue;\n                            if (chart.primaryXAxis.valueType === 'Category') {\n                                selectedPointX = points[pointIndex].x.toLocaleString();\n                            }\n                            else if (chart.primaryXAxis.valueType === 'DateTime') {\n                                selectedPointX = new Date(points[pointIndex].xValue);\n                            }\n                            if (series.category !== 'Indicator') {\n                                selectedPointValues.push({\n                                    x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                                    pointIndex: pointIndex\n                                });\n                            }\n                            if (series.type === 'RangeArea' || series.type === 'SplineRangeArea') {\n                                selectedPointValues.push({\n                                    x: selectedPointX, y: points[pointIndex].regions[0].y,\n                                    seriesIndex: seriesIndex, pointIndex: pointIndex\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if (selectionMode === 'Series') {\n            if (chart.isMultiSelect) {\n                for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                    seriesIndex = this.selectedDataIndexes[i].series;\n                    selectedPointValues.push({\n                        seriesIndex: seriesIndex\n                    });\n                }\n            }\n            else {\n                seriesIndex = (this.selectedDataIndexes.length > 0) ? this.selectedDataIndexes[0].series : 0;\n                selectedPointValues.push({\n                    seriesIndex: seriesIndex\n                });\n            }\n        }\n        else if (selectionMode === 'Point') {\n            for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                pointIndex = this.selectedDataIndexes[i].point;\n                seriesIndex = this.selectedDataIndexes[i].series;\n                var series = chart.series[seriesIndex];\n                points = series.points;\n                if (!isNaN(pointIndex)) {\n                    selectedPointX = points[pointIndex].xValue;\n                    yValue = (series.type !== 'RangeArea' || 'SplineRangeArea') ? points[pointIndex].yValue :\n                        points[pointIndex].regions[0].y;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[pointIndex].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[pointIndex].xValue);\n                    }\n                    selectedPointValues.push({\n                        x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                        pointIndex: pointIndex\n                    });\n                }\n            }\n        }\n        var args = {\n            name: selectionComplete,\n            selectedDataValues: selectedPointValues,\n            cancel: false\n        };\n        chart.trigger(selectionComplete, args);\n    };\n    /**\n     *  Method to perform selection\n     *\n     * @private\n     */\n    Selection.prototype.selection = function (chart, index, selectedElements) {\n        if (!(this.currentMode === 'Lasso')) {\n            if (!chart.isMultiSelect && (this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 &&\n                chart.selectionMode !== 'None')) {\n                this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n            }\n        }\n        if (!isNullOrUndefined(selectedElements[0])) {\n            if (chart.series[index.series].isRectSeries) {\n                if (selectedElements[0].id) {\n                    if (document.getElementById(selectedElements[0].id + '_Symbol')) {\n                        selectedElements.push(getElement(selectedElements[0].id + '_Symbol'));\n                    }\n                    else if (selectedElements[0].id.indexOf('SeriesGroup') !== -1) {\n                        if (document.getElementById(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup'))) {\n                            selectedElements.push(getElement(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup')));\n                        }\n                    }\n                }\n            }\n            var isAdd = void 0;\n            var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n            var pClassName = selectedElements[0].parentNode &&\n                (selectedElements[0].parentNode.getAttribute('class') || '');\n            if (className !== '' && this.currentMode !== 'Cluster') {\n                this.findTrackballElements(selectedElements, className);\n            }\n            if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles(selectedElements);\n            }\n            else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles([selectedElements[0].parentNode]);\n            }\n            else {\n                this.previousSelectedEle = chart.highlightMode !== 'None' ? selectedElements : [];\n                this.applyStyles(selectedElements);\n                isAdd = true;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && chart.highlightMode !== 'None') {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n            }\n        }\n    };\n    /**\n     *  Method to get the cluster selection element\n     *\n     * @private\n     */\n    Selection.prototype.clusterSelection = function (chart, index) {\n        this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n    };\n    /**\n     * Method to remove the multi selected elements\n     *\n     * @private\n     */\n    Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n        var series;\n        for (var i = 0; i < index.length; i++) {\n            series = seriesCollection[index[i].series];\n            if ((this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode)) ||\n                (this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false)) ||\n                (!this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false))) {\n                this.removeStyles(this.findElements(chart, series, index[i], '', false));\n                if (series.marker.visible) {\n                    this.removeStyles(this.findElements(chart, series, index[i], '', true));\n                }\n                index.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    /**\n     * Method to remove the selection\n     *\n     * @private\n     */\n    Selection.prototype.blurEffect = function (chartId, visibleSeries, legendClick) {\n        if (legendClick === void 0) { legendClick = false; }\n        var visibility = (this.checkVisibility(this.highlightDataIndexes) ||\n            this.checkVisibility(this.selectedDataIndexes)); // legend click scenario\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            if (series.visible) {\n                this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n                if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n                    this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, legendClick, series.index);\n                }\n            }\n        }\n    };\n    /**\n     * Method to add the add/remove class to element\n     *\n     * @private\n     */\n    Selection.prototype.checkSelectionElements = function (element, className, visibility, legendClick, series) {\n        var children = (this.isSeriesMode ? [element] : element.childNodes);\n        if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n            children = element.childNodes;\n        }\n        var elementClassName;\n        var parentClassName;\n        var legendShape;\n        var selectElement = element;\n        for (var i = 0; i < children.length; i++) {\n            elementClassName = children[i].getAttribute('class') || '';\n            parentClassName = children[i].parentNode.getAttribute('class') || '';\n            if (this.chart.selectionMode !== 'None' && this.chart.highlightMode !== 'None') {\n                className = elementClassName.indexOf('selection') > 0 ||\n                    elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n                className = (parentClassName.indexOf('selection') > 0 ||\n                    parentClassName.indexOf('highlight') > 0) ? parentClassName : className;\n            }\n            if (elementClassName.indexOf(className) === -1 &&\n                parentClassName.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(children[i], this.unselected);\n            }\n            else {\n                selectElement = children[i];\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n            }\n            if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n                this.addSvgClass(children[i], className);\n            }\n        }\n        if (element.id.indexOf('Symbol') > -1) {\n            if ((element.querySelectorAll('.' + className)[0]) && element.querySelectorAll('.' + className)[0].getAttribute('class')\n                === className) {\n                var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n                var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n                if (seriesClassName.indexOf(this.unselected) > -1) {\n                    this.removeSvgClass(symbolEle, this.unselected);\n                }\n            }\n        }\n        if (this.control.legendModule && this.control.legendSettings.visible) {\n            legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n            if (legendShape) {\n                if (legendShape.hasAttribute('class')) {\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n                    if (!isNullOrUndefined(this.chart.highlightColor && this.chart.highlightColor !== '')) {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                }\n                elementClassName = selectElement.getAttribute('class') || '';\n                parentClassName = selectElement.parentNode.getAttribute('class') || '';\n                if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n                    this.addSvgClass(legendShape, this.unselected);\n                    this.removeSvgClass(legendShape, className);\n                    if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                }\n                else {\n                    this.removeSvgClass(legendShape, this.unselected);\n                    if (!isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== '') {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                    if ((elementClassName === '' && parentClassName === '') || elementClassName.trim() === 'EJ2-Trackball') {\n                        this.removeSvgClass(legendShape, className);\n                    }\n                    else {\n                        this.addSvgClass(legendShape, className);\n                        if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n                            legendShape.setAttribute('stroke', this.chart.highlightColor);\n                            if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\n                                legendShape.setAttribute('fill', this.chart.highlightColor);\n                            }\n                        }\n                    }\n                }\n                if (legendClick && parentClassName.indexOf(className) > -1) {\n                    this.addSvgClass(legendShape, className);\n                }\n            }\n        }\n    };\n    /**\n     *  Method to apply the styles\n     *\n     * @private\n     */\n    Selection.prototype.applyStyles = function (elements) {\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            if (element) {\n                this.removeSvgClass(element.parentNode, this.unselected);\n                this.removeSvgClass(element, this.unselected);\n                this.addSvgClass(element, this.getSelectionClass(element.id));\n                if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n                    if (element.id.indexOf('Group') > 0) {\n                        for (var i = 0; i < element.children.length; i++) {\n                            element.children[i].setAttribute('fill', this.chart.highlightColor);\n                        }\n                    }\n                    else {\n                        element.setAttribute('fill', this.chart.highlightColor);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     *  Method to get the selection class\n     *\n     * @private\n     */\n    Selection.prototype.getSelectionClass = function (id) {\n        return this.generateStyle(this.control.series[this.indexFinder(id).series]);\n    };\n    /**\n     *  Method to remove styles\n     *\n     * @private\n     */\n    Selection.prototype.removeStyles = function (elements) {\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n            var element = elements_2[_i];\n            if (element) {\n                this.removeSvgClass(element, this.getSelectionClass(element.id));\n                if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n                    if (element.id.indexOf('Group') > 0) {\n                        for (var i = 0; i < element.children.length; i++) {\n                            element.children[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n                        }\n                    }\n                    else {\n                        element.setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     *  Method to remove the selected data index\n     *\n     * @private\n     */\n    Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n        for (var i = 0; i < indexes.length; i++) {\n            if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n                indexes.splice(i, 1);\n                i--;\n            }\n        }\n        if (isAdd) {\n            indexes.push(index);\n        }\n    };\n    /**\n     *  Method to get the equal index\n     *\n     * @private\n     */\n    Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n        return ((first.series === second.series || (this.currentMode === 'Cluster' && !checkSeriesOnly))\n            && (checkSeriesOnly || (first.point === second.point)));\n    };\n    /**\n     * To redraw the selected points.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n        this.isSeriesMode = oldMode === 'Series';\n        if (!isNullOrUndefined(oldMode)) {\n            if (oldMode.indexOf('Drag') !== -1 || oldMode === 'Lasso' || chartRedraw) {\n                chart.isRedrawSelection = false;\n            }\n            else {\n                chart.isRedrawSelection = true;\n            }\n        }\n        var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n        var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n            this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n            selectedDataIndexes = highlightDataIndexes;\n        }\n        else {\n            this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        this.selectDataIndex(chart, selectedDataIndexes);\n    };\n    /** @private */\n    Selection.prototype.legendSelection = function (chart, series, event) {\n        var targetElement = event.target;\n        if (event.type === 'mousemove') {\n            if (event.target.id.indexOf('text') > 1) {\n                targetElement = getElement(event.target.id.replace('text', 'shape'));\n            }\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            this.currentMode = this.chart.highlightMode;\n        }\n        var isPreSelected = this.isAlreadySelected(event);\n        if (isPreSelected) {\n            var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n            var selectedElements = (document.querySelectorAll('.' + seriesStyle));\n            this.isSeriesMode = this.currentMode === 'Series';\n            var isBlurEffectNeeded = true;\n            if (selectedElements.length > 0) {\n                this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n            }\n            else {\n                for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                    var element = _a[_i];\n                    if (element.index !== series && !chart.isMultiSelect) {\n                        seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n                        selectedElements = document.querySelectorAll('.' + seriesStyle);\n                        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n                    }\n                }\n                var seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n                for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n                    var seriesElement = seriesElements_1[_b];\n                    if (isNullOrUndefined(seriesElement)) {\n                        return;\n                    }\n                    this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n                }\n                this.isSeriesMode = true;\n                this.selection(chart, new Index(series, NaN), seriesElements);\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries, true);\n            }\n        }\n    };\n    Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n        if (selectedElements.length > 0) {\n            var elements = [];\n            for (var i = 0; i < selectedElements.length; i++) {\n                elements.push(selectedElements[i]);\n            }\n            this.removeStyles(elements);\n            this.isSeriesMode = true;\n            this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var value = _a[_i];\n                seriesStyle = this.generateStyle(value);\n                if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n                    for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n                        var element = elements_3[_b];\n                        this.checkSelectionElements(element, seriesStyle, true, true, series);\n                    }\n                    isBlurEffectNeeded = false;\n                    break;\n                }\n            }\n            if (isBlurEffectNeeded) {\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n            }\n        }\n    };\n    /** @private */\n    Selection.prototype.getSeriesElements = function (series) {\n        var seriesElements = [series.seriesElement];\n        if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n            seriesElements.push(series.symbolElement);\n        }\n        else if (series.marker.visible && series.isRectSeries) {\n            seriesElements.push(series.symbolElement);\n        }\n        return seriesElements;\n    };\n    /** @private */\n    Selection.prototype.indexFinder = function (id) {\n        var ids = ['NaN', 'NaN'];\n        if (id.indexOf('SeriesGroup') > -1) {\n            ids = id.split('SeriesGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('SymbolGroup') > -1) {\n            ids = id.split('SymbolGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('_Point_') > -1) {\n            ids = id.split('_Series_')[1].split('_Point_');\n        }\n        else if (id.indexOf('_Series_') > -1) {\n            ids[0] = id.split('_Series_')[1];\n        }\n        else if (id.indexOf('_chart_legend_shape_') > -1) {\n            ids = id.split('_chart_legend_shape_');\n            ids[0] = ids[1];\n        }\n        return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n    };\n    /**\n     * Drag selection that returns the selected data.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        var isLasso = chart.selectionMode === 'Lasso';\n        var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n        var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n        this.removeOffset(rect, axisOffset);\n        var points;\n        var index;\n        var selectedPointValues = [];\n        var selectedSeriesValues = [];\n        this.isSeriesMode = false;\n        var isDragResize = (chart.allowMultiSelection) && (this.rectGrabbing || this.resizing);\n        this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] =\n            new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n        if (dragRect.width && dragRect.height && !isClose) {\n            var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n            this.removeOffset(rt, axisOffset);\n            this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n        }\n        var _loop_1 = function (series) {\n            if (series.visible) {\n                points = series.points;\n                selectedPointValues = [];\n                var xAxisOffset_1;\n                var yAxisOffset_1;\n                if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) &&\n                    !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n                    xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n                    yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n                }\n                else {\n                    xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n                    yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n                }\n                for (var j = 0; j < points.length; j++) {\n                    var yValue = (series.type !== 'RangeArea' || 'SplineRangeArea') ? points[j].yValue :\n                        points[j].regions[0].y;\n                    var isCurrentPoint = void 0;\n                    var selectedPointX = points[j].xValue;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[j].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[j].xValue);\n                    }\n                    if (series.type === 'BoxAndWhisker') {\n                        isCurrentPoint = points[j].regions.some(function (region) {\n                            return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n                        });\n                    }\n                    else {\n                        if (chart.selectionMode === 'Lasso') {\n                            isCurrentPoint = points[j].isSelect;\n                        }\n                        else {\n                            isCurrentPoint = (chart.allowMultiSelection) ?\n                                this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray) :\n                                points[j].symbolLocations.some(function (location) {\n                                    return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n                                });\n                        }\n                    }\n                    if (isCurrentPoint && series.category !== 'Indicator') {\n                        index = new Index(series.index, points[j].index);\n                        this_1.selection(chart, index, this_1.findElements(chart, series, index, '', !series.isRectSeries ? series.marker.visible : false));\n                        selectedPointValues.push({ x: selectedPointX, y: yValue });\n                    }\n                    if (isCurrentPoint && (series.type === 'RangeArea' || series.type === 'SplineRangeArea')) {\n                        selectedPointValues.push({ x: selectedPointX, y: points[j].regions[0].y });\n                    }\n                }\n                selectedSeriesValues.push(selectedPointValues);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            _loop_1(series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        var x = isLasso ? chart.mouseDownX : (dragRect.x + dragRect.width);\n        var y = isLasso ? chart.mouseDownY : dragRect.y;\n        if (!isClose) {\n            this.createCloseButton(x, y);\n        }\n        var args = {\n            name: dragComplete,\n            selectedDataValues: selectedSeriesValues,\n            cancel: false\n        };\n        chart.trigger(dragComplete, args);\n    };\n    Selection.prototype.removeOffset = function (rect, clip) {\n        rect.x -= clip.x;\n        rect.y -= clip.y;\n    };\n    Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection) {\n        var location = points.symbolLocations[0];\n        for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n            var rect = rectCollection_1[_i];\n            if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Method to draw dragging rect.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.drawDraggingRect = function (chart, dragRect, target) {\n        var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n        var border = chart.chartArea.border.width;\n        var rectFill = chart.themeStyle.selectionRectFill;\n        var rectStroke = chart.themeStyle.selectionRectStroke;\n        var isLasso = chart.selectionMode === 'Lasso';\n        if (this.isdrawRect) {\n            cartesianLayout.x = cartesianLayout.x - border / 2;\n            cartesianLayout.y = cartesianLayout.y - border / 2;\n            cartesianLayout.width = cartesianLayout.width + border;\n            cartesianLayout.height = cartesianLayout.height + border;\n            this.isdrawRect = false;\n        }\n        switch (chart.selectionMode) {\n            case 'DragX':\n                dragRect.y = cartesianLayout.y;\n                dragRect.height = cartesianLayout.height;\n                break;\n            case 'DragY':\n                dragRect.x = cartesianLayout.x;\n                dragRect.width = cartesianLayout.width;\n                break;\n        }\n        if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n            return null;\n        }\n        var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n        if ((chart.allowMultiSelection) && isDragMode) {\n            var element = void 0;\n            var dragGroup = void 0;\n            var multiGroup = getElement(this.multiRectGroup);\n            if (!multiGroup) {\n                multiGroup = chart.svgRenderer.createGroup({ id: this.multiRectGroup });\n                chart.svgObject.appendChild(multiGroup);\n            }\n            if (this.rectGrabbing || this.resizing) {\n                var rectElement = void 0;\n                rectElement = getElement(this.draggedRect + this.targetIndex);\n                if (rectElement.nextSibling) {\n                    remove(rectElement.nextSibling);\n                }\n                this.setAttributes(rectElement, dragRect);\n            }\n            else if (!getElement(this.draggedRectGroup + this.count)) {\n                dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup + this.count });\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n            }\n            if (!(chart.selectionMode === 'Lasso')) {\n                element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, { color: rectStroke, width: 1 }, 1, dragRect));\n                element.style.cursor = \"move\";\n            }\n            else {\n                element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n            }\n            if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n                getElement(this.draggedRectGroup + this.count).appendChild(element);\n            }\n            else if (!this.rectGrabbing && !this.resizing) {\n                dragGroup.appendChild(element);\n            }\n        }\n        else {\n            var element = isLasso ?\n                getElement(this.lassoPath) : getElement(this.draggedRect);\n            if (this.closeIcon) {\n                removeElement(this.closeIconId);\n            }\n            if (element) {\n                if (isLasso) {\n                    element.setAttribute('d', this.path);\n                }\n                else {\n                    this.setAttributes(element, dragRect);\n                }\n            }\n            else {\n                var dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup });\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n                if (!(chart.selectionMode === 'Lasso')) {\n                    element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, { color: rectStroke, width: 1 }, 1, dragRect));\n                }\n                else {\n                    element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n                }\n                dragGroup.appendChild(element);\n            }\n        }\n    };\n    /**\n     * To get drag selected group element index from its id\n     *\n     * @param {string} id element id\n     */\n    Selection.prototype.getIndex = function (id) {\n        var i;\n        for (i = id.length - 1; i > 0; i--) {\n            var x = Number(id[i]);\n            if (!isNaN(x)) {\n                continue;\n            }\n            else {\n                break;\n            }\n        }\n        var index = +id.substr(i + 1, id.length - 1);\n        return index;\n    };\n    Selection.prototype.createCloseButton = function (x, y) {\n        var isMultiDrag = this.chart.allowMultiSelection;\n        var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n        var isDrag = this.rectGrabbing || this.resizing;\n        var closeIcon = this.chart.svgRenderer.createGroup({\n            id: this.closeIconId + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''),\n            style: 'cursor:pointer; visibility: visible;'\n        });\n        closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), '#FFFFFF', { color: circleStroke, width: 1 }, 1, x, y, 10)));\n        var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) +\n            ' L ' + (x + 4) + ' ' + (y - 4);\n        closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n            id: this.closeIconId + '_cross' +\n                (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), d: direction,\n            stroke: circleStroke, 'stroke-width': 2, fill: circleStroke\n        }));\n        this.closeIcon = closeIcon;\n        var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''));\n        if (pathElement) {\n            pathElement.appendChild(closeIcon);\n        }\n    };\n    /**\n     * Method to remove dragged element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.removeDraggedElements = function (chart, event) {\n        if ((event.target.id.indexOf(this.closeIconId) > -1) && (event.type.indexOf('move') === -1)) {\n            var isSelectedvalues = true;\n            if ((chart.allowMultiSelection)) {\n                var index = this.getIndex(event.target.id);\n                var multiRectGroupElement = getElement(this.multiRectGroup);\n                remove(getElement(this.draggedRectGroup + index));\n                this.dragRectArray[index] = null;\n                this.filterArray[index] = null;\n                this.totalSelectedPoints[index] = null;\n                if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n                    removeElement(multiRectGroupElement);\n                    this.dragRectArray = [];\n                    this.filterArray = [];\n                    this.totalSelectedPoints = [];\n                }\n                if (this.currentMode === 'Lasso') {\n                    if (this.multiDataIndexes[index] != null) {\n                        for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n                            this.multiDataIndexes[index][i].isSelect = false;\n                        }\n                    }\n                    this.multiDataIndexes[index] = null;\n                    for (var j = 0; j < this.multiDataIndexes.length; j++) {\n                        if (this.multiDataIndexes[j] != null) {\n                            isSelectedvalues = false;\n                            for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                                this.multiDataIndexes[j][k].isSelect = true;\n                            }\n                        }\n                    }\n                    this.calculateDragSelectedElements(chart, this.dragRect, true);\n                }\n                else if (this.filterArray.length) {\n                    for (var i = 0; i < this.filterArray.length; i++) {\n                        if (this.filterArray[i]) {\n                            isSelectedvalues = false;\n                            this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n                        }\n                    }\n                }\n                else {\n                    this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n                }\n            }\n            else {\n                remove(getElement(this.draggedRectGroup));\n                this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n            }\n            this.blurEffect(chart.element.id, chart.visibleSeries);\n            this.changeCursorStyle(false, chart.svgObject, 'auto');\n            if (!(chart.allowMultiSelection) || isSelectedvalues) {\n                this.rectPoints = null;\n            }\n        }\n    };\n    /**\n     * Method to resize the drag rect.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n        var rect;\n        if (((chart.allowMultiSelection) && (target.id.indexOf('_ej2_drag_rect') > -1)) ||\n            this.dragRectArray[this.targetIndex]) {\n            if (target.id.indexOf('_ej2_drag_rect') > -1) {\n                this.targetIndex = this.getIndex(target.id);\n            }\n            var r = this.dragRectArray[this.targetIndex];\n            rect = new Rect(r.x, r.y, r.width, r.height);\n        }\n        if (!(chart.allowMultiSelection)) {\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n        }\n        if (rect) {\n            var resize = this.findResizeMode(chart.svgObject, rect, location);\n            if (this.resizing) {\n                rect = getDraggedRectLocation(rect.x, rect.y, (rect.x + rect.width), (rect.y + rect.height), chart.chartAxisLayoutPanel.seriesClipRect);\n                this.drawDraggingRect(chart, rect);\n                this.dragRect = rect;\n            }\n            if (tapped) {\n                this.resizing = resize;\n            }\n        }\n        else {\n            return;\n        }\n    };\n    Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n        var cursorStyle = 'se-resize';\n        var resize = false;\n        if (!this.resizing) {\n            var resizeEdges = [new Rect(rect.x, (rect.y), rect.width - 5, 5),\n                new Rect((rect.x), rect.y, 5, rect.height),\n                new Rect(rect.x, (rect.y + rect.height - 5), rect.width - 5, 5),\n                new Rect((rect.x + rect.width - 5), rect.y + 5, 5, rect.height - 15),\n                new Rect((rect.x + rect.width - 10), (rect.y + rect.height - 10), 10, 10)]; //corner\n            for (var i = 0; i < resizeEdges.length; i++) {\n                if (withInBounds(location.x, location.y, resizeEdges[i])) {\n                    cursorStyle = (i === 4) ? cursorStyle : (i % 2 === 0) ? 'ns-resize' : 'ew-resize';\n                    resize = true;\n                    this.resizeMode = i;\n                    break;\n                }\n            }\n        }\n        else {\n            var x = rect.x;\n            var y = rect.y;\n            var width = (location.x - x);\n            var height = (location.y - y);\n            switch (this.resizeMode) {\n                case 0:\n                    height = Math.abs((rect.height + rect.y) - location.y);\n                    rect.y = Math.min((rect.height + rect.y), location.y);\n                    rect.height = height;\n                    break;\n                case 1:\n                    width = Math.abs((rect.width + rect.x) - location.x);\n                    rect.x = Math.min((rect.width + rect.x), location.x);\n                    rect.width = width;\n                    break;\n                case 2:\n                    rect.height = Math.abs(height);\n                    rect.y = Math.min(location.y, y);\n                    break;\n                case 3:\n                    rect.width = Math.abs(width);\n                    rect.x = Math.min(location.x, x);\n                    break;\n                case 4:\n                    rect.width = Math.abs(width);\n                    rect.height = Math.abs(height);\n                    rect.x = Math.min(location.x, x);\n                    rect.y = Math.min(location.y, y);\n                    break;\n            }\n        }\n        if (this.currentMode !== 'Lasso') {\n            this.changeCursorStyle(resize, getElement((this.chart.allowMultiSelection) ? this.draggedRect +\n                this.targetIndex : this.draggedRect), cursorStyle);\n        }\n        this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n        return resize;\n    };\n    Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n        cursorStyle = isResize ? cursorStyle : (this.control.svgObject === rectelement) ? 'auto' : 'move';\n        if (rectelement) {\n            rectelement.style.cursor = cursorStyle;\n        }\n    };\n    Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n        index = chart.isRedrawSelection ? index : index.splice(0, index.length); // No need to remove selected indexes while redrawing\n        var seriesElements;\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            seriesElements = this.getSeriesElements(series);\n            this.removeStyles(seriesElements);\n            for (var _a = 0, seriesElements_2 = seriesElements; _a < seriesElements_2.length; _a++) {\n                var seriesElement = seriesElements_2[_a];\n                this.removeStyles(this.getChildren(seriesElement));\n            }\n        }\n    };\n    Selection.prototype.setAttributes = function (ele, object) {\n        var keys = Object.keys(object);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            ele.setAttribute(key, object[key]);\n        }\n    };\n    /**\n     * Method to move the dragged rect.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing, target) {\n        var rect;\n        if ((this.resizing || this.rectGrabbing) && (chart.allowMultiSelection)) {\n            var r = this.dragRectArray[this.targetIndex];\n            rect = new Rect(r.x, r.y, r.width, r.height);\n        }\n        else {\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n        }\n        rect.x -= (grabbedPoint.x - chart.mouseX);\n        rect.y -= (grabbedPoint.y - chart.mouseY);\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n        if (doDrawing) {\n            this.drawDraggingRect(chart, rect, target);\n        }\n        else {\n            this.calculateDragSelectedElements(chart, rect);\n        }\n    };\n    /**\n     * To complete the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.completeSelection = function (e) {\n        var chart = this.chart;\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        this.currentMode = chart.selectionMode;\n        if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n            this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n        else if (!(chart.allowMultiSelection) && this.rectGrabbing &&\n            this.rectPoints.width && this.rectPoints.height) {\n            this.draggedRectMoved(chart, this.dragRect);\n        }\n        else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n            this.draggedRectMoved(chart, this.dragRect);\n        }\n        if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n            if (this.path.indexOf('L') !== -1) {\n                if (!(chart.allowMultiSelection)) {\n                    getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n                    this.pointChecking(getElement(this.lassoPath));\n                }\n                else if (getElement(this.lassoPath + this.count)) {\n                    getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n                    this.pointChecking(getElement(this.lassoPath + this.count));\n                }\n                if (this.dragging || this.resizing) {\n                    this.calculateDragSelectedElements(chart, this.dragRect);\n                }\n            }\n        }\n        this.dragging = false;\n        this.rectGrabbing = false;\n        this.resizing = false;\n        this.removeDraggedElements(chart, e);\n    };\n    Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n        return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n    };\n    /** @private */\n    Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n        var mode = chart.selectionMode;\n        this.currentMode = chart.selectionMode;\n        this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) &&\n            chart.chartAreaType !== 'PolarRadar';\n        var target = event.target;\n        this.path = undefined;\n        if (this.dragging) {\n            this.count = getElement(this.multiRectGroup) ? (this.count + 1) : 0;\n            this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n            if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > (seriesClipRect.x + seriesClipRect.width) ||\n                chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > (seriesClipRect.y + seriesClipRect.height)) {\n                this.dragging = false;\n            }\n        }\n        if (mode === 'Lasso') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n                        var point = _c[_b];\n                        if (!(chart.allowMultiSelection)) {\n                            point.isSelect = false;\n                        }\n                    }\n                }\n            }\n        }\n        if (!(mode === 'Lasso')) {\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\n                this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n                this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n                this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n            }\n            if ((chart.allowMultiSelection)) {\n                var index = this.getIndex(target.id);\n                this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n                if (this.dragRectArray.length && this.isDragRect(target.id)) {\n                    this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n                    this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n                }\n            }\n        }\n    };\n    Selection.prototype.isDragRect = function (id) {\n        return id.indexOf('_ej2_drag_rect') > -1;\n    };\n    /** @private */\n    Selection.prototype.mouseMove = function (event) {\n        var chart = this.chart;\n        var target = event.target;\n        if (chart.highlightMode !== 'None') {\n            if (!isNullOrUndefined(target)) {\n                if (event.target.id.indexOf('text') > 1) {\n                    target = getElement(event.target.id.replace('text', 'shape'));\n                }\n                if ((target).hasAttribute('class') && ((target).getAttribute('class').indexOf('highlight') > -1 ||\n                    target.getAttribute('class').indexOf('selection') > -1)) {\n                    return;\n                }\n                this.calculateSelectedElements(event);\n                return;\n            }\n        }\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        if (event.type === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n            event.preventDefault();\n        }\n        var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n        if (insideMoving) {\n            if (this.rectGrabbing && !this.resizing) {\n                this.draggedRectMoved(chart, this.dragRect, true, target);\n            }\n            else if (this.dragging && !this.resizing) {\n                if (chart.selectionMode === 'Lasso') {\n                    this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n                    this.drawDraggingRect(chart, this.dragRect, target);\n                }\n                else {\n                    this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n                    this.drawDraggingRect(chart, this.dragRect, target);\n                }\n            }\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n            }\n            else if (((chart.allowMultiSelection) && !this.dragging) || this.resizing) {\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n            }\n        }\n        else {\n            this.completeSelection(event);\n        }\n    };\n    Selection.prototype.getPath = function (startX, startY, endX, endY) {\n        if (this.dragging) {\n            if (this.path) {\n                this.path = this.path + ' L' + endX + ' ' + endY;\n            }\n            else {\n                this.path = 'M ' + startX + ' ' + startY;\n            }\n        }\n    };\n    Selection.prototype.pointChecking = function (path) {\n        var _this = this;\n        var chart = this.chart;\n        var element;\n        var svgRect = getElement(chart.svgId).getBoundingClientRect();\n        var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n        var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n        this.multiDataIndexes[this.count] = [];\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            series.points.filter(function (point) {\n                // To check whether the point have symbol location value or not.\n                if (point.symbolLocations && point.symbolLocations.length) {\n                    element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n                }\n                if (element === path) {\n                    point.isSelect = true;\n                    if ((_this.chart.allowMultiSelection) && _this.currentMode === 'Lasso') {\n                        _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n                        _this.seriesIndex++;\n                    }\n                }\n                else if (!(chart.allowMultiSelection)) {\n                    point.isSelect = false;\n                }\n            });\n        }\n        this.seriesIndex = 0;\n    };\n    /**\n     * Get module name.\n     *\n     * @private\n     */\n    Selection.prototype.getModuleName = function () {\n        return 'Selection';\n    };\n    /**\n     * To destroy the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.destroy = function () {\n        this.removeEventListener();\n        // Destroy method performed here\n    };\n    return Selection;\n}(BaseSelection));\nexport { Selection };\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;MAAEC,SAAS,EAAE;IAAb,aAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;MAAED,CAAC,CAACI,SAAF,GAAcH,CAAd;IAAkB,CAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;MAAE,KAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IAAc,CAF9E;;IAGA,OAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;EACH,CALD;;EAMA,OAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;IACnBF,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;IACA,SAASO,EAAT,GAAc;MAAE,KAAKC,WAAL,GAAmBT,CAAnB;IAAuB;;IACvCA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;EACH,CAJD;AAKH,CAZ2C,EAA5C;AAaA;;AACA;;AACA;;AACA;;AACA;;AACA;AACA;AACA;;;AACA,SAASI,OAAT,QAAwB,sBAAxB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,MAAT,EAAiBC,iBAAjB,QAA0C,sBAA1C;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,YAApC,EAAkDC,YAAlD,EAAgEC,sBAAhE,EAAwFC,aAAxF,EAAuGC,UAAvG,QAAyH,2BAAzH;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,0BAAjC;AACA,SAASC,KAAT,QAAsB,yBAAtB;AACA,SAASC,YAAT,EAAuBC,iBAAvB,QAAgD,8BAAhD;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC7ChC,SAAS,CAAC+B,SAAD,EAAYC,MAAZ,CAAT;EACA;AACJ;AACA;AACA;AACA;;;EACI,SAASD,SAAT,CAAmBE,KAAnB,EAA0B;IACtB,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,IAAZ,EAAkBF,KAAlB,KAA4B,IAAxC;;IACAC,KAAK,CAACE,UAAN,GAAmB,IAAnB;IACAF,KAAK,CAACG,gBAAN,GAAyB,EAAzB;IACAH,KAAK,CAACI,SAAN,GAAkB,CAAlB;IACAJ,KAAK,CAACK,WAAN,GAAoB,CAApB;IACAL,KAAK,CAACM,KAAN,GAAc,CAAC,CAAf;IACAN,KAAK,CAACO,aAAN,GAAsB,EAAtB;IACAP,KAAK,CAACQ,WAAN,GAAoB,EAApB;IACAR,KAAK,CAACS,mBAAN,GAA4B,EAA5B;IACAT,KAAK,CAACD,KAAN,GAAcA,KAAd;IACAC,KAAK,CAACU,QAAN,GAAiBX,KAAK,CAACW,QAAvB;IACA,IAAIC,IAAI,GAAGZ,KAAK,CAACa,aAAjB;IACAZ,KAAK,CAACa,WAAN,GAAoBd,KAAK,CAACe,aAAN,IAAwBH,IAAI,CAACI,OAAL,CAAa,MAAb,IAAuB,CAAC,CAApE;;IACAf,KAAK,CAACgB,gBAAN;;IACA,OAAOhB,KAAP;EACH;EACD;AACJ;AACA;;;EACIH,SAAS,CAACnB,SAAV,CAAoBsC,gBAApB,GAAuC,YAAY;IAC/C,IAAI,KAAKjB,KAAL,CAAWkB,WAAX,IAA2B,KAAKlB,KAAL,CAAWmB,UAAX,IAAyB,KAAKnB,KAAL,CAAWmB,UAAX,CAAsBC,SAA9E,EAA0F;MACtF;IACH;;IACD,IAAIC,WAAW,GAAGxC,OAAO,CAACyC,SAAR,GAAoB,cAApB,GAAqC,YAAvD;IACA,KAAKtB,KAAL,CAAWuB,EAAX,CAAc1C,OAAO,CAAC2C,cAAtB,EAAsC,KAAKC,SAA3C,EAAsD,IAAtD;IACA,KAAKzB,KAAL,CAAWuB,EAAX,CAAcF,WAAd,EAA2B,KAAKK,iBAAhC,EAAmD,IAAnD;IACA,KAAK1B,KAAL,CAAWuB,EAAX,CAAc,OAAd,EAAuB,KAAKI,yBAA5B,EAAuD,IAAvD;IACA,KAAK3B,KAAL,CAAWuB,EAAX,CAAc1C,OAAO,CAAC+C,eAAtB,EAAuC,KAAKC,SAA5C,EAAuD,IAAvD;IACA,KAAK7B,KAAL,CAAWuB,EAAX,CAAc1C,OAAO,CAACiD,aAAtB,EAAqC,KAAKJ,iBAA1C,EAA6D,IAA7D;EACH,CAVD;EAWA;AACJ;AACA;;;EACI5B,SAAS,CAACnB,SAAV,CAAoBkD,SAApB,GAAgC,UAAUE,CAAV,EAAa;IACzC,IAAI/B,KAAK,GAAG,KAAKA,KAAjB;;IACA,IAAIA,KAAK,CAACgC,gBAAN,IAA0BhC,KAAK,CAACa,aAAN,KAAwB,MAAlD,IAA4Db,KAAK,CAACiC,WAAtE,EAAmF;MAC/E;IACH;;IACD,IAAIjC,KAAK,CAACkC,WAAN,IAAqB,CAAClC,KAAK,CAACmC,OAA5B,IAAuC,KAAKC,UAAhD,EAA4D;MACxD,KAAKC,SAAL,CAAerC,KAAf,EAAsBA,KAAK,CAACsC,oBAAN,CAA2BC,cAAjD,EAAiEvC,KAAK,CAACwC,UAAvE,EAAmFxC,KAAK,CAACyC,UAAzF,EAAqGV,CAArG;IACH;EACJ,CARD;EASA;AACJ;AACA;;;EACIjC,SAAS,CAACnB,SAAV,CAAoB+D,mBAApB,GAA0C,YAAY;IAClD,IAAI,KAAK1C,KAAL,CAAWkB,WAAf,EAA4B;MACxB;IACH;;IACD,KAAKlB,KAAL,CAAW2C,GAAX,CAAe9D,OAAO,CAAC2C,cAAvB,EAAuC,KAAKC,SAA5C;IACA,KAAKzB,KAAL,CAAW2C,GAAX,CAAe,kBAAkB,YAAjC,EAA+C,KAAKjB,iBAApD;IACA,KAAK1B,KAAL,CAAW2C,GAAX,CAAe,OAAf,EAAwB,KAAKhB,yBAA7B;IACA,KAAK3B,KAAL,CAAW2C,GAAX,CAAe9D,OAAO,CAAC+C,eAAvB,EAAwC,KAAKC,SAA7C;IACA,KAAK7B,KAAL,CAAW2C,GAAX,CAAe9D,OAAO,CAACiD,aAAvB,EAAsC,KAAKJ,iBAA3C;EACH,CATD;EAUA;AACJ;AACA;;;EACI5B,SAAS,CAACnB,SAAV,CAAoBiE,oBAApB,GAA2C,UAAU5C,KAAV,EAAiB;IACxD,KAAK6C,OAAL,GAAe7C,KAAK,CAAC8C,OAAN,CAAcC,EAAd,GAAmB,sBAAlC;IACA,KAAKC,UAAL,GAAkBhD,KAAK,CAAC8C,OAAN,CAAcC,EAAd,GAAmB,iBAArC;IACA,KAAKE,WAAL,GAAmBjD,KAAK,CAAC8C,OAAN,CAAcC,EAAd,GAAmB,iBAAtC;IACA,KAAKG,gBAAL,GAAwBlD,KAAK,CAAC8C,OAAN,CAAcC,EAAd,GAAmB,iBAA3C;IACA,KAAKI,cAAL,GAAsBnD,KAAK,CAAC8C,OAAN,CAAcC,EAAd,GAAmB,uBAAzC;IACA,KAAKK,WAAL,GAAmBpD,KAAK,CAAC8C,OAAN,CAAcC,EAAd,GAAmB,gBAAtC;IACA,KAAKM,SAAL,GAAiBrD,KAAK,CAAC8C,OAAN,CAAcC,EAAd,GAAmB,gBAApC;IACA,KAAKO,mBAAL,GAA2B,EAA3B;IACA,KAAKlB,UAAL,GAAkB,IAAlB;IACA,KAAKmB,YAAL,GAAoBvD,KAAK,CAACa,aAAN,KAAwB,QAA5C;EACH,CAXD;EAYA;AACJ;AACA;AACA;AACA;;;EACIf,SAAS,CAACnB,SAAV,CAAoB6E,eAApB,GAAsC,UAAUxD,KAAV,EAAiB;IACnD,KAAK4C,oBAAL,CAA0B5C,KAA1B;IACA,KAAKyD,MAAL,GAAc1E,MAAM,CAAC,EAAD,EAAKiB,KAAK,CAAC0D,aAAX,EAA0B,IAA1B,EAAgC,IAAhC,CAApB;IACA,KAAKC,YAAL;IACA,KAAKC,WAAL,GAAmB5D,KAAK,CAACa,aAAzB;;IACA,IAAI,EAAEb,KAAK,CAACa,aAAN,CAAoBG,OAApB,CAA4B,MAA5B,IAAsC,CAAC,CAAzC,CAAJ,EAAiD;MAC7C,KAAK6C,eAAL,CAAqB7D,KAArB,EAA4B,KAAK8D,aAAL,CAAmB9D,KAAK,CAACsD,mBAAzB,EAA8C,KAAKA,mBAAnD,CAA5B;IACH;EACJ,CARD;;EASAxD,SAAS,CAACnB,SAAV,CAAoBoF,aAApB,GAAoC,UAAUN,MAAV,EAAkB;IAClD,IAAIA,MAAJ,EAAY;MACR,IAAI,KAAKZ,OAAL,CAAa7B,OAAb,CAAqB,WAArB,IAAoC,CAApC,IAAyC,KAAKhB,KAAL,CAAWa,aAAX,KAA6B,MAA1E,EAAkF;QAC9E,KAAKmC,UAAL,GAAkBS,MAAM,CAACO,eAAP,IAA0B,KAAKhB,UAAjD;MACH;;MACD,IAAI,KAAKH,OAAL,CAAa7B,OAAb,CAAqB,WAArB,IAAoC,CAApC,IAAyC,KAAKhB,KAAL,CAAWiE,aAAX,KAA6B,MAA1E,EAAkF;QAC9E,KAAKjB,UAAL,GAAkBS,MAAM,CAACS,iBAAP,IAA4B,KAAKlB,UAAnD;MACH;;MACD,OAAQS,MAAM,CAACU,cAAP,IAAyB,KAAKtB,OAAL,GAAe,UAAf,GAA4BY,MAAM,CAACW,KAApE;IACH;;IACD,OAAO,WAAP;EACH,CAXD;EAYA;AACJ;AACA;AACA;AACA;;;EACItE,SAAS,CAACnB,SAAV,CAAoBkF,eAApB,GAAsC,UAAU7D,KAAV,EAAiBqE,OAAjB,EAA0B;IAC5D,KAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,SAAS,GAAGF,OAA7B,EAAsCC,EAAE,GAAGC,SAAS,CAACC,MAArD,EAA6DF,EAAE,EAA/D,EAAmE;MAC/D,IAAIF,KAAK,GAAGG,SAAS,CAACD,EAAD,CAArB;MACA,KAAKG,gBAAL,CAAsBL,KAAtB,EAA6BpE,KAA7B,EAAoC,KAAK0E,iBAAL,CAAuB1E,KAAvB,EAA8BoE,KAA9B,EAAqC,CAArC,CAApC;IACH;EACJ,CALD;EAMA;AACJ;AACA;AACA;AACA;;;EACItE,SAAS,CAACnB,SAAV,CAAoB+F,iBAApB,GAAwC,UAAU1E,KAAV,EAAiBoE,KAAjB,EAAwBO,MAAxB,EAAgCC,MAAhC,EAAwC;IAC5E,IAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAIE,SAAS,GAAG7E,KAAK,CAAC8C,OAAN,CAAcC,EAAd,GAAmB,UAAnB,GAAgCqB,KAAK,CAACX,MAAtC,GAA+C,QAA/C,GAA0D,GAA1D,GAAgEW,KAAK,CAACU,KAAtF;IACA,IAAIrB,MAAM,GAAGzD,KAAK,CAACyD,MAAN,CAAaW,KAAK,CAACX,MAAnB,CAAb;IACAoB,SAAS,GAAIpB,MAAM,CAACsB,IAAP,KAAgB,SAAhB,IAA6BtB,MAAM,CAACsB,IAAP,KAAgB,QAA7C,IAAyDH,MAA1D,GAAqEC,SAAS,GAAG,SAAZ,GAAwBF,MAA7F,GAAuGE,SAAnH;IACA,OAAO,CAACtF,UAAU,CAACsF,SAAD,CAAX,EAAyB,CAACpB,MAAM,CAACsB,IAAP,KAAgB,WAAhB,IAA+BtB,MAAM,CAACsB,IAAP,KAAgB,iBAAhD,KAAsEtB,MAAM,CAACmB,MAAP,CAAcI,OAArF,GACvBzF,UAAU,CAACsF,SAAS,GAAG,GAAb,CADa,GACO,IAD/B,CAAP;EAEH,CAPD;EAQA;AACJ;AACA;AACA;AACA;;;EACI/E,SAAS,CAACnB,SAAV,CAAoBsG,kBAApB,GAAyC,UAAUjF,KAAV,EAAiBoE,KAAjB,EAAwB;IAC7D,IAAIc,QAAQ,GAAG,EAAf;IACA,IAAIC,WAAJ;IACA,IAAIC,gBAAJ;;IACA,KAAK,IAAId,EAAE,GAAG,CAAT,EAAYe,EAAE,GAAGrF,KAAK,CAAC0D,aAA5B,EAA2CY,EAAE,GAAGe,EAAE,CAACb,MAAnD,EAA2DF,EAAE,EAA7D,EAAiE;MAC7D,IAAIb,MAAM,GAAG4B,EAAE,CAACf,EAAD,CAAf;;MACA,IAAIb,MAAM,CAACuB,OAAX,EAAoB;QAChBZ,KAAK,GAAG,IAAI1E,KAAJ,CAAU+D,MAAM,CAACW,KAAjB,EAAwBA,KAAK,CAACU,KAA9B,CAAR;;QACA,IAAIrB,MAAM,CAAC6B,YAAX,EAAyB;UACrBJ,QAAQ,CAACK,IAAT,CAAc,KAAKb,iBAAL,CAAuB1E,KAAvB,EAA8BoE,KAA9B,EAAqC,CAArC,CAAd;QACH;;QACDc,QAAQ,CAACK,IAAT,CAAc,KAAKb,iBAAL,CAAuB1E,KAAvB,EAA8BoE,KAA9B,EAAqC,EAArC,EAAyCX,MAAM,CAACmB,MAAP,CAAcI,OAAvD,EAAgE,CAAhE,CAAd;QACAG,WAAW,GAAG,KAAKpB,aAAL,CAAmB/D,KAAK,CAAC0D,aAAN,CAAoBU,KAAK,CAACX,MAA1B,CAAnB,CAAd;QACA2B,gBAAgB,GAAGI,QAAQ,CAACC,gBAAT,CAA0B,MAAMN,WAAhC,CAAnB;QACA,KAAKO,qBAAL,CAA2BN,gBAA3B,EAA6CD,WAA7C;QACA,IAAIQ,YAAY,GAAGlC,MAAM,CAACmB,MAAP,CAAcI,OAAd,IAAyBvB,MAAM,CAAC6B,YAAhC,GAA+C,CAA/C,GAAmD,CAAtE;;QACA,IAAI,CAACtF,KAAK,CAACe,aAAP,IAAwBqE,gBAAgB,CAACZ,MAAjB,GAA0B,CAAlD,IACAY,gBAAgB,CAAC,CAAD,CAAhB,CAAoBrC,EAApB,KAA2BmC,QAAQ,CAACA,QAAQ,CAACV,MAAT,GAAkBmB,YAAnB,CAAR,CAAyC5C,EADxE,EAC4E;UACxE,KAAK6C,eAAL,CAAqB5F,KAArB,EAA4BoE,KAAK,CAACX,MAAlC,EAA0C2B,gBAA1C,EAA4DD,WAA5D,EAAyE,IAAzE;QACH;MACJ;IACJ;;IACD,OAAOD,QAAP;EACH,CAvBD;EAwBA;AACJ;AACA;AACA;AACA;;;EACIpF,SAAS,CAACnB,SAAV,CAAoB+G,qBAApB,GAA4C,UAAUN,gBAAV,EAA4BS,SAA5B,EAAuC;IAC/E,IAAIC,iBAAJ;IACA,IAAIC,QAAJ;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,gBAAgB,CAACZ,MAArC,EAA6CwB,CAAC,EAA9C,EAAkD;MAC9C,IAAI,CAAChH,iBAAiB,CAACoG,gBAAgB,CAACY,CAAD,CAAjB,CAAtB,EAA6C;QACzCF,iBAAiB,GAAG,CAAC9G,iBAAiB,CAACoG,gBAAgB,CAACY,CAAD,CAAhB,CAAoBC,UAArB,CAAlB,GAChB,GAAGC,KAAH,CAAShG,IAAT,CAAckF,gBAAgB,CAAC,CAAD,CAAhB,CAAoBa,UAApB,CAA+BR,gBAA/B,CAAgD,MAAMI,SAAtD,CAAd,CADgB,GACkE,EADtF;;QAEA,IAAIC,iBAAiB,CAACtB,MAAlB,GAA2B,CAA/B,EAAkC;UAC9BuB,QAAQ,GAAG,EAAX;;UACA,KAAK,IAAII,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,iBAAiB,CAACtB,MAA1C,EAAkD2B,GAAG,EAArD,EAAyD;YACrD,IAAIL,iBAAiB,CAACK,GAAD,CAAjB,CAAuBpD,EAAvB,CAA0B/B,OAA1B,CAAkC,WAAlC,IAAiD,CAAC,CAAtD,EAAyD;cACrD+E,QAAQ,CAACR,IAAT,CAAcO,iBAAiB,CAACK,GAAD,CAA/B;YACH;UACJ;;UACD,KAAKC,YAAL,CAAkBL,QAAlB;QACH;MACJ;IACJ;EACJ,CAlBD;EAmBA;AACJ;AACA;AACA;AACA;;;EACIjG,SAAS,CAACnB,SAAV,CAAoB0H,YAApB,GAAmC,UAAUrG,KAAV,EAAiByD,MAAjB,EAAyBW,KAAzB,EAAgCO,MAAhC,EAAwCC,MAAxC,EAAgD;IAC/E,IAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAI,KAAKpB,YAAT,EAAuB;MACnB,OAAO,KAAK+C,iBAAL,CAAuB7C,MAAvB,CAAP;IACH,CAFD,MAGK,IAAI,KAAKG,WAAL,KAAqB,SAAzB,EAAoC;MACrC,OAAO,KAAKqB,kBAAL,CAAwBjF,KAAxB,EAA+BoE,KAA/B,CAAP;IACH,CAFI,MAGA;MACD,OAAO,KAAKM,iBAAL,CAAuB1E,KAAvB,EAA8BoE,KAA9B,EAAqCO,MAArC,EAA6CC,MAA7C,CAAP;IACH;EACJ,CAXD;EAYA;AACJ;AACA;AACA;AACA;AACA;;;EACI9E,SAAS,CAACnB,SAAV,CAAoB4H,iBAApB,GAAwC,UAAUC,KAAV,EAAiB;IACrD,IAAIC,UAAU,GAAGD,KAAK,CAACE,MAAvB;;IACA,IAAIF,KAAK,CAACzB,IAAN,KAAe,OAAnB,EAA4B;MACxB,KAAKnB,WAAL,GAAmB,KAAK5D,KAAL,CAAWa,aAA9B;MACA,KAAKgC,OAAL,GAAe,KAAK7C,KAAL,CAAW8C,OAAX,CAAmBC,EAAnB,GAAwB,sBAAvC;IACH,CAHD,MAIK,IAAIyD,KAAK,CAACzB,IAAN,KAAe,WAAf,IAA8ByB,KAAK,CAACzB,IAAN,KAAe,aAAjD,EAAgE;MACjE,KAAKnB,WAAL,GAAmB,KAAK5D,KAAL,CAAWiE,aAA9B;MACA,KAAK0C,oBAAL,GAA4B,EAA5B;MACA,KAAK9D,OAAL,GAAe,KAAK7C,KAAL,CAAW8C,OAAX,CAAmBC,EAAnB,GAAwB,sBAAvC;IACH;;IACD,IAAI,KAAK/C,KAAL,CAAWiE,aAAX,KAA6B,MAA7B,IAAuC,KAAKjE,KAAL,CAAWa,aAAX,KAA6B,MAAxE,EAAgF;MAC5E,IAAI2F,KAAK,CAACzB,IAAN,KAAe,OAAnB,EAA4B;QACxB,OAAO,KAAP;MACH;IACJ;;IACD,IAAK,KAAK/E,KAAL,CAAWiE,aAAX,KAA6B,MAA7B,IAAuC,KAAK2C,mBAA5C,IAAmE,KAAKA,mBAAL,CAAyB,CAAzB,CAAxE,EAAsG;MAClG,IAAIC,YAAY,GAAGJ,UAAU,CAACR,UAAX,CAAsBlD,EAAzC;MACA,IAAI+D,SAAS,GAAG,KAAK,CAArB;;MACA,IAAIL,UAAU,CAACR,UAAf,EAA2B;QACvBa,SAAS,GAAID,YAAY,CAAC7F,OAAb,CAAqB,aAArB,IAAsC,CAAtC,IAA2C6F,YAAY,CAAC7F,OAAb,CAAqB,aAArB,IAAsC,CAAlF,GAAuF,IAAvF,GAA8F,KAA1G;MACH;;MACD,KAAK,IAAIgF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKY,mBAAL,CAAyBpC,MAA7C,EAAqDwB,CAAC,EAAtD,EAA0D;QACtD,IAAI,KAAKY,mBAAL,CAAyBZ,CAAzB,EAA4Be,YAA5B,CAAyC,OAAzC,CAAJ,EAAuD;UACnD,IAAI,KAAKH,mBAAL,CAAyBZ,CAAzB,EAA4BgB,YAA5B,CAAyC,OAAzC,EAAkDhG,OAAlD,CAA0D,WAA1D,IAAyE,CAAC,CAA1E,KACC8F,SAAS,IAAIN,KAAK,CAACzB,IAAN,KAAe,OAD7B,CAAJ,EAC2C;YACvC,KAAK6B,mBAAL,CAAyBZ,CAAzB,EAA4BiB,eAA5B,CAA4C,OAA5C;;YACA,IAAI,KAAKjH,KAAL,CAAWkH,cAAX,KAA8B,EAA9B,IAAoC,CAAClI,iBAAiB,CAAC,KAAKgB,KAAL,CAAWkH,cAAZ,CAAtD,IAAqF,KAAKlH,KAAL,CAAWmH,gBAAX,KAAgC,MAAzH,EAAiI;cAC7H,IAAI,KAAKP,mBAAL,CAAyBZ,CAAzB,EAA4BjD,EAA5B,CAA+B/B,OAA/B,CAAuC,OAAvC,IAAkD,CAAtD,EAAyD;gBACrD,KAAK,IAAIoG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,mBAAL,CAAyBZ,CAAzB,EAA4BqB,QAA5B,CAAqC7C,MAAzD,EAAiE4C,CAAC,EAAlE,EAAsE;kBAClE,KAAKR,mBAAL,CAAyBZ,CAAzB,EAA4BqB,QAA5B,CAAqCD,CAArC,EAAwCE,YAAxC,CAAqD,MAArD,EAA6D,KAAKC,OAAL,CAAa7D,aAAb,CAA2B,KAAK8D,WAAL,CAAiB,KAAKZ,mBAAL,CAAyBZ,CAAzB,EAA4BjD,EAA7C,EAAiDU,MAA5E,EAAoFgE,QAAjJ;gBACH;cACJ,CAJD,MAKK;gBACD,KAAKb,mBAAL,CAAyBZ,CAAzB,EAA4BsB,YAA5B,CAAyC,MAAzC,EAAiD,KAAKC,OAAL,CAAa7D,aAAb,CAA2B,KAAK8D,WAAL,CAAiB,KAAKZ,mBAAL,CAAyBZ,CAAzB,EAA4BjD,EAA7C,EAAiDU,MAA5E,EAAoFgE,QAArI;cACH;YACJ;;YACD,KAAKC,gBAAL,CAAsB,KAAKf,oBAA3B,EAAiD,KAAKa,WAAL,CAAiB,KAAKZ,mBAAL,CAAyBZ,CAAzB,EAA4BjD,EAA7C,CAAjD;UACH,CAdD,MAeK,IAAI,CAAC+D,SAAD,IAAc,KAAKF,mBAAL,CAAyBZ,CAAzB,EAA4BgB,YAA5B,CAAyC,OAAzC,EAAkDhG,OAAlD,CAA0D,WAA1D,IAAyE,CAAC,CAA5F,EAA+F;YAChG,KAAKyD,gBAAL,CAAsB,KAAK+C,WAAL,CAAiB,KAAKZ,mBAAL,CAAyBZ,CAAzB,EAA4BjD,EAA7C,CAAtB,EAAwE,KAAK/C,KAA7E,EAAoF,KAAK4G,mBAAL,CAAyBZ,CAAzB,CAApF;UACH;QACJ;MACJ;IACJ;;IACD,OAAO,IAAP;EACH,CA9CD;EA+CA;AACJ;AACA;AACA;AACA;AACA;;;EACIlG,SAAS,CAACnB,SAAV,CAAoBgD,yBAApB,GAAgD,UAAU6E,KAAV,EAAiB;IAC7D,IAAIxH,iBAAiB,CAACwH,KAAK,CAACE,MAAP,CAArB,EAAqC;MACjC;IACH;;IACD,IAAIiB,aAAa,GAAGnB,KAAK,CAACE,MAA1B;;IACA,IAAK,KAAK1G,KAAL,CAAWa,aAAX,KAA6B,MAA7B,IAAuC,KAAKb,KAAL,CAAWiE,aAAX,KAA6B,MAArE,IACA0D,aAAa,CAAC5E,EAAd,CAAiB/B,OAAjB,CAAyB,KAAKhB,KAAL,CAAW8C,OAAX,CAAmBC,EAAnB,GAAwB,GAAjD,MAA0D,CAAC,CAD/D,EACkE;MAC9D;IACH;;IACD,IAAIyD,KAAK,CAACzB,IAAN,KAAe,WAAf,IAA8ByB,KAAK,CAACzB,IAAN,KAAe,aAAjD,EAAgE;MAC5D,IAAI4C,aAAa,CAACZ,YAAd,CAA2B,OAA3B,MAAwCY,aAAa,CAACX,YAAd,CAA2B,OAA3B,EAAoChG,OAApC,CAA4C,WAA5C,IAA2D,CAAC,CAA5D,IACxC2G,aAAa,CAACX,YAAd,CAA2B,OAA3B,EAAoChG,OAApC,CAA4C,WAA5C,IAA2D,CAAC,CAD5D,CAAJ,EACoE;QAChE;MACH;;MACD,IAAI,CAAChC,iBAAiB,CAAC2I,aAAa,CAAC1B,UAAf,CAAlB,IAAgD0B,aAAa,CAAC1B,UAAd,CAAyBc,YAAzB,CAAsC,OAAtC,CAAhD,KACCY,aAAa,CAAC1B,UAAd,CAAyBe,YAAzB,CAAsC,OAAtC,EAA+ChG,OAA/C,CAAuD,WAAvD,IAAsE,CAAtE,IACG2G,aAAa,CAAC1B,UAAd,CAAyBe,YAAzB,CAAsC,OAAtC,EAA+ChG,OAA/C,CAAuD,WAAvD,IAAsE,CAF1E,CAAJ,EAEkF;QAC9E;MACH;IACJ;;IACD,KAAKuF,iBAAL,CAAuBC,KAAvB;;IACA,IAAImB,aAAa,CAAC5E,EAAd,CAAiB/B,OAAjB,CAAyB,UAAzB,IAAuC,CAAC,CAA5C,EAA+C;MAC3C,IAAI8B,OAAO,GAAG,KAAK,CAAnB;;MACA,IAAI6E,aAAa,CAAC5E,EAAd,CAAiB/B,OAAjB,CAAyB,cAAzB,IAA2C,CAAC,CAAhD,EAAmD;QAC/C8B,OAAO,GAAGvD,UAAU,CAACoI,aAAa,CAAC5E,EAAd,CAAiB6E,KAAjB,CAAuB,aAAvB,EAAsC,CAAtC,IAA2C,SAA5C,CAApB;QACA9E,OAAO,GAAG9D,iBAAiB,CAAC8D,OAAD,CAAjB,GAA6BvD,UAAU,CAACoI,aAAa,CAAC5E,EAAd,CAAiB6E,KAAjB,CAAuB,aAAvB,EAAsC,CAAtC,CAAD,CAAvC,GAAoF9E,OAA9F;MACH,CAHD,MAIK,IAAI6E,aAAa,CAAC5E,EAAd,CAAiB/B,OAAjB,CAAyB,cAAzB,IAA2C,CAAC,CAAhD,EAAmD;QACpD,OAAO,IAAP;MACH;;MACD,KAAKyD,gBAAL,CAAsB,KAAK+C,WAAL,CAAiBG,aAAa,CAAC5E,EAA/B,CAAtB,EAA0D,KAAK/C,KAA/D,EAAsE8C,OAAO,IAAI6E,aAAjF;IACH;EACJ,CAhCD;EAiCA;AACJ;AACA;AACA;AACA;;;EACI7H,SAAS,CAACnB,SAAV,CAAoB8F,gBAApB,GAAuC,UAAUL,KAAV,EAAiBpE,KAAjB,EAAwB8C,OAAxB,EAAiC;IACpE,KAAKS,YAAL,GAAoB,KAAKK,WAAL,KAAqB,QAAzC;;IACA,IAAI5D,KAAK,CAACyD,MAAN,CAAaW,KAAK,CAACX,MAAnB,EAA2BsB,IAA3B,KAAoC,eAApC,IAAuDjC,OAAvD,IACAA,OAAO,CAACC,EAAR,KAAe/C,KAAK,CAAC8C,OAAN,CAAcC,EAAd,GAAmB,UAAnB,GAAgCqB,KAAK,CAACX,MAAtC,GAA+C,SAA/C,GAA2DW,KAAK,CAACU,KAAjE,GAAyE,UAD5F,EACwG;MACpGhC,OAAO,GAAGA,OAAO,CAACmD,UAAlB;IACH;;IACD,IAAIjG,KAAK,CAACyD,MAAN,CAAaW,KAAK,CAACX,MAAnB,EAA2BsB,IAA3B,KAAoC,MAApC,KAA+C,KAAKnB,WAAL,KAAqB,OAArB,IAAgC,KAAKA,WAAL,KAAqB,SAApG,KAAkHd,OAAlH,IACCA,OAAO,CAACC,EAAR,KAAe,KAAK/C,KAAL,CAAW8C,OAAX,CAAmBC,EAAnB,GAAwB,UAAxB,GAAqCqB,KAAK,CAACX,MAD/D,EACwE;MACpE,IAAIoC,SAAS,GAAG,KAAK9B,aAAL,CAAmB/D,KAAK,CAACyD,MAAN,CAAaW,KAAK,CAACX,MAAnB,CAAnB,CAAhB;MACA,IAAIoE,YAAY,GAAGrC,QAAQ,CAACC,gBAAT,CAA0B,MAAMI,SAAhC,CAAnB;MACA,KAAKH,qBAAL,CAA2BmC,YAA3B,EAAyChC,SAAzC;MACA,KAAKiC,UAAL,CAAgB9H,KAAK,CAAC8C,OAAN,CAAcC,EAA9B,EAAkC/C,KAAK,CAAC0D,aAAxC;IACH;;IACD,QAAQ,KAAKE,WAAb;MACI,KAAK,QAAL;QACI,KAAKmE,SAAL,CAAe/H,KAAf,EAAsBoE,KAAtB,EAA6B,KAAKkC,iBAAL,CAAuBtG,KAAK,CAACyD,MAAN,CAAaW,KAAK,CAACX,MAAnB,CAAvB,CAA7B;QACA,KAAK7D,iBAAL,CAAuBI,KAAvB,EAA8BoE,KAA9B,EAAqC,KAAKR,WAA1C;QACA,KAAKkE,UAAL,CAAgB9H,KAAK,CAAC8C,OAAN,CAAcC,EAA9B,EAAkC/C,KAAK,CAAC0D,aAAxC;QACA;;MACJ,KAAK,OAAL;QACI,IAAI,CAACsE,KAAK,CAAC5D,KAAK,CAACU,KAAP,CAAN,IAAuBhC,OAA3B,EAAoC;UAChC,IAAImF,aAAa,GAAG,EAApB;UACAA,aAAa,CAAC1C,IAAd,CAAmBzC,OAAnB;;UACA,IAAImF,aAAa,CAAC,CAAD,CAAb,KAAqB,IAArB,IAA6BjI,KAAK,CAACyD,MAAN,CAAaW,KAAK,CAACX,MAAnB,EAA2BmB,MAA3B,CAAkCI,OAA/D,KACChF,KAAK,CAACyD,MAAN,CAAaW,KAAK,CAACX,MAAnB,EAA2BsB,IAA3B,CAAgC/D,OAAhC,CAAwC,QAAxC,MAAsD,CAAC,CAAvD,IAA4DhB,KAAK,CAACyD,MAAN,CAAaW,KAAK,CAACX,MAAnB,EAA2BsB,IAA3B,CAAgC/D,OAAhC,CAAwC,KAAxC,MAAmD,CAAC,CADjH,CAAJ,EACyH;YACrH,IAAI,EAAE8B,OAAO,CAACC,EAAR,CAAW/B,OAAX,CAAmB,SAAnB,MAAkC,CAAC,CAArC,KAA2CzB,UAAU,CAACuD,OAAO,CAACC,EAAR,GAAa,SAAd,CAAzD,EAAmF;cAC/EkF,aAAa,CAAC1C,IAAd,CAAmBhG,UAAU,CAACuD,OAAO,CAACC,EAAR,GAAa,SAAd,CAA7B;YACH,CAFD,MAGK,IAAID,OAAO,CAACC,EAAR,CAAW/B,OAAX,CAAmB,SAAnB,MAAkC,CAAC,CAAnC,IAAwCzB,UAAU,CAACuD,OAAO,CAACC,EAAR,CAAWmF,OAAX,CAAmB,SAAnB,EAA8B,EAA9B,CAAD,CAAtD,EAA2F;cAC5FD,aAAa,CAAC1C,IAAd,CAAmBhG,UAAU,CAACuD,OAAO,CAACC,EAAR,CAAWmF,OAAX,CAAmB,SAAnB,EAA8B,EAA9B,CAAD,CAA7B;YACH;UACJ;;UACD,KAAKH,SAAL,CAAe/H,KAAf,EAAsBoE,KAAtB,EAA6B6D,aAA7B;UACA,KAAKrI,iBAAL,CAAuBI,KAAvB,EAA8BoE,KAA9B,EAAqC,KAAKR,WAA1C;UACA,KAAKkE,UAAL,CAAgB9H,KAAK,CAAC8C,OAAN,CAAcC,EAA9B,EAAkC/C,KAAK,CAAC0D,aAAxC;QACH;;QACD;;MACJ,KAAK,SAAL;QACI,IAAI,CAACsE,KAAK,CAAC5D,KAAK,CAACU,KAAP,CAAV,EAAyB;UACrB,KAAKqD,gBAAL,CAAsBnI,KAAtB,EAA6BoE,KAA7B;UACA,KAAKxE,iBAAL,CAAuBI,KAAvB,EAA8BoE,KAA9B,EAAqC,KAAKR,WAA1C;UACA,KAAKkE,UAAL,CAAgB9H,KAAK,CAAC8C,OAAN,CAAcC,EAA9B,EAAkC/C,KAAK,CAAC0D,aAAxC;QACH;;QACD;IA9BR;EAgCH,CA7CD;EA8CA;AACJ;AACA;AACA;AACA;;;EACI5D,SAAS,CAACnB,SAAV,CAAoBiB,iBAApB,GAAwC,UAAUI,KAAV,EAAiBoE,KAAjB,EAAwBvD,aAAxB,EAAuC;IAC3E,IAAIuH,MAAJ;IACA,IAAIC,UAAJ;IACA,IAAI/H,WAAJ;IACA,IAAIgI,mBAAmB,GAAG,EAA1B;IACA,IAAIC,MAAJ;IACA,IAAIC,cAAJ;;IACA,IAAI3H,aAAa,KAAK,SAAtB,EAAiC;MAC7B,KAAK,IAAIyD,EAAE,GAAG,CAAT,EAAYe,EAAE,GAAGrF,KAAK,CAAC0D,aAA5B,EAA2CY,EAAE,GAAGe,EAAE,CAACb,MAAnD,EAA2DF,EAAE,EAA7D,EAAiE;QAC7D,IAAIb,MAAM,GAAG4B,EAAE,CAACf,EAAD,CAAf;;QACA,IAAIb,MAAM,CAACuB,OAAX,EAAoB;UAChB,KAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1C,mBAAL,CAAyBkB,MAA7C,EAAqDwB,CAAC,EAAtD,EAA0D;YACtDqC,UAAU,GAAGrI,KAAK,CAACe,aAAN,GAAsB,KAAKuC,mBAAL,CAAyB0C,CAAzB,EAA4BlB,KAAlD,GAA0DV,KAAK,CAACU,KAA7E;YACAxE,WAAW,GAAGmD,MAAM,CAACW,KAArB;YACAgE,MAAM,GAAG3E,MAAM,CAAC2E,MAAhB;;YACA,IAAI,CAACJ,KAAK,CAACK,UAAD,CAAV,EAAwB;cACpBE,MAAM,GAAI9E,MAAM,CAACsB,IAAP,KAAgB,WAAhB,IAA+B,iBAAhC,GAAqDqD,MAAM,CAACC,UAAD,CAAN,CAAmBE,MAAxE,GACLH,MAAM,CAACC,UAAD,CAAN,CAAmBI,OAAnB,CAA2B,CAA3B,EAA8BC,CADlC;cAEAF,cAAc,GAAGJ,MAAM,CAACC,UAAD,CAAN,CAAmBM,MAApC;;cACA,IAAI3I,KAAK,CAAC4I,YAAN,CAAmBC,SAAnB,KAAiC,UAArC,EAAiD;gBAC7CL,cAAc,GAAGJ,MAAM,CAACC,UAAD,CAAN,CAAmBS,CAAnB,CAAqBC,cAArB,EAAjB;cACH,CAFD,MAGK,IAAI/I,KAAK,CAAC4I,YAAN,CAAmBC,SAAnB,KAAiC,UAArC,EAAiD;gBAClDL,cAAc,GAAG,IAAIQ,IAAJ,CAASZ,MAAM,CAACC,UAAD,CAAN,CAAmBM,MAA5B,CAAjB;cACH;;cACD,IAAIlF,MAAM,CAACwF,QAAP,KAAoB,WAAxB,EAAqC;gBACjCX,mBAAmB,CAAC/C,IAApB,CAAyB;kBACrBuD,CAAC,EAAEN,cADkB;kBACFE,CAAC,EAAEH,MADD;kBACSjI,WAAW,EAAEA,WADtB;kBAErB+H,UAAU,EAAEA;gBAFS,CAAzB;cAIH;;cACD,IAAI5E,MAAM,CAACsB,IAAP,KAAgB,WAAhB,IAA+BtB,MAAM,CAACsB,IAAP,KAAgB,iBAAnD,EAAsE;gBAClEuD,mBAAmB,CAAC/C,IAApB,CAAyB;kBACrBuD,CAAC,EAAEN,cADkB;kBACFE,CAAC,EAAEN,MAAM,CAACC,UAAD,CAAN,CAAmBI,OAAnB,CAA2B,CAA3B,EAA8BC,CAD/B;kBAErBpI,WAAW,EAAEA,WAFQ;kBAEK+H,UAAU,EAAEA;gBAFjB,CAAzB;cAIH;YACJ;UACJ;QACJ;MACJ;IACJ,CAlCD,MAmCK,IAAIxH,aAAa,KAAK,QAAtB,EAAgC;MACjC,IAAIb,KAAK,CAACe,aAAV,EAAyB;QACrB,KAAK,IAAIiF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1C,mBAAL,CAAyBkB,MAA7C,EAAqDwB,CAAC,EAAtD,EAA0D;UACtD1F,WAAW,GAAG,KAAKgD,mBAAL,CAAyB0C,CAAzB,EAA4BvC,MAA1C;UACA6E,mBAAmB,CAAC/C,IAApB,CAAyB;YACrBjF,WAAW,EAAEA;UADQ,CAAzB;QAGH;MACJ,CAPD,MAQK;QACDA,WAAW,GAAI,KAAKgD,mBAAL,CAAyBkB,MAAzB,GAAkC,CAAnC,GAAwC,KAAKlB,mBAAL,CAAyB,CAAzB,EAA4BG,MAApE,GAA6E,CAA3F;QACA6E,mBAAmB,CAAC/C,IAApB,CAAyB;UACrBjF,WAAW,EAAEA;QADQ,CAAzB;MAGH;IACJ,CAfI,MAgBA,IAAIO,aAAa,KAAK,OAAtB,EAA+B;MAChC,KAAK,IAAImF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1C,mBAAL,CAAyBkB,MAA7C,EAAqDwB,CAAC,EAAtD,EAA0D;QACtDqC,UAAU,GAAG,KAAK/E,mBAAL,CAAyB0C,CAAzB,EAA4BlB,KAAzC;QACAxE,WAAW,GAAG,KAAKgD,mBAAL,CAAyB0C,CAAzB,EAA4BvC,MAA1C;QACA,IAAIA,MAAM,GAAGzD,KAAK,CAACyD,MAAN,CAAanD,WAAb,CAAb;QACA8H,MAAM,GAAG3E,MAAM,CAAC2E,MAAhB;;QACA,IAAI,CAACJ,KAAK,CAACK,UAAD,CAAV,EAAwB;UACpBG,cAAc,GAAGJ,MAAM,CAACC,UAAD,CAAN,CAAmBM,MAApC;UACAJ,MAAM,GAAI9E,MAAM,CAACsB,IAAP,KAAgB,WAAhB,IAA+B,iBAAhC,GAAqDqD,MAAM,CAACC,UAAD,CAAN,CAAmBE,MAAxE,GACLH,MAAM,CAACC,UAAD,CAAN,CAAmBI,OAAnB,CAA2B,CAA3B,EAA8BC,CADlC;;UAEA,IAAI1I,KAAK,CAAC4I,YAAN,CAAmBC,SAAnB,KAAiC,UAArC,EAAiD;YAC7CL,cAAc,GAAGJ,MAAM,CAACC,UAAD,CAAN,CAAmBS,CAAnB,CAAqBC,cAArB,EAAjB;UACH,CAFD,MAGK,IAAI/I,KAAK,CAAC4I,YAAN,CAAmBC,SAAnB,KAAiC,UAArC,EAAiD;YAClDL,cAAc,GAAG,IAAIQ,IAAJ,CAASZ,MAAM,CAACC,UAAD,CAAN,CAAmBM,MAA5B,CAAjB;UACH;;UACDL,mBAAmB,CAAC/C,IAApB,CAAyB;YACrBuD,CAAC,EAAEN,cADkB;YACFE,CAAC,EAAEH,MADD;YACSjI,WAAW,EAAEA,WADtB;YAErB+H,UAAU,EAAEA;UAFS,CAAzB;QAIH;MACJ;IACJ;;IACD,IAAIa,IAAI,GAAG;MACPC,IAAI,EAAEvJ,iBADC;MAEPwJ,kBAAkB,EAAEd,mBAFb;MAGPe,MAAM,EAAE;IAHD,CAAX;IAKArJ,KAAK,CAACsJ,OAAN,CAAc1J,iBAAd,EAAiCsJ,IAAjC;EACH,CAvFD;EAwFA;AACJ;AACA;AACA;AACA;;;EACIpJ,SAAS,CAACnB,SAAV,CAAoBoJ,SAApB,GAAgC,UAAU/H,KAAV,EAAiBoE,KAAjB,EAAwBgB,gBAAxB,EAA0C;IACtE,IAAI,EAAE,KAAKxB,WAAL,KAAqB,OAAvB,CAAJ,EAAqC;MACjC,IAAI,CAAC5D,KAAK,CAACe,aAAP,IAAyB,KAAK6C,WAAL,CAAiB5C,OAAjB,CAAyB,MAAzB,MAAqC,CAAC,CAAtC,IAA2C,KAAK6B,OAAL,CAAa7B,OAAb,CAAqB,WAArB,MAAsC,CAAC,CAAlF,IACzBhB,KAAK,CAACa,aAAN,KAAwB,MAD5B,EACqC;QACjC,KAAK0I,yBAAL,CAA+BvJ,KAA/B,EAAsC,KAAKsD,mBAA3C,EAAgEc,KAAhE,EAAuEpE,KAAK,CAACyD,MAA7E;MACH;IACJ;;IACD,IAAI,CAACzE,iBAAiB,CAACoG,gBAAgB,CAAC,CAAD,CAAjB,CAAtB,EAA6C;MACzC,IAAIpF,KAAK,CAACyD,MAAN,CAAaW,KAAK,CAACX,MAAnB,EAA2B6B,YAA/B,EAA6C;QACzC,IAAIF,gBAAgB,CAAC,CAAD,CAAhB,CAAoBrC,EAAxB,EAA4B;UACxB,IAAIyC,QAAQ,CAACgE,cAAT,CAAwBpE,gBAAgB,CAAC,CAAD,CAAhB,CAAoBrC,EAApB,GAAyB,SAAjD,CAAJ,EAAiE;YAC7DqC,gBAAgB,CAACG,IAAjB,CAAsBhG,UAAU,CAAC6F,gBAAgB,CAAC,CAAD,CAAhB,CAAoBrC,EAApB,GAAyB,SAA1B,CAAhC;UACH,CAFD,MAGK,IAAIqC,gBAAgB,CAAC,CAAD,CAAhB,CAAoBrC,EAApB,CAAuB/B,OAAvB,CAA+B,aAA/B,MAAkD,CAAC,CAAvD,EAA0D;YAC3D,IAAIwE,QAAQ,CAACgE,cAAT,CAAwBpE,gBAAgB,CAAC,CAAD,CAAhB,CAAoBrC,EAApB,CAAuBmF,OAAvB,CAA+B,aAA/B,EAA8C,aAA9C,CAAxB,CAAJ,EAA2F;cACvF9C,gBAAgB,CAACG,IAAjB,CAAsBhG,UAAU,CAAC6F,gBAAgB,CAAC,CAAD,CAAhB,CAAoBrC,EAApB,CAAuBmF,OAAvB,CAA+B,aAA/B,EAA8C,aAA9C,CAAD,CAAhC;YACH;UACJ;QACJ;MACJ;;MACD,IAAIuB,KAAK,GAAG,KAAK,CAAjB;MACA,IAAI5D,SAAS,GAAGT,gBAAgB,CAAC,CAAD,CAAhB,KAAwBA,gBAAgB,CAAC,CAAD,CAAhB,CAAoB4B,YAApB,CAAiC,OAAjC,KAA6C,EAArE,CAAhB;MACA,IAAI0C,UAAU,GAAGtE,gBAAgB,CAAC,CAAD,CAAhB,CAAoBa,UAApB,KACZb,gBAAgB,CAAC,CAAD,CAAhB,CAAoBa,UAApB,CAA+Be,YAA/B,CAA4C,OAA5C,KAAwD,EAD5C,CAAjB;;MAEA,IAAInB,SAAS,KAAK,EAAd,IAAoB,KAAKjC,WAAL,KAAqB,SAA7C,EAAwD;QACpD,KAAK8B,qBAAL,CAA2BN,gBAA3B,EAA6CS,SAA7C;MACH;;MACD,IAAIT,gBAAgB,CAAC,CAAD,CAAhB,IAAuBS,SAAS,CAAC7E,OAAV,CAAkB,KAAK2I,iBAAL,CAAuBvE,gBAAgB,CAAC,CAAD,CAAhB,CAAoBrC,EAA3C,CAAlB,IAAoE,CAAC,CAAhG,EAAmG;QAC/F,KAAKqD,YAAL,CAAkBhB,gBAAlB;MACH,CAFD,MAGK,IAAIA,gBAAgB,CAAC,CAAD,CAAhB,CAAoBa,UAApB,IAAkCyD,UAAU,CAAC1I,OAAX,CAAmB,KAAK2I,iBAAL,CAAuBvE,gBAAgB,CAAC,CAAD,CAAhB,CAAoBrC,EAA3C,CAAnB,IAAqE,CAAC,CAA5G,EAA+G;QAChH,KAAKqD,YAAL,CAAkB,CAAChB,gBAAgB,CAAC,CAAD,CAAhB,CAAoBa,UAArB,CAAlB;MACH,CAFI,MAGA;QACD,KAAKW,mBAAL,GAA2B5G,KAAK,CAACiE,aAAN,KAAwB,MAAxB,GAAiCmB,gBAAjC,GAAoD,EAA/E;QACA,KAAKwE,WAAL,CAAiBxE,gBAAjB;QACAqE,KAAK,GAAG,IAAR;MACH;;MACD,IAAI,KAAK5G,OAAL,CAAa7B,OAAb,CAAqB,WAArB,IAAoC,CAApC,IAAyChB,KAAK,CAACiE,aAAN,KAAwB,MAArE,EAA6E;QACzE,KAAKyD,gBAAL,CAAsB,KAAKf,oBAA3B,EAAiDvC,KAAjD,EAAwDqF,KAAxD;MACH,CAFD,MAGK;QACD,KAAK/B,gBAAL,CAAsB,KAAKpE,mBAA3B,EAAgDc,KAAhD,EAAuDqF,KAAvD;MACH;IACJ;EACJ,CA7CD;EA8CA;AACJ;AACA;AACA;AACA;;;EACI3J,SAAS,CAACnB,SAAV,CAAoBwJ,gBAApB,GAAuC,UAAUnI,KAAV,EAAiBoE,KAAjB,EAAwB;IAC3D,KAAK2D,SAAL,CAAe/H,KAAf,EAAsBoE,KAAtB,EAA6B,KAAKa,kBAAL,CAAwBjF,KAAxB,EAA+B,IAAIN,KAAJ,CAAU0E,KAAK,CAACX,MAAhB,EAAwBW,KAAK,CAACU,KAA9B,CAA/B,CAA7B;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;;;EACIhF,SAAS,CAACnB,SAAV,CAAoB4K,yBAApB,GAAgD,UAAUvJ,KAAV,EAAiBoE,KAAjB,EAAwByF,YAAxB,EAAsCC,gBAAtC,EAAwD;IACpG,IAAIrG,MAAJ;;IACA,KAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5B,KAAK,CAACI,MAA1B,EAAkCwB,CAAC,EAAnC,EAAuC;MACnCvC,MAAM,GAAGqG,gBAAgB,CAAC1F,KAAK,CAAC4B,CAAD,CAAL,CAASvC,MAAV,CAAzB;;MACA,IAAK,KAAKF,YAAL,IAAqB,CAAC,KAAKwG,QAAL,CAAc3F,KAAK,CAAC4B,CAAD,CAAnB,EAAwB6D,YAAxB,EAAsC,KAAKtG,YAA3C,CAAvB,IACC,KAAKK,WAAL,KAAqB,SAArB,IAAkC,CAAC,KAAKmG,QAAL,CAAc3F,KAAK,CAAC4B,CAAD,CAAnB,EAAwB6D,YAAxB,EAAsC,KAAtC,CADpC,IAEC,CAAC,KAAKtG,YAAN,IAAsB,KAAKwG,QAAL,CAAc3F,KAAK,CAAC4B,CAAD,CAAnB,EAAwB6D,YAAxB,EAAsC,IAAtC,CAAtB,IAAqE,CAAC,KAAKE,QAAL,CAAc3F,KAAK,CAAC4B,CAAD,CAAnB,EAAwB6D,YAAxB,EAAsC,KAAtC,CAF3E,EAE0H;QACtH,KAAKzD,YAAL,CAAkB,KAAKC,YAAL,CAAkBrG,KAAlB,EAAyByD,MAAzB,EAAiCW,KAAK,CAAC4B,CAAD,CAAtC,EAA2C,EAA3C,EAA+C,KAA/C,CAAlB;;QACA,IAAIvC,MAAM,CAACmB,MAAP,CAAcI,OAAlB,EAA2B;UACvB,KAAKoB,YAAL,CAAkB,KAAKC,YAAL,CAAkBrG,KAAlB,EAAyByD,MAAzB,EAAiCW,KAAK,CAAC4B,CAAD,CAAtC,EAA2C,EAA3C,EAA+C,IAA/C,CAAlB;QACH;;QACD5B,KAAK,CAAC4F,MAAN,CAAahE,CAAb,EAAgB,CAAhB;QACAA,CAAC;MACJ;IACJ;EACJ,CAfD;EAgBA;AACJ;AACA;AACA;AACA;;;EACIlG,SAAS,CAACnB,SAAV,CAAoBmJ,UAApB,GAAiC,UAAUmC,OAAV,EAAmBvG,aAAnB,EAAkCwG,WAAlC,EAA+C;IAC5E,IAAIA,WAAW,KAAK,KAAK,CAAzB,EAA4B;MAAEA,WAAW,GAAG,KAAd;IAAsB;;IACpD,IAAIC,UAAU,GAAI,KAAKC,eAAL,CAAqB,KAAKzD,oBAA1B,KACd,KAAKyD,eAAL,CAAqB,KAAK9G,mBAA1B,CADJ,CAF4E,CAGvB;;IACrD,KAAK,IAAIgB,EAAE,GAAG,CAAT,EAAY+F,eAAe,GAAG3G,aAAnC,EAAkDY,EAAE,GAAG+F,eAAe,CAAC7F,MAAvE,EAA+EF,EAAE,EAAjF,EAAqF;MACjF,IAAIb,MAAM,GAAG4G,eAAe,CAAC/F,EAAD,CAA5B;;MACA,IAAIb,MAAM,CAACuB,OAAX,EAAoB;QAChB,KAAKsF,sBAAL,CAA4B/K,UAAU,CAAC0K,OAAO,GAAG,aAAV,GAA0BxG,MAAM,CAACW,KAAlC,CAAtC,EAAgF,KAAKL,aAAL,CAAmBN,MAAnB,CAAhF,EAA4G0G,UAA5G,EAAwHD,WAAxH,EAAqIzG,MAAM,CAACW,KAA5I;;QACA,IAAI,CAACpF,iBAAiB,CAACO,UAAU,CAAC0K,OAAO,GAAG,aAAV,GAA0BxG,MAAM,CAACW,KAAlC,CAAX,CAAtB,EAA4E;UACxE,KAAKkG,sBAAL,CAA4B/K,UAAU,CAAC0K,OAAO,GAAG,aAAV,GAA0BxG,MAAM,CAACW,KAAlC,CAAtC,EAAgF,KAAKL,aAAL,CAAmBN,MAAnB,CAAhF,EAA4G0G,UAA5G,EAAwHD,WAAxH,EAAqIzG,MAAM,CAACW,KAA5I;QACH;MACJ;IACJ;EACJ,CAbD;EAcA;AACJ;AACA;AACA;AACA;;;EACItE,SAAS,CAACnB,SAAV,CAAoB2L,sBAApB,GAA6C,UAAUxH,OAAV,EAAmB+C,SAAnB,EAA8BsE,UAA9B,EAA0CD,WAA1C,EAAuDzG,MAAvD,EAA+D;IACxG,IAAI4D,QAAQ,GAAI,KAAK9D,YAAL,GAAoB,CAACT,OAAD,CAApB,GAAgCA,OAAO,CAACyH,UAAxD;;IACA,IAAI,KAAKvK,KAAL,CAAWa,aAAX,KAA6B,MAA7B,IAAuC,KAAKb,KAAL,CAAWiE,aAAX,KAA6B,MAAxE,EAAgF;MAC5EoD,QAAQ,GAAGvE,OAAO,CAACyH,UAAnB;IACH;;IACD,IAAIC,gBAAJ;IACA,IAAIC,eAAJ;IACA,IAAIC,WAAJ;IACA,IAAIC,aAAa,GAAG7H,OAApB;;IACA,KAAK,IAAIkD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,QAAQ,CAAC7C,MAA7B,EAAqCwB,CAAC,EAAtC,EAA0C;MACtCwE,gBAAgB,GAAGnD,QAAQ,CAACrB,CAAD,CAAR,CAAYgB,YAAZ,CAAyB,OAAzB,KAAqC,EAAxD;MACAyD,eAAe,GAAGpD,QAAQ,CAACrB,CAAD,CAAR,CAAYC,UAAZ,CAAuBe,YAAvB,CAAoC,OAApC,KAAgD,EAAlE;;MACA,IAAI,KAAKhH,KAAL,CAAWa,aAAX,KAA6B,MAA7B,IAAuC,KAAKb,KAAL,CAAWiE,aAAX,KAA6B,MAAxE,EAAgF;QAC5E4B,SAAS,GAAG2E,gBAAgB,CAACxJ,OAAjB,CAAyB,WAAzB,IAAwC,CAAxC,IACRwJ,gBAAgB,CAACxJ,OAAjB,CAAyB,WAAzB,IAAwC,CADhC,GACoCwJ,gBADpC,GACuD3E,SADnE;QAEAA,SAAS,GAAI4E,eAAe,CAACzJ,OAAhB,CAAwB,WAAxB,IAAuC,CAAvC,IACTyJ,eAAe,CAACzJ,OAAhB,CAAwB,WAAxB,IAAuC,CAD/B,GACoCyJ,eADpC,GACsD5E,SADlE;MAEH;;MACD,IAAI2E,gBAAgB,CAACxJ,OAAjB,CAAyB6E,SAAzB,MAAwC,CAAC,CAAzC,IACA4E,eAAe,CAACzJ,OAAhB,CAAwB6E,SAAxB,MAAuC,CAAC,CADxC,IAC6CsE,UADjD,EAC6D;QACzD,KAAKS,WAAL,CAAiBvD,QAAQ,CAACrB,CAAD,CAAzB,EAA8B,KAAKhD,UAAnC;MACH,CAHD,MAIK;QACD2H,aAAa,GAAGtD,QAAQ,CAACrB,CAAD,CAAxB;QACA,KAAK6E,cAAL,CAAoBxD,QAAQ,CAACrB,CAAD,CAA5B,EAAiC,KAAKhD,UAAtC;QACA,KAAK6H,cAAL,CAAoBxD,QAAQ,CAACrB,CAAD,CAAR,CAAYC,UAAhC,EAA4C,KAAKjD,UAAjD;MACH;;MACD,IAAIqE,QAAQ,CAACrB,CAAD,CAAR,CAAYjD,EAAZ,CAAe/B,OAAf,CAAuB,WAAvB,IAAsC,CAAtC,IAA2C2J,aAAa,CAACG,SAAd,CAAwB,CAAxB,MAA+BjF,SAA9E,EAAyF;QACrF,KAAKgF,cAAL,CAAoBxD,QAAQ,CAACrB,CAAD,CAA5B,EAAiC,KAAKhD,UAAtC;QACA,KAAK6H,cAAL,CAAoBxD,QAAQ,CAACrB,CAAD,CAAR,CAAYC,UAAhC,EAA4C,KAAKjD,UAAjD;QACA,KAAK4H,WAAL,CAAiBvD,QAAQ,CAACrB,CAAD,CAAzB,EAA8BH,SAA9B;MACH;IACJ;;IACD,IAAI/C,OAAO,CAACC,EAAR,CAAW/B,OAAX,CAAmB,QAAnB,IAA+B,CAAC,CAApC,EAAuC;MACnC,IAAK8B,OAAO,CAAC2C,gBAAR,CAAyB,MAAMI,SAA/B,EAA0C,CAA1C,CAAD,IAAkD/C,OAAO,CAAC2C,gBAAR,CAAyB,MAAMI,SAA/B,EAA0C,CAA1C,EAA6CmB,YAA7C,CAA0D,OAA1D,MAC9CnB,SADR,EACmB;QACf,IAAIkF,SAAS,GAAGxL,UAAU,CAAC,KAAKgI,OAAL,CAAazE,OAAb,CAAqBC,EAArB,GAA0B,UAA1B,GAAuCD,OAAO,CAACC,EAAR,CAAWD,OAAO,CAACC,EAAR,CAAWyB,MAAX,GAAoB,CAA/B,CAAxC,CAA1B;QACA,IAAIwG,eAAe,GAAGD,SAAS,IAAIA,SAAS,CAAChE,YAAV,CAAuB,OAAvB,CAAb,GAA+CgE,SAAS,CAAC/D,YAAV,CAAuB,OAAvB,CAA/C,GAAiF,EAAvG;;QACA,IAAIgE,eAAe,CAAChK,OAAhB,CAAwB,KAAKgC,UAA7B,IAA2C,CAAC,CAAhD,EAAmD;UAC/C,KAAK6H,cAAL,CAAoBE,SAApB,EAA+B,KAAK/H,UAApC;QACH;MACJ;IACJ;;IACD,IAAI,KAAKuE,OAAL,CAAa0D,YAAb,IAA6B,KAAK1D,OAAL,CAAa2D,cAAb,CAA4BlG,OAA7D,EAAsE;MAClE0F,WAAW,GAAGnL,UAAU,CAAC,KAAKgI,OAAL,CAAazE,OAAb,CAAqBC,EAArB,GAA0B,sBAA1B,GAAmDU,MAApD,CAAxB;;MACA,IAAIiH,WAAJ,EAAiB;QACb,IAAIA,WAAW,CAAC3D,YAAZ,CAAyB,OAAzB,CAAJ,EAAuC;UACnC,KAAK8D,cAAL,CAAoBH,WAApB,EAAiCA,WAAW,CAAC1D,YAAZ,CAAyB,OAAzB,CAAjC;;UACA,IAAI,CAAChI,iBAAiB,CAAC,KAAKgB,KAAL,CAAWkH,cAAX,IAA6B,KAAKlH,KAAL,CAAWkH,cAAX,KAA8B,EAA5D,CAAtB,EAAuF;YACnFwD,WAAW,CAACpD,YAAZ,CAAyB,QAAzB,EAAmC,KAAKC,OAAL,CAAa7D,aAAb,CAA2BD,MAA3B,EAAmCgE,QAAtE;;YACA,IAAI,KAAKzH,KAAL,CAAWmH,gBAAX,KAAgC,MAApC,EAA4C;cACxCuD,WAAW,CAACpD,YAAZ,CAAyB,MAAzB,EAAiC,KAAKC,OAAL,CAAa7D,aAAb,CAA2BD,MAA3B,EAAmCgE,QAApE;YACH;UACJ;QACJ;;QACD+C,gBAAgB,GAAGG,aAAa,CAAC3D,YAAd,CAA2B,OAA3B,KAAuC,EAA1D;QACAyD,eAAe,GAAGE,aAAa,CAAC1E,UAAd,CAAyBe,YAAzB,CAAsC,OAAtC,KAAkD,EAApE;;QACA,IAAIwD,gBAAgB,CAACxJ,OAAjB,CAAyB6E,SAAzB,MAAwC,CAAC,CAAzC,IAA8C4E,eAAe,CAACzJ,OAAhB,CAAwB6E,SAAxB,MAAuC,CAAC,CAAtF,IAA2FsE,UAA/F,EAA2G;UACvG,KAAKS,WAAL,CAAiBF,WAAjB,EAA8B,KAAK1H,UAAnC;UACA,KAAK6H,cAAL,CAAoBH,WAApB,EAAiC7E,SAAjC;;UACA,IAAI,KAAK7F,KAAL,CAAWkH,cAAX,KAA8B,EAA9B,IAAoC,CAAClI,iBAAiB,CAAC,KAAKgB,KAAL,CAAWkH,cAAZ,CAA1D,EAAuF;YACnFwD,WAAW,CAACpD,YAAZ,CAAyB,QAAzB,EAAmC,KAAKC,OAAL,CAAa7D,aAAb,CAA2BD,MAA3B,EAAmCgE,QAAtE;;YACA,IAAI,KAAKzH,KAAL,CAAWmH,gBAAX,KAAgC,MAApC,EAA4C;cACxCuD,WAAW,CAACpD,YAAZ,CAAyB,MAAzB,EAAiC,KAAKC,OAAL,CAAa7D,aAAb,CAA2BD,MAA3B,EAAmCgE,QAApE;YACH;UACJ;QACJ,CATD,MAUK;UACD,KAAKoD,cAAL,CAAoBH,WAApB,EAAiC,KAAK1H,UAAtC;;UACA,IAAI,CAAChE,iBAAiB,CAAC,KAAKgB,KAAL,CAAWkH,cAAZ,CAAlB,IAAiD,KAAKlH,KAAL,CAAWkH,cAAX,KAA8B,EAAnF,EAAuF;YACnFwD,WAAW,CAACpD,YAAZ,CAAyB,QAAzB,EAAmC,KAAKC,OAAL,CAAa7D,aAAb,CAA2BD,MAA3B,EAAmCgE,QAAtE;;YACA,IAAI,KAAKzH,KAAL,CAAWmH,gBAAX,KAAgC,MAApC,EAA4C;cACxCuD,WAAW,CAACpD,YAAZ,CAAyB,MAAzB,EAAiC,KAAKC,OAAL,CAAa7D,aAAb,CAA2BD,MAA3B,EAAmCgE,QAApE;YACH;UACJ;;UACD,IAAK+C,gBAAgB,KAAK,EAArB,IAA2BC,eAAe,KAAK,EAAhD,IAAuDD,gBAAgB,CAACW,IAAjB,OAA4B,eAAvF,EAAwG;YACpG,KAAKN,cAAL,CAAoBH,WAApB,EAAiC7E,SAAjC;UACH,CAFD,MAGK;YACD,KAAK+E,WAAL,CAAiBF,WAAjB,EAA8B7E,SAA9B;;YACA,IAAIA,SAAS,CAAC7E,OAAV,CAAkB,WAAlB,IAAiC,CAAjC,IAAsC,KAAKhB,KAAL,CAAWkH,cAAX,KAA8B,EAApE,IAA0E,CAAClI,iBAAiB,CAAC,KAAKgB,KAAL,CAAWkH,cAAZ,CAAhG,EAA6H;cACzHwD,WAAW,CAACpD,YAAZ,CAAyB,QAAzB,EAAmC,KAAKtH,KAAL,CAAWkH,cAA9C;;cACA,IAAI,KAAKrE,OAAL,CAAa7B,OAAb,CAAqB,WAArB,IAAoC,CAApC,IAAyC,KAAKhB,KAAL,CAAWmH,gBAAX,KAAgC,MAA7E,EAAqF;gBACjFuD,WAAW,CAACpD,YAAZ,CAAyB,MAAzB,EAAiC,KAAKtH,KAAL,CAAWkH,cAA5C;cACH;YACJ;UACJ;QACJ;;QACD,IAAIgD,WAAW,IAAIO,eAAe,CAACzJ,OAAhB,CAAwB6E,SAAxB,IAAqC,CAAC,CAAzD,EAA4D;UACxD,KAAK+E,WAAL,CAAiBF,WAAjB,EAA8B7E,SAA9B;QACH;MACJ;IACJ;EACJ,CA7FD;EA8FA;AACJ;AACA;AACA;AACA;;;EACI/F,SAAS,CAACnB,SAAV,CAAoBiL,WAApB,GAAkC,UAAU7D,QAAV,EAAoB;IAClD,KAAK,IAAIzB,EAAE,GAAG,CAAT,EAAY8G,UAAU,GAAGrF,QAA9B,EAAwCzB,EAAE,GAAG8G,UAAU,CAAC5G,MAAxD,EAAgEF,EAAE,EAAlE,EAAsE;MAClE,IAAIxB,OAAO,GAAGsI,UAAU,CAAC9G,EAAD,CAAxB;;MACA,IAAIxB,OAAJ,EAAa;QACT,KAAK+H,cAAL,CAAoB/H,OAAO,CAACmD,UAA5B,EAAwC,KAAKjD,UAA7C;QACA,KAAK6H,cAAL,CAAoB/H,OAApB,EAA6B,KAAKE,UAAlC;QACA,KAAK4H,WAAL,CAAiB9H,OAAjB,EAA0B,KAAK6G,iBAAL,CAAuB7G,OAAO,CAACC,EAA/B,CAA1B;;QACA,IAAI,KAAKF,OAAL,CAAa7B,OAAb,CAAqB,WAArB,IAAoC,CAApC,IAAyC,KAAKhB,KAAL,CAAWkH,cAAX,KAA8B,EAAvE,IAA6E,CAAClI,iBAAiB,CAAC,KAAKgB,KAAL,CAAWkH,cAAZ,CAA/F,IAA8H,KAAKlH,KAAL,CAAWmH,gBAAX,KAAgC,MAAlK,EAA0K;UACtK,IAAIrE,OAAO,CAACC,EAAR,CAAW/B,OAAX,CAAmB,OAAnB,IAA8B,CAAlC,EAAqC;YACjC,KAAK,IAAIgF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlD,OAAO,CAACuE,QAAR,CAAiB7C,MAArC,EAA6CwB,CAAC,EAA9C,EAAkD;cAC9ClD,OAAO,CAACuE,QAAR,CAAiBrB,CAAjB,EAAoBsB,YAApB,CAAiC,MAAjC,EAAyC,KAAKtH,KAAL,CAAWkH,cAApD;YACH;UACJ,CAJD,MAKK;YACDpE,OAAO,CAACwE,YAAR,CAAqB,MAArB,EAA6B,KAAKtH,KAAL,CAAWkH,cAAxC;UACH;QACJ;MACJ;IACJ;EACJ,CAnBD;EAoBA;AACJ;AACA;AACA;AACA;;;EACIpH,SAAS,CAACnB,SAAV,CAAoBgL,iBAApB,GAAwC,UAAU5G,EAAV,EAAc;IAClD,OAAO,KAAKgB,aAAL,CAAmB,KAAKwD,OAAL,CAAa9D,MAAb,CAAoB,KAAK+D,WAAL,CAAiBzE,EAAjB,EAAqBU,MAAzC,CAAnB,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;;;EACI3D,SAAS,CAACnB,SAAV,CAAoByH,YAApB,GAAmC,UAAUL,QAAV,EAAoB;IACnD,KAAK,IAAIzB,EAAE,GAAG,CAAT,EAAY+G,UAAU,GAAGtF,QAA9B,EAAwCzB,EAAE,GAAG+G,UAAU,CAAC7G,MAAxD,EAAgEF,EAAE,EAAlE,EAAsE;MAClE,IAAIxB,OAAO,GAAGuI,UAAU,CAAC/G,EAAD,CAAxB;;MACA,IAAIxB,OAAJ,EAAa;QACT,KAAK+H,cAAL,CAAoB/H,OAApB,EAA6B,KAAK6G,iBAAL,CAAuB7G,OAAO,CAACC,EAA/B,CAA7B;;QACA,IAAI,KAAK/C,KAAL,CAAWmH,gBAAX,KAAgC,MAAhC,IAA0C,KAAKnH,KAAL,CAAWkH,cAAX,KAA8B,EAAxE,IAA8E,CAAClI,iBAAiB,CAAC,KAAKgB,KAAL,CAAWkH,cAAZ,CAApG,EAAiI;UAC7H,IAAIpE,OAAO,CAACC,EAAR,CAAW/B,OAAX,CAAmB,OAAnB,IAA8B,CAAlC,EAAqC;YACjC,KAAK,IAAIgF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlD,OAAO,CAACuE,QAAR,CAAiB7C,MAArC,EAA6CwB,CAAC,EAA9C,EAAkD;cAC9ClD,OAAO,CAACuE,QAAR,CAAiBrB,CAAjB,EAAoBsB,YAApB,CAAiC,MAAjC,EAAyC,KAAKC,OAAL,CAAa7D,aAAb,CAA2B,KAAK8D,WAAL,CAAiB1E,OAAO,CAACC,EAAzB,EAA6BU,MAAxD,EAAgEgE,QAAzG;YACH;UACJ,CAJD,MAKK;YACD3E,OAAO,CAACwE,YAAR,CAAqB,MAArB,EAA6B,KAAKC,OAAL,CAAa7D,aAAb,CAA2B,KAAK8D,WAAL,CAAiB1E,OAAO,CAACC,EAAzB,EAA6BU,MAAxD,EAAgEgE,QAA7F;UACH;QACJ;MACJ;IACJ;EACJ,CAjBD;EAkBA;AACJ;AACA;AACA;AACA;;;EACI3H,SAAS,CAACnB,SAAV,CAAoB+I,gBAApB,GAAuC,UAAUrD,OAAV,EAAmBD,KAAnB,EAA0BqF,KAA1B,EAAiC;IACpE,KAAK,IAAIzD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,OAAO,CAACG,MAA5B,EAAoCwB,CAAC,EAArC,EAAyC;MACrC,IAAI,KAAK+D,QAAL,CAAc1F,OAAO,CAAC2B,CAAD,CAArB,EAA0B5B,KAA1B,EAAiC,KAAKb,YAAtC,CAAJ,EAAyD;QACrDc,OAAO,CAAC2F,MAAR,CAAehE,CAAf,EAAkB,CAAlB;QACAA,CAAC;MACJ;IACJ;;IACD,IAAIyD,KAAJ,EAAW;MACPpF,OAAO,CAACkB,IAAR,CAAanB,KAAb;IACH;EACJ,CAVD;EAWA;AACJ;AACA;AACA;AACA;;;EACItE,SAAS,CAACnB,SAAV,CAAoBoL,QAApB,GAA+B,UAAUuB,KAAV,EAAiBC,MAAjB,EAAyBC,eAAzB,EAA0C;IACrE,OAAQ,CAACF,KAAK,CAAC7H,MAAN,KAAiB8H,MAAM,CAAC9H,MAAxB,IAAmC,KAAKG,WAAL,KAAqB,SAArB,IAAkC,CAAC4H,eAAvE,MACAA,eAAe,IAAKF,KAAK,CAACxG,KAAN,KAAgByG,MAAM,CAACzG,KAD3C,CAAR;EAEH,CAHD;EAIA;AACJ;AACA;AACA;AACA;AACA;;;EACIhF,SAAS,CAACnB,SAAV,CAAoB8M,eAApB,GAAsC,UAAUzL,KAAV,EAAiB0L,OAAjB,EAA0BC,WAA1B,EAAuC;IACzE,KAAKpI,YAAL,GAAoBmI,OAAO,KAAK,QAAhC;;IACA,IAAI,CAAC1M,iBAAiB,CAAC0M,OAAD,CAAtB,EAAiC;MAC7B,IAAIA,OAAO,CAAC1K,OAAR,CAAgB,MAAhB,MAA4B,CAAC,CAA7B,IAAkC0K,OAAO,KAAK,OAA9C,IAAyDC,WAA7D,EAA0E;QACtE3L,KAAK,CAAC4L,iBAAN,GAA0B,KAA1B;MACH,CAFD,MAGK;QACD5L,KAAK,CAAC4L,iBAAN,GAA0B,IAA1B;MACH;IACJ;;IACD,IAAItI,mBAAmB,GAAGvE,MAAM,CAAC,EAAD,EAAK,KAAKuE,mBAAV,EAA+B,IAA/B,EAAqC,IAArC,CAAhC;IACA,IAAIqD,oBAAoB,GAAG5H,MAAM,CAAC,EAAD,EAAK,KAAK4H,oBAAV,EAAgC,IAAhC,EAAsC,IAAtC,CAAjC;;IACA,IAAI,KAAK9D,OAAL,CAAa7B,OAAb,CAAqB,WAArB,IAAoC,CAApC,IAAyC2F,oBAAoB,CAACnC,MAArB,GAA8B,CAA3E,EAA8E;MAC1E,KAAKqH,sBAAL,CAA4B7L,KAA5B,EAAmC,KAAK2G,oBAAxC,EAA8D3G,KAAK,CAACyD,MAApE;MACAH,mBAAmB,GAAGqD,oBAAtB;IACH,CAHD,MAIK;MACD,KAAKkF,sBAAL,CAA4B7L,KAA5B,EAAmC,KAAKsD,mBAAxC,EAA6DtD,KAAK,CAACyD,MAAnE;IACH;;IACD,KAAKqE,UAAL,CAAgB9H,KAAK,CAAC8C,OAAN,CAAcC,EAA9B,EAAkC/C,KAAK,CAAC0D,aAAxC;IACA,KAAKG,eAAL,CAAqB7D,KAArB,EAA4BsD,mBAA5B;EACH,CArBD;EAsBA;;;EACAxD,SAAS,CAACnB,SAAV,CAAoBmN,eAApB,GAAsC,UAAU9L,KAAV,EAAiByD,MAAjB,EAAyB+C,KAAzB,EAAgC;IAClE,IAAImB,aAAa,GAAGnB,KAAK,CAACE,MAA1B;;IACA,IAAIF,KAAK,CAACzB,IAAN,KAAe,WAAnB,EAAgC;MAC5B,IAAIyB,KAAK,CAACE,MAAN,CAAa3D,EAAb,CAAgB/B,OAAhB,CAAwB,MAAxB,IAAkC,CAAtC,EAAyC;QACrC2G,aAAa,GAAGpI,UAAU,CAACiH,KAAK,CAACE,MAAN,CAAa3D,EAAb,CAAgBmF,OAAhB,CAAwB,MAAxB,EAAgC,OAAhC,CAAD,CAA1B;MACH;;MACD,IAAIP,aAAa,CAACZ,YAAd,CAA2B,OAA3B,MAAwCY,aAAa,CAACX,YAAd,CAA2B,OAA3B,EAAoChG,OAApC,CAA4C,WAA5C,IAA2D,CAAC,CAA5D,IACxC2G,aAAa,CAACX,YAAd,CAA2B,OAA3B,EAAoChG,OAApC,CAA4C,WAA5C,IAA2D,CAAC,CAD5D,CAAJ,EACoE;QAChE;MACH;;MACD,KAAK4C,WAAL,GAAmB,KAAK5D,KAAL,CAAWiE,aAA9B;IACH;;IACD,IAAI8H,aAAa,GAAG,KAAKxF,iBAAL,CAAuBC,KAAvB,CAApB;;IACA,IAAIuF,aAAJ,EAAmB;MACf,IAAI5G,WAAW,GAAG,KAAKpB,aAAL,CAAmB/D,KAAK,CAAC0D,aAAN,CAAoBD,MAApB,CAAnB,CAAlB;MACA,IAAI2B,gBAAgB,GAAII,QAAQ,CAACC,gBAAT,CAA0B,MAAMN,WAAhC,CAAxB;MACA,KAAK5B,YAAL,GAAoB,KAAKK,WAAL,KAAqB,QAAzC;MACA,IAAIoI,kBAAkB,GAAG,IAAzB;;MACA,IAAI5G,gBAAgB,CAACZ,MAAjB,GAA0B,CAA9B,EAAiC;QAC7B,KAAKoB,eAAL,CAAqB5F,KAArB,EAA4ByD,MAA5B,EAAoC2B,gBAApC,EAAsDD,WAAtD,EAAmE6G,kBAAnE;MACH,CAFD,MAGK;QACD,KAAK,IAAI1H,EAAE,GAAG,CAAT,EAAYe,EAAE,GAAGrF,KAAK,CAAC0D,aAA5B,EAA2CY,EAAE,GAAGe,EAAE,CAACb,MAAnD,EAA2DF,EAAE,EAA7D,EAAiE;UAC7D,IAAIxB,OAAO,GAAGuC,EAAE,CAACf,EAAD,CAAhB;;UACA,IAAIxB,OAAO,CAACsB,KAAR,KAAkBX,MAAlB,IAA4B,CAACzD,KAAK,CAACe,aAAvC,EAAsD;YAClDoE,WAAW,GAAG,KAAKpB,aAAL,CAAmB/D,KAAK,CAAC0D,aAAN,CAAoBZ,OAAO,CAACsB,KAA5B,CAAnB,CAAd;YACAgB,gBAAgB,GAAGI,QAAQ,CAACC,gBAAT,CAA0B,MAAMN,WAAhC,CAAnB;YACA,KAAKS,eAAL,CAAqB5F,KAArB,EAA4ByD,MAA5B,EAAoC2B,gBAApC,EAAsDD,WAAtD,EAAmE6G,kBAAnE;UACH;QACJ;;QACD,IAAIC,cAAc,GAAG,KAAK3F,iBAAL,CAAuBtG,KAAK,CAAC0D,aAAN,CAAoBD,MAApB,CAAvB,CAArB;;QACA,KAAK,IAAIyI,EAAE,GAAG,CAAT,EAAYC,gBAAgB,GAAGF,cAApC,EAAoDC,EAAE,GAAGC,gBAAgB,CAAC3H,MAA1E,EAAkF0H,EAAE,EAApF,EAAwF;UACpF,IAAIE,aAAa,GAAGD,gBAAgB,CAACD,EAAD,CAApC;;UACA,IAAIlN,iBAAiB,CAACoN,aAAD,CAArB,EAAsC;YAClC;UACH;;UACD,KAAK9B,sBAAL,CAA4B8B,aAA5B,EAA2CjH,WAA3C,EAAwD,KAAxD,EAA+D,IAA/D,EAAqE1B,MAArE;QACH;;QACD,KAAKF,YAAL,GAAoB,IAApB;QACA,KAAKwE,SAAL,CAAe/H,KAAf,EAAsB,IAAIN,KAAJ,CAAU+D,MAAV,EAAkB4I,GAAlB,CAAtB,EAA8CJ,cAA9C;QACA,KAAK1I,YAAL,GAAoBvD,KAAK,CAACa,aAAN,KAAwB,QAA5C;QACA,KAAKiH,UAAL,CAAgB9H,KAAK,CAAC8C,OAAN,CAAcC,EAA9B,EAAkC/C,KAAK,CAAC0D,aAAxC,EAAuD,IAAvD;MACH;IACJ;EACJ,CA5CD;;EA6CA5D,SAAS,CAACnB,SAAV,CAAoBiH,eAApB,GAAsC,UAAU5F,KAAV,EAAiByD,MAAjB,EAAyB2B,gBAAzB,EAA2CD,WAA3C,EAAwD6G,kBAAxD,EAA4E;IAC9G,IAAI5G,gBAAgB,CAACZ,MAAjB,GAA0B,CAA9B,EAAiC;MAC7B,IAAIuB,QAAQ,GAAG,EAAf;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,gBAAgB,CAACZ,MAArC,EAA6CwB,CAAC,EAA9C,EAAkD;QAC9CD,QAAQ,CAACR,IAAT,CAAcH,gBAAgB,CAACY,CAAD,CAA9B;MACH;;MACD,KAAKI,YAAL,CAAkBL,QAAlB;MACA,KAAKxC,YAAL,GAAoB,IAApB;MACA,KAAKmE,gBAAL,CAAsB,KAAKpE,mBAA3B,EAAgD,IAAI5D,KAAJ,CAAU+D,MAAV,EAAkB4I,GAAlB,CAAhD;;MACA,KAAK,IAAI/H,EAAE,GAAG,CAAT,EAAYe,EAAE,GAAGrF,KAAK,CAAC0D,aAA5B,EAA2CY,EAAE,GAAGe,EAAE,CAACb,MAAnD,EAA2DF,EAAE,EAA7D,EAAiE;QAC7D,IAAIgI,KAAK,GAAGjH,EAAE,CAACf,EAAD,CAAd;QACAa,WAAW,GAAG,KAAKpB,aAAL,CAAmBuI,KAAnB,CAAd;;QACA,IAAI9G,QAAQ,CAACC,gBAAT,CAA0B,MAAMN,WAAhC,EAA6CX,MAA7C,GAAsD,CAA1D,EAA6D;UACzD,KAAK,IAAI0H,EAAE,GAAG,CAAT,EAAYK,UAAU,GAAGxG,QAA9B,EAAwCmG,EAAE,GAAGK,UAAU,CAAC/H,MAAxD,EAAgE0H,EAAE,EAAlE,EAAsE;YAClE,IAAIpJ,OAAO,GAAGyJ,UAAU,CAACL,EAAD,CAAxB;YACA,KAAK5B,sBAAL,CAA4BxH,OAA5B,EAAqCqC,WAArC,EAAkD,IAAlD,EAAwD,IAAxD,EAA8D1B,MAA9D;UACH;;UACDuI,kBAAkB,GAAG,KAArB;UACA;QACH;MACJ;;MACD,IAAIA,kBAAJ,EAAwB;QACpB,KAAKzI,YAAL,GAAoBvD,KAAK,CAACa,aAAN,KAAwB,QAA5C;QACA,KAAKiH,UAAL,CAAgB9H,KAAK,CAAC8C,OAAN,CAAcC,EAA9B,EAAkC/C,KAAK,CAAC0D,aAAxC;MACH;IACJ;EACJ,CA1BD;EA2BA;;;EACA5D,SAAS,CAACnB,SAAV,CAAoB2H,iBAApB,GAAwC,UAAU7C,MAAV,EAAkB;IACtD,IAAIwI,cAAc,GAAG,CAACxI,MAAM,CAAC2I,aAAR,CAArB;;IACA,IAAI3I,MAAM,CAACmB,MAAP,CAAcI,OAAd,IAAyBvB,MAAM,CAACsB,IAAP,KAAgB,SAAzC,IAAsDtB,MAAM,CAACsB,IAAP,KAAgB,QAAtE,IAAkF,CAACtB,MAAM,CAAC6B,YAA9F,EAA4G;MACxG2G,cAAc,CAAC1G,IAAf,CAAoB9B,MAAM,CAAC+I,aAA3B;IACH,CAFD,MAGK,IAAI/I,MAAM,CAACmB,MAAP,CAAcI,OAAd,IAAyBvB,MAAM,CAAC6B,YAApC,EAAkD;MACnD2G,cAAc,CAAC1G,IAAf,CAAoB9B,MAAM,CAAC+I,aAA3B;IACH;;IACD,OAAOP,cAAP;EACH,CATD;EAUA;;;EACAnM,SAAS,CAACnB,SAAV,CAAoB6I,WAApB,GAAkC,UAAUzE,EAAV,EAAc;IAC5C,IAAI0J,GAAG,GAAG,CAAC,KAAD,EAAQ,KAAR,CAAV;;IACA,IAAI1J,EAAE,CAAC/B,OAAH,CAAW,aAAX,IAA4B,CAAC,CAAjC,EAAoC;MAChCyL,GAAG,GAAG1J,EAAE,CAAC6E,KAAH,CAAS,aAAT,CAAN;MACA6E,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAZ;IACH,CAHD,MAIK,IAAI1J,EAAE,CAAC/B,OAAH,CAAW,aAAX,IAA4B,CAAC,CAAjC,EAAoC;MACrCyL,GAAG,GAAG1J,EAAE,CAAC6E,KAAH,CAAS,aAAT,CAAN;MACA6E,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAZ;IACH,CAHI,MAIA,IAAI1J,EAAE,CAAC/B,OAAH,CAAW,SAAX,IAAwB,CAAC,CAA7B,EAAgC;MACjCyL,GAAG,GAAG1J,EAAE,CAAC6E,KAAH,CAAS,UAAT,EAAqB,CAArB,EAAwBA,KAAxB,CAA8B,SAA9B,CAAN;IACH,CAFI,MAGA,IAAI7E,EAAE,CAAC/B,OAAH,CAAW,UAAX,IAAyB,CAAC,CAA9B,EAAiC;MAClCyL,GAAG,CAAC,CAAD,CAAH,GAAS1J,EAAE,CAAC6E,KAAH,CAAS,UAAT,EAAqB,CAArB,CAAT;IACH,CAFI,MAGA,IAAI7E,EAAE,CAAC/B,OAAH,CAAW,sBAAX,IAAqC,CAAC,CAA1C,EAA6C;MAC9CyL,GAAG,GAAG1J,EAAE,CAAC6E,KAAH,CAAS,sBAAT,CAAN;MACA6E,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAZ;IACH;;IACD,OAAO,IAAI/M,KAAJ,CAAUgN,QAAQ,CAACD,GAAG,CAAC,CAAD,CAAJ,EAAS,EAAT,CAAlB,EAAgCC,QAAQ,CAACD,GAAG,CAAC,CAAD,CAAJ,EAAS,EAAT,CAAxC,CAAP;EACH,CArBD;EAsBA;AACJ;AACA;AACA;AACA;AACA;;;EACI3M,SAAS,CAACnB,SAAV,CAAoBgO,6BAApB,GAAoD,UAAU3M,KAAV,EAAiB4M,QAAjB,EAA2BC,OAA3B,EAAoC;IACpF,KAAKhB,sBAAL,CAA4B7L,KAA5B,EAAmC,KAAKsD,mBAAxC,EAA6DtD,KAAK,CAACyD,MAAnE;IACA,IAAIqJ,OAAO,GAAG9M,KAAK,CAACa,aAAN,KAAwB,OAAtC;IACA,IAAIkM,IAAI,GAAG,IAAIvN,IAAJ,CAASoN,QAAQ,CAAC9D,CAAlB,EAAqB8D,QAAQ,CAAClE,CAA9B,EAAiCkE,QAAQ,CAACI,KAA1C,EAAiDJ,QAAQ,CAACK,MAA1D,CAAX;IACA,IAAIC,UAAU,GAAG,IAAIjO,aAAJ,CAAkBe,KAAK,CAACsC,oBAAN,CAA2BC,cAA3B,CAA0CuG,CAA5D,EAA+D9I,KAAK,CAACsC,oBAAN,CAA2BC,cAA3B,CAA0CmG,CAAzG,CAAjB;IACA,KAAKyE,YAAL,CAAkBJ,IAAlB,EAAwBG,UAAxB;IACA,IAAI9E,MAAJ;IACA,IAAIhE,KAAJ;IACA,IAAIkE,mBAAmB,GAAG,EAA1B;IACA,IAAI8E,oBAAoB,GAAG,EAA3B;IACA,KAAK7J,YAAL,GAAoB,KAApB;IACA,IAAI8J,YAAY,GAAIrN,KAAK,CAACsN,mBAAP,KAAgC,KAAKC,YAAL,IAAqB,KAAKC,QAA1D,CAAnB;IACA,KAAKpL,UAAL,GAAkB,KAAK5B,aAAL,CAAmB6M,YAAY,GAAG,KAAKI,WAAR,GAAsB,KAAKlN,KAA1D,IACd,IAAIf,IAAJ,CAASoN,QAAQ,CAAC9D,CAAlB,EAAqB8D,QAAQ,CAAClE,CAA9B,EAAiCkE,QAAQ,CAACI,KAA1C,EAAiDJ,QAAQ,CAACK,MAA1D,CADJ;;IAEA,IAAIL,QAAQ,CAACI,KAAT,IAAkBJ,QAAQ,CAACK,MAA3B,IAAqC,CAACJ,OAA1C,EAAmD;MAC/C,IAAIa,EAAE,GAAG,IAAIlO,IAAJ,CAASoN,QAAQ,CAAC9D,CAAlB,EAAqB8D,QAAQ,CAAClE,CAA9B,EAAiCkE,QAAQ,CAACI,KAA1C,EAAiDJ,QAAQ,CAACK,MAA1D,CAAT;MACA,KAAKE,YAAL,CAAkBO,EAAlB,EAAsBR,UAAtB;MACA,KAAKzM,WAAL,CAAiB4M,YAAY,GAAG,KAAKI,WAAR,GAAsB,KAAKlN,KAAxD,IAAiEmN,EAAjE;IACH;;IACD,IAAIC,OAAO,GAAG,UAAUlK,MAAV,EAAkB;MAC5B,IAAIA,MAAM,CAACuB,OAAX,EAAoB;QAChBoD,MAAM,GAAG3E,MAAM,CAAC2E,MAAhB;QACAE,mBAAmB,GAAG,EAAtB;QACA,IAAIsF,aAAJ;QACA,IAAIC,aAAJ;;QACA,IAAI,CAAC7N,KAAK,CAAC8N,YAAN,IAAsBrK,MAAM,CAACsB,IAAP,CAAY/D,OAAZ,CAAoB,KAApB,MAA+B,CAAC,CAAvD,KACA,EAAEhB,KAAK,CAAC8N,YAAN,IAAsBrK,MAAM,CAACsB,IAAP,CAAY/D,OAAZ,CAAoB,KAApB,MAA+B,CAAC,CAAxD,CADJ,EACgE;UAC5D4M,aAAa,GAAGnK,MAAM,CAACsK,KAAP,CAAahB,IAAb,CAAkBrE,CAAlB,GAAsBwE,UAAU,CAACxE,CAAjD;UACAmF,aAAa,GAAGpK,MAAM,CAACuK,KAAP,CAAajB,IAAb,CAAkBjE,CAAlB,GAAsBoE,UAAU,CAACpE,CAAjD;QACH,CAJD,MAKK;UACD8E,aAAa,GAAGnK,MAAM,CAACsK,KAAP,CAAahB,IAAb,CAAkBjE,CAAlB,GAAsBoE,UAAU,CAACpE,CAAjD;UACA+E,aAAa,GAAGpK,MAAM,CAACuK,KAAP,CAAajB,IAAb,CAAkBrE,CAAlB,GAAsBwE,UAAU,CAACxE,CAAjD;QACH;;QACD,KAAK,IAAItB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,MAAM,CAAC5D,MAA3B,EAAmC4C,CAAC,EAApC,EAAwC;UACpC,IAAImB,MAAM,GAAI9E,MAAM,CAACsB,IAAP,KAAgB,WAAhB,IAA+B,iBAAhC,GAAqDqD,MAAM,CAAChB,CAAD,CAAN,CAAUmB,MAA/D,GACTH,MAAM,CAAChB,CAAD,CAAN,CAAUqB,OAAV,CAAkB,CAAlB,EAAqBC,CADzB;UAEA,IAAIuF,cAAc,GAAG,KAAK,CAA1B;UACA,IAAIzF,cAAc,GAAGJ,MAAM,CAAChB,CAAD,CAAN,CAAUuB,MAA/B;;UACA,IAAI3I,KAAK,CAAC4I,YAAN,CAAmBC,SAAnB,KAAiC,UAArC,EAAiD;YAC7CL,cAAc,GAAGJ,MAAM,CAAChB,CAAD,CAAN,CAAU0B,CAAV,CAAYC,cAAZ,EAAjB;UACH,CAFD,MAGK,IAAI/I,KAAK,CAAC4I,YAAN,CAAmBC,SAAnB,KAAiC,UAArC,EAAiD;YAClDL,cAAc,GAAG,IAAIQ,IAAJ,CAASZ,MAAM,CAAChB,CAAD,CAAN,CAAUuB,MAAnB,CAAjB;UACH;;UACD,IAAIlF,MAAM,CAACsB,IAAP,KAAgB,eAApB,EAAqC;YACjCkJ,cAAc,GAAG7F,MAAM,CAAChB,CAAD,CAAN,CAAUqB,OAAV,CAAkByF,IAAlB,CAAuB,UAAUC,MAAV,EAAkB;cACtD,OAAO/O,YAAY,CAAC+O,MAAM,CAACrF,CAAP,GAAW8E,aAAZ,EAA2BO,MAAM,CAACzF,CAAP,GAAWmF,aAAtC,EAAqDd,IAArD,CAAnB;YACH,CAFgB,CAAjB;UAGH,CAJD,MAKK;YACD,IAAI/M,KAAK,CAACa,aAAN,KAAwB,OAA5B,EAAqC;cACjCoN,cAAc,GAAG7F,MAAM,CAAChB,CAAD,CAAN,CAAUgH,QAA3B;YACH,CAFD,MAGK;cACDH,cAAc,GAAIjO,KAAK,CAACsN,mBAAP,GACbe,MAAM,CAACC,aAAP,CAAqBlG,MAAM,CAAChB,CAAD,CAA3B,EAAgCwG,aAAhC,EAA+CC,aAA/C,EAA8DQ,MAAM,CAAC5N,WAArE,CADa,GAEb2H,MAAM,CAAChB,CAAD,CAAN,CAAUmH,eAAV,CAA0BL,IAA1B,CAA+B,UAAUM,QAAV,EAAoB;gBAC/C,OAAOA,QAAQ,IAAIpP,YAAY,CAACoP,QAAQ,CAAC1F,CAAT,GAAa8E,aAAd,EAA6BY,QAAQ,CAAC9F,CAAT,GAAamF,aAA1C,EAAyDd,IAAzD,CAA/B;cACH,CAFD,CAFJ;YAKH;UACJ;;UACD,IAAIkB,cAAc,IAAIxK,MAAM,CAACwF,QAAP,KAAoB,WAA1C,EAAuD;YACnD7E,KAAK,GAAG,IAAI1E,KAAJ,CAAU+D,MAAM,CAACW,KAAjB,EAAwBgE,MAAM,CAAChB,CAAD,CAAN,CAAUhD,KAAlC,CAAR;YACAiK,MAAM,CAACtG,SAAP,CAAiB/H,KAAjB,EAAwBoE,KAAxB,EAA+BiK,MAAM,CAAChI,YAAP,CAAoBrG,KAApB,EAA2ByD,MAA3B,EAAmCW,KAAnC,EAA0C,EAA1C,EAA8C,CAACX,MAAM,CAAC6B,YAAR,GAAuB7B,MAAM,CAACmB,MAAP,CAAcI,OAArC,GAA+C,KAA7F,CAA/B;YACAsD,mBAAmB,CAAC/C,IAApB,CAAyB;cAAEuD,CAAC,EAAEN,cAAL;cAAqBE,CAAC,EAAEH;YAAxB,CAAzB;UACH;;UACD,IAAI0F,cAAc,KAAKxK,MAAM,CAACsB,IAAP,KAAgB,WAAhB,IAA+BtB,MAAM,CAACsB,IAAP,KAAgB,iBAApD,CAAlB,EAA0F;YACtFuD,mBAAmB,CAAC/C,IAApB,CAAyB;cAAEuD,CAAC,EAAEN,cAAL;cAAqBE,CAAC,EAAEN,MAAM,CAAChB,CAAD,CAAN,CAAUqB,OAAV,CAAkB,CAAlB,EAAqBC;YAA7C,CAAzB;UACH;QACJ;;QACD0E,oBAAoB,CAAC7H,IAArB,CAA0B+C,mBAA1B;MACH;IACJ,CAtDD;;IAuDA,IAAI+F,MAAM,GAAG,IAAb;;IACA,KAAK,IAAI/J,EAAE,GAAG,CAAT,EAAYe,EAAE,GAAGrF,KAAK,CAAC0D,aAA5B,EAA2CY,EAAE,GAAGe,EAAE,CAACb,MAAnD,EAA2DF,EAAE,EAA7D,EAAiE;MAC7D,IAAIb,MAAM,GAAG4B,EAAE,CAACf,EAAD,CAAf;;MACAqJ,OAAO,CAAClK,MAAD,CAAP;IACH;;IACD,KAAKqE,UAAL,CAAgB9H,KAAK,CAAC8C,OAAN,CAAcC,EAA9B,EAAkC/C,KAAK,CAAC0D,aAAxC;IACA,IAAIoF,CAAC,GAAGgE,OAAO,GAAG9M,KAAK,CAACwC,UAAT,GAAuBoK,QAAQ,CAAC9D,CAAT,GAAa8D,QAAQ,CAACI,KAA5D;IACA,IAAItE,CAAC,GAAGoE,OAAO,GAAG9M,KAAK,CAACyC,UAAT,GAAsBmK,QAAQ,CAAClE,CAA9C;;IACA,IAAI,CAACmE,OAAL,EAAc;MACV,KAAK4B,iBAAL,CAAuB3F,CAAvB,EAA0BJ,CAA1B;IACH;;IACD,IAAIQ,IAAI,GAAG;MACPC,IAAI,EAAExJ,YADC;MAEPyJ,kBAAkB,EAAEgE,oBAFb;MAGP/D,MAAM,EAAE;IAHD,CAAX;IAKArJ,KAAK,CAACsJ,OAAN,CAAc3J,YAAd,EAA4BuJ,IAA5B;EACH,CA3FD;;EA4FApJ,SAAS,CAACnB,SAAV,CAAoBwO,YAApB,GAAmC,UAAUJ,IAAV,EAAgB2B,IAAhB,EAAsB;IACrD3B,IAAI,CAACjE,CAAL,IAAU4F,IAAI,CAAC5F,CAAf;IACAiE,IAAI,CAACrE,CAAL,IAAUgG,IAAI,CAAChG,CAAf;EACH,CAHD;;EAIA5I,SAAS,CAACnB,SAAV,CAAoB2P,aAApB,GAAoC,UAAUlG,MAAV,EAAkBuG,WAAlB,EAA+BC,WAA/B,EAA4CC,cAA5C,EAA4D;IAC5F,IAAIL,QAAQ,GAAGpG,MAAM,CAACmG,eAAP,CAAuB,CAAvB,CAAf;;IACA,KAAK,IAAIjK,EAAE,GAAG,CAAT,EAAYwK,gBAAgB,GAAGD,cAApC,EAAoDvK,EAAE,GAAGwK,gBAAgB,CAACtK,MAA1E,EAAkFF,EAAE,EAApF,EAAwF;MACpF,IAAIyI,IAAI,GAAG+B,gBAAgB,CAACxK,EAAD,CAA3B;;MACA,IAAIyI,IAAI,IAAIyB,QAAR,IAAoBpP,YAAY,CAACoP,QAAQ,CAAC1F,CAAT,GAAa6F,WAAd,EAA2BH,QAAQ,CAAC9F,CAAT,GAAakG,WAAxC,EAAqD7B,IAArD,CAApC,EAAgG;QAC5F,OAAO,IAAP;MACH;IACJ;;IACD,OAAO,KAAP;EACH,CATD;EAUA;AACJ;AACA;AACA;AACA;AACA;;;EACIjN,SAAS,CAACnB,SAAV,CAAoBoQ,gBAApB,GAAuC,UAAU/O,KAAV,EAAiB4M,QAAjB,EAA2BlG,MAA3B,EAAmC;IACtE,IAAIsI,eAAe,GAAGhP,KAAK,CAACsC,oBAAN,CAA2BC,cAAjD;IACA,IAAI0M,MAAM,GAAGjP,KAAK,CAACkP,SAAN,CAAgBD,MAAhB,CAAuBjC,KAApC;IACA,IAAImC,QAAQ,GAAGnP,KAAK,CAACoP,UAAN,CAAiBC,iBAAhC;IACA,IAAIC,UAAU,GAAGtP,KAAK,CAACoP,UAAN,CAAiBG,mBAAlC;IACA,IAAIzC,OAAO,GAAG9M,KAAK,CAACa,aAAN,KAAwB,OAAtC;;IACA,IAAI,KAAKV,UAAT,EAAqB;MACjB6O,eAAe,CAAClG,CAAhB,GAAoBkG,eAAe,CAAClG,CAAhB,GAAoBmG,MAAM,GAAG,CAAjD;MACAD,eAAe,CAACtG,CAAhB,GAAoBsG,eAAe,CAACtG,CAAhB,GAAoBuG,MAAM,GAAG,CAAjD;MACAD,eAAe,CAAChC,KAAhB,GAAwBgC,eAAe,CAAChC,KAAhB,GAAwBiC,MAAhD;MACAD,eAAe,CAAC/B,MAAhB,GAAyB+B,eAAe,CAAC/B,MAAhB,GAAyBgC,MAAlD;MACA,KAAK9O,UAAL,GAAkB,KAAlB;IACH;;IACD,QAAQH,KAAK,CAACa,aAAd;MACI,KAAK,OAAL;QACI+L,QAAQ,CAAClE,CAAT,GAAasG,eAAe,CAACtG,CAA7B;QACAkE,QAAQ,CAACK,MAAT,GAAkB+B,eAAe,CAAC/B,MAAlC;QACA;;MACJ,KAAK,OAAL;QACIL,QAAQ,CAAC9D,CAAT,GAAakG,eAAe,CAAClG,CAA7B;QACA8D,QAAQ,CAACI,KAAT,GAAiBgC,eAAe,CAAChC,KAAjC;QACA;IARR;;IAUA,IAAI,CAACJ,QAAQ,CAACI,KAAT,GAAiB,CAAjB,IAAsBJ,QAAQ,CAACK,MAAT,GAAkB,CAAzC,KAA+C,CAACH,OAApD,EAA6D;MACzD,OAAO,IAAP;IACH;;IACD,IAAI0C,UAAU,GAAGxP,KAAK,CAACa,aAAN,CAAoBG,OAApB,CAA4B,MAA5B,IAAsC,CAAC,CAAvC,IAA4ChB,KAAK,CAACa,aAAN,KAAwB,OAArF;;IACA,IAAKb,KAAK,CAACsN,mBAAP,IAA+BkC,UAAnC,EAA+C;MAC3C,IAAI1M,OAAO,GAAG,KAAK,CAAnB;MACA,IAAI2M,SAAS,GAAG,KAAK,CAArB;MACA,IAAIC,UAAU,GAAGnQ,UAAU,CAAC,KAAK4D,cAAN,CAA3B;;MACA,IAAI,CAACuM,UAAL,EAAiB;QACbA,UAAU,GAAG1P,KAAK,CAAC2P,WAAN,CAAkBC,WAAlB,CAA8B;UAAE7M,EAAE,EAAE,KAAKI;QAAX,CAA9B,CAAb;QACAnD,KAAK,CAAC6P,SAAN,CAAgBC,WAAhB,CAA4BJ,UAA5B;MACH;;MACD,IAAI,KAAKnC,YAAL,IAAqB,KAAKC,QAA9B,EAAwC;QACpC,IAAIuC,WAAW,GAAG,KAAK,CAAvB;QACAA,WAAW,GAAGxQ,UAAU,CAAC,KAAK6D,WAAL,GAAmB,KAAKqK,WAAzB,CAAxB;;QACA,IAAIsC,WAAW,CAACC,WAAhB,EAA6B;UACzBlR,MAAM,CAACiR,WAAW,CAACC,WAAb,CAAN;QACH;;QACD,KAAKC,aAAL,CAAmBF,WAAnB,EAAgCnD,QAAhC;MACH,CAPD,MAQK,IAAI,CAACrN,UAAU,CAAC,KAAK2D,gBAAL,GAAwB,KAAK3C,KAA9B,CAAf,EAAqD;QACtDkP,SAAS,GAAGzP,KAAK,CAAC2P,WAAN,CAAkBC,WAAlB,CAA8B;UAAE7M,EAAE,EAAE,KAAKG,gBAAL,GAAwB,KAAK3C;QAAnC,CAA9B,CAAZ;QACA,IAAI2P,UAAU,GAAG1K,QAAQ,CAACgE,cAAT,CAAwBxJ,KAAK,CAAC8C,OAAN,CAAcC,EAAd,GAAmB,aAA3C,CAAjB,CAFsD,CAGtD;;QACA/C,KAAK,CAACmQ,YAAN,GAAqBD,UAAU,CAACJ,WAAX,CAAuBL,SAAvB,CAArB,GAAyDC,UAAU,CAACI,WAAX,CAAuBL,SAAvB,CAAzD;MACH;;MACD,IAAI,EAAEzP,KAAK,CAACa,aAAN,KAAwB,OAA1B,CAAJ,EAAwC;QACpCiC,OAAO,GAAG9C,KAAK,CAAC2P,WAAN,CAAkBS,aAAlB,CAAgC,IAAIlR,UAAJ,CAAe,KAAKkE,WAAL,GAAmB,KAAK7C,KAAvC,EAA8C4O,QAA9C,EAAwD;UAAEkB,KAAK,EAAEf,UAAT;UAAqBtC,KAAK,EAAE;QAA5B,CAAxD,EAAyF,CAAzF,EAA4FJ,QAA5F,CAAhC,CAAV;QACA9J,OAAO,CAACwN,KAAR,CAAcC,MAAd,GAAuB,MAAvB;MACH,CAHD,MAIK;QACDzN,OAAO,GAAG9C,KAAK,CAAC2P,WAAN,CAAkBa,QAAlB,CAA2B,IAAI/Q,UAAJ,CAAe,KAAK4D,SAAL,GAAiB,KAAK9C,KAArC,EAA4C4O,QAA5C,EAAsD,CAAtD,EAAyDG,UAAzD,EAAqE,CAArE,EAAwE,EAAxE,EAA4E,KAAKmB,IAAjF,CAA3B,CAAV;MACH;;MACD,IAAI,CAAChB,SAAD,IAAc,CAAC,KAAKlC,YAApB,IAAoC,CAAC,KAAKC,QAA9C,EAAwD;QACpDjO,UAAU,CAAC,KAAK2D,gBAAL,GAAwB,KAAK3C,KAA9B,CAAV,CAA+CuP,WAA/C,CAA2DhN,OAA3D;MACH,CAFD,MAGK,IAAI,CAAC,KAAKyK,YAAN,IAAsB,CAAC,KAAKC,QAAhC,EAA0C;QAC3CiC,SAAS,CAACK,WAAV,CAAsBhN,OAAtB;MACH;IACJ,CAnCD,MAoCK;MACD,IAAIA,OAAO,GAAGgK,OAAO,GACjBvN,UAAU,CAAC,KAAK8D,SAAN,CADO,GACY9D,UAAU,CAAC,KAAK6D,WAAN,CAD3C;;MAEA,IAAI,KAAKsN,SAAT,EAAoB;QAChBpR,aAAa,CAAC,KAAK2D,WAAN,CAAb;MACH;;MACD,IAAIH,OAAJ,EAAa;QACT,IAAIgK,OAAJ,EAAa;UACThK,OAAO,CAACwE,YAAR,CAAqB,GAArB,EAA0B,KAAKmJ,IAA/B;QACH,CAFD,MAGK;UACD,KAAKR,aAAL,CAAmBnN,OAAnB,EAA4B8J,QAA5B;QACH;MACJ,CAPD,MAQK;QACD,IAAI6C,SAAS,GAAGzP,KAAK,CAAC2P,WAAN,CAAkBC,WAAlB,CAA8B;UAAE7M,EAAE,EAAE,KAAKG;QAAX,CAA9B,CAAhB;QACA,IAAIgN,UAAU,GAAG1K,QAAQ,CAACgE,cAAT,CAAwBxJ,KAAK,CAAC8C,OAAN,CAAcC,EAAd,GAAmB,aAA3C,CAAjB,CAFC,CAGD;;QACA/C,KAAK,CAACmQ,YAAN,GAAqBD,UAAU,CAACJ,WAAX,CAAuBL,SAAvB,CAArB,GAAyDzP,KAAK,CAAC6P,SAAN,CAAgBC,WAAhB,CAA4BL,SAA5B,CAAzD;;QACA,IAAI,EAAEzP,KAAK,CAACa,aAAN,KAAwB,OAA1B,CAAJ,EAAwC;UACpCiC,OAAO,GAAG9C,KAAK,CAAC2P,WAAN,CAAkBS,aAAlB,CAAgC,IAAIlR,UAAJ,CAAe,KAAKkE,WAApB,EAAiC+L,QAAjC,EAA2C;YAAEkB,KAAK,EAAEf,UAAT;YAAqBtC,KAAK,EAAE;UAA5B,CAA3C,EAA4E,CAA5E,EAA+EJ,QAA/E,CAAhC,CAAV;QACH,CAFD,MAGK;UACD9J,OAAO,GAAG9C,KAAK,CAAC2P,WAAN,CAAkBa,QAAlB,CAA2B,IAAI/Q,UAAJ,CAAe,KAAK4D,SAApB,EAA+B8L,QAA/B,EAAyC,CAAzC,EAA4CG,UAA5C,EAAwD,CAAxD,EAA2D,EAA3D,EAA+D,KAAKmB,IAApE,CAA3B,CAAV;QACH;;QACDhB,SAAS,CAACK,WAAV,CAAsBhN,OAAtB;MACH;IACJ;EACJ,CA3FD;EA4FA;AACJ;AACA;AACA;AACA;;;EACIhD,SAAS,CAACnB,SAAV,CAAoBgS,QAApB,GAA+B,UAAU5N,EAAV,EAAc;IACzC,IAAIiD,CAAJ;;IACA,KAAKA,CAAC,GAAGjD,EAAE,CAACyB,MAAH,GAAY,CAArB,EAAwBwB,CAAC,GAAG,CAA5B,EAA+BA,CAAC,EAAhC,EAAoC;MAChC,IAAI8C,CAAC,GAAG8H,MAAM,CAAC7N,EAAE,CAACiD,CAAD,CAAH,CAAd;;MACA,IAAI,CAACgC,KAAK,CAACc,CAAD,CAAV,EAAe;QACX;MACH,CAFD,MAGK;QACD;MACH;IACJ;;IACD,IAAI1E,KAAK,GAAG,CAACrB,EAAE,CAAC8N,MAAH,CAAU7K,CAAC,GAAG,CAAd,EAAiBjD,EAAE,CAACyB,MAAH,GAAY,CAA7B,CAAb;IACA,OAAOJ,KAAP;EACH,CAbD;;EAcAtE,SAAS,CAACnB,SAAV,CAAoB8P,iBAApB,GAAwC,UAAU3F,CAAV,EAAaJ,CAAb,EAAgB;IACpD,IAAI5H,WAAW,GAAG,KAAKd,KAAL,CAAWsN,mBAA7B;IACA,IAAIwD,YAAY,GAAG,KAAK9Q,KAAL,CAAWoP,UAAX,CAAsB2B,qBAAzC;IACA,IAAIC,MAAM,GAAG,KAAKzD,YAAL,IAAqB,KAAKC,QAAvC;IACA,IAAIkD,SAAS,GAAG,KAAK1Q,KAAL,CAAW2P,WAAX,CAAuBC,WAAvB,CAAmC;MAC/C7M,EAAE,EAAE,KAAKE,WAAL,IAAoBnC,WAAW,GAAIkQ,MAAM,GAAG,KAAKvD,WAAR,GAAsB,KAAKlN,KAArC,GAA8C,EAA7E,CAD2C;MAE/C+P,KAAK,EAAE;IAFwC,CAAnC,CAAhB;IAIAI,SAAS,CAACZ,WAAV,CAAsB,KAAK9P,KAAL,CAAW2P,WAAX,CAAuBsB,UAAvB,CAAkC,IAAI9R,YAAJ,CAAiB,KAAK8D,WAAL,GAAmB,SAAnB,IAAgCnC,WAAW,GAAIkQ,MAAM,GAAG,KAAKvD,WAAR,GAAsB,KAAKlN,KAArC,GAA8C,EAAzF,CAAjB,EAA+G,SAA/G,EAA0H;MAAE8P,KAAK,EAAES,YAAT;MAAuB9D,KAAK,EAAE;IAA9B,CAA1H,EAA6J,CAA7J,EAAgKlE,CAAhK,EAAmKJ,CAAnK,EAAsK,EAAtK,CAAlC,CAAtB;IACA,IAAIwI,SAAS,GAAG,QAAQpI,CAAC,GAAG,CAAZ,IAAiB,GAAjB,IAAwBJ,CAAC,GAAG,CAA5B,IAAiC,KAAjC,IAA0CI,CAAC,GAAG,CAA9C,IAAmD,GAAnD,IAA0DJ,CAAC,GAAG,CAA9D,IAAmE,KAAnE,IAA4EI,CAAC,GAAG,CAAhF,IAAqF,GAArF,IAA4FJ,CAAC,GAAG,CAAhG,IACZ,KADY,IACHI,CAAC,GAAG,CADD,IACM,GADN,IACaJ,CAAC,GAAG,CADjB,CAAhB;IAEAgI,SAAS,CAACZ,WAAV,CAAsB,KAAK9P,KAAL,CAAW2P,WAAX,CAAuBa,QAAvB,CAAgC;MAClDzN,EAAE,EAAE,KAAKE,WAAL,GAAmB,QAAnB,IACCnC,WAAW,GAAIkQ,MAAM,GAAG,KAAKvD,WAAR,GAAsB,KAAKlN,KAArC,GAA8C,EAD1D,CAD8C;MAEiBtC,CAAC,EAAEiT,SAFpB;MAGlDC,MAAM,EAAEL,YAH0C;MAG5B,gBAAgB,CAHY;MAGTM,IAAI,EAAEN;IAHG,CAAhC,CAAtB;IAKA,KAAKJ,SAAL,GAAiBA,SAAjB;IACA,IAAIW,WAAW,GAAG9R,UAAU,CAAC,KAAK2D,gBAAL,IAAyBpC,WAAW,GAAIkQ,MAAM,GAAG,KAAKvD,WAAR,GAAsB,KAAKlN,KAArC,GAA8C,EAAlF,CAAD,CAA5B;;IACA,IAAI8Q,WAAJ,EAAiB;MACbA,WAAW,CAACvB,WAAZ,CAAwBY,SAAxB;IACH;EACJ,CArBD;EAsBA;AACJ;AACA;AACA;AACA;AACA;;;EACI5Q,SAAS,CAACnB,SAAV,CAAoB2S,qBAApB,GAA4C,UAAUtR,KAAV,EAAiBwG,KAAjB,EAAwB;IAChE,IAAKA,KAAK,CAACE,MAAN,CAAa3D,EAAb,CAAgB/B,OAAhB,CAAwB,KAAKiC,WAA7B,IAA4C,CAAC,CAA9C,IAAqDuD,KAAK,CAACzB,IAAN,CAAW/D,OAAX,CAAmB,MAAnB,MAA+B,CAAC,CAAzF,EAA6F;MACzF,IAAIuQ,gBAAgB,GAAG,IAAvB;;MACA,IAAKvR,KAAK,CAACsN,mBAAX,EAAiC;QAC7B,IAAIlJ,KAAK,GAAG,KAAKuM,QAAL,CAAcnK,KAAK,CAACE,MAAN,CAAa3D,EAA3B,CAAZ;QACA,IAAIyO,qBAAqB,GAAGjS,UAAU,CAAC,KAAK4D,cAAN,CAAtC;QACArE,MAAM,CAACS,UAAU,CAAC,KAAK2D,gBAAL,GAAwBkB,KAAzB,CAAX,CAAN;QACA,KAAK5D,aAAL,CAAmB4D,KAAnB,IAA4B,IAA5B;QACA,KAAK3D,WAAL,CAAiB2D,KAAjB,IAA0B,IAA1B;QACA,KAAK1D,mBAAL,CAAyB0D,KAAzB,IAAkC,IAAlC;;QACA,IAAIoN,qBAAqB,IAAIA,qBAAqB,CAACC,iBAAtB,KAA4C,CAAzE,EAA4E;UACxEnS,aAAa,CAACkS,qBAAD,CAAb;UACA,KAAKhR,aAAL,GAAqB,EAArB;UACA,KAAKC,WAAL,GAAmB,EAAnB;UACA,KAAKC,mBAAL,GAA2B,EAA3B;QACH;;QACD,IAAI,KAAKkD,WAAL,KAAqB,OAAzB,EAAkC;UAC9B,IAAI,KAAKxD,gBAAL,CAAsBgE,KAAtB,KAAgC,IAApC,EAA0C;YACtC,KAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK5F,gBAAL,CAAsBgE,KAAtB,EAA6BI,MAAjD,EAAyDwB,CAAC,EAA1D,EAA8D;cAC1D,KAAK5F,gBAAL,CAAsBgE,KAAtB,EAA6B4B,CAA7B,EAAgCoI,QAAhC,GAA2C,KAA3C;YACH;UACJ;;UACD,KAAKhO,gBAAL,CAAsBgE,KAAtB,IAA+B,IAA/B;;UACA,KAAK,IAAIgD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhH,gBAAL,CAAsBoE,MAA1C,EAAkD4C,CAAC,EAAnD,EAAuD;YACnD,IAAI,KAAKhH,gBAAL,CAAsBgH,CAAtB,KAA4B,IAAhC,EAAsC;cAClCmK,gBAAgB,GAAG,KAAnB;;cACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKtR,gBAAL,CAAsBgH,CAAtB,EAAyB5C,MAA7C,EAAqDkN,CAAC,EAAtD,EAA0D;gBACtD,KAAKtR,gBAAL,CAAsBgH,CAAtB,EAAyBsK,CAAzB,EAA4BtD,QAA5B,GAAuC,IAAvC;cACH;YACJ;UACJ;;UACD,KAAKzB,6BAAL,CAAmC3M,KAAnC,EAA0C,KAAK4M,QAA/C,EAAyD,IAAzD;QACH,CAhBD,MAiBK,IAAI,KAAKnM,WAAL,CAAiB+D,MAArB,EAA6B;UAC9B,KAAK,IAAIwB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKvF,WAAL,CAAiB+D,MAArC,EAA6CwB,CAAC,EAA9C,EAAkD;YAC9C,IAAI,KAAKvF,WAAL,CAAiBuF,CAAjB,CAAJ,EAAyB;cACrBuL,gBAAgB,GAAG,KAAnB;cACA,KAAK5E,6BAAL,CAAmC3M,KAAnC,EAA0C,KAAKS,WAAL,CAAiBuF,CAAjB,CAA1C,EAA+D,IAA/D;YACH;UACJ;QACJ,CAPI,MAQA;UACD,KAAK2G,6BAAL,CAAmC3M,KAAnC,EAA0C,IAAIR,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA1C,EAAgE,IAAhE;QACH;MACJ,CAzCD,MA0CK;QACDV,MAAM,CAACS,UAAU,CAAC,KAAK2D,gBAAN,CAAX,CAAN;QACA,KAAK2I,sBAAL,CAA4B7L,KAA5B,EAAmC,KAAKsD,mBAAxC,EAA6DtD,KAAK,CAACyD,MAAnE;MACH;;MACD,KAAKqE,UAAL,CAAgB9H,KAAK,CAAC8C,OAAN,CAAcC,EAA9B,EAAkC/C,KAAK,CAAC0D,aAAxC;MACA,KAAKiO,iBAAL,CAAuB,KAAvB,EAA8B3R,KAAK,CAAC6P,SAApC,EAA+C,MAA/C;;MACA,IAAI,CAAE7P,KAAK,CAACsN,mBAAR,IAAgCiE,gBAApC,EAAsD;QAClD,KAAKnP,UAAL,GAAkB,IAAlB;MACH;IACJ;EACJ,CAvDD;EAwDA;AACJ;AACA;AACA;AACA;AACA;;;EACItC,SAAS,CAACnB,SAAV,CAAoBiT,qBAApB,GAA4C,UAAU5R,KAAV,EAAiBwO,QAAjB,EAA2BqD,MAA3B,EAAmCnL,MAAnC,EAA2C;IACnF,IAAIqG,IAAJ;;IACA,IAAM/M,KAAK,CAACsN,mBAAP,IAAgC5G,MAAM,CAAC3D,EAAP,CAAU/B,OAAV,CAAkB,gBAAlB,IAAsC,CAAC,CAAxE,IACA,KAAKR,aAAL,CAAmB,KAAKiN,WAAxB,CADJ,EAC0C;MACtC,IAAI/G,MAAM,CAAC3D,EAAP,CAAU/B,OAAV,CAAkB,gBAAlB,IAAsC,CAAC,CAA3C,EAA8C;QAC1C,KAAKyM,WAAL,GAAmB,KAAKkD,QAAL,CAAcjK,MAAM,CAAC3D,EAArB,CAAnB;MACH;;MACD,IAAI+O,CAAC,GAAG,KAAKtR,aAAL,CAAmB,KAAKiN,WAAxB,CAAR;MACAV,IAAI,GAAG,IAAIvN,IAAJ,CAASsS,CAAC,CAAChJ,CAAX,EAAcgJ,CAAC,CAACpJ,CAAhB,EAAmBoJ,CAAC,CAAC9E,KAArB,EAA4B8E,CAAC,CAAC7E,MAA9B,CAAP;IACH;;IACD,IAAI,CAAEjN,KAAK,CAACsN,mBAAZ,EAAkC;MAC9BP,IAAI,GAAG,IAAIvN,IAAJ,CAAS,KAAK4C,UAAL,CAAgB0G,CAAzB,EAA4B,KAAK1G,UAAL,CAAgBsG,CAA5C,EAA+C,KAAKtG,UAAL,CAAgB4K,KAA/D,EAAsE,KAAK5K,UAAL,CAAgB6K,MAAtF,CAAP;IACH;;IACD,IAAIF,IAAJ,EAAU;MACN,IAAIgF,MAAM,GAAG,KAAKC,cAAL,CAAoBhS,KAAK,CAAC6P,SAA1B,EAAqC9C,IAArC,EAA2CyB,QAA3C,CAAb;;MACA,IAAI,KAAKhB,QAAT,EAAmB;QACfT,IAAI,GAAG1N,sBAAsB,CAAC0N,IAAI,CAACjE,CAAN,EAASiE,IAAI,CAACrE,CAAd,EAAkBqE,IAAI,CAACjE,CAAL,GAASiE,IAAI,CAACC,KAAhC,EAAyCD,IAAI,CAACrE,CAAL,GAASqE,IAAI,CAACE,MAAvD,EAAgEjN,KAAK,CAACsC,oBAAN,CAA2BC,cAA3F,CAA7B;QACA,KAAKwM,gBAAL,CAAsB/O,KAAtB,EAA6B+M,IAA7B;QACA,KAAKH,QAAL,GAAgBG,IAAhB;MACH;;MACD,IAAI8E,MAAJ,EAAY;QACR,KAAKrE,QAAL,GAAgBuE,MAAhB;MACH;IACJ,CAVD,MAWK;MACD;IACH;EACJ,CA3BD;;EA4BAjS,SAAS,CAACnB,SAAV,CAAoBqT,cAApB,GAAqC,UAAUC,cAAV,EAA0BlF,IAA1B,EAAgCyB,QAAhC,EAA0C;IAC3E,IAAI0D,WAAW,GAAG,WAAlB;IACA,IAAIH,MAAM,GAAG,KAAb;;IACA,IAAI,CAAC,KAAKvE,QAAV,EAAoB;MAChB,IAAI2E,WAAW,GAAG,CAAC,IAAI3S,IAAJ,CAASuN,IAAI,CAACjE,CAAd,EAAkBiE,IAAI,CAACrE,CAAvB,EAA2BqE,IAAI,CAACC,KAAL,GAAa,CAAxC,EAA2C,CAA3C,CAAD,EACd,IAAIxN,IAAJ,CAAUuN,IAAI,CAACjE,CAAf,EAAmBiE,IAAI,CAACrE,CAAxB,EAA2B,CAA3B,EAA8BqE,IAAI,CAACE,MAAnC,CADc,EAEd,IAAIzN,IAAJ,CAASuN,IAAI,CAACjE,CAAd,EAAkBiE,IAAI,CAACrE,CAAL,GAASqE,IAAI,CAACE,MAAd,GAAuB,CAAzC,EAA6CF,IAAI,CAACC,KAAL,GAAa,CAA1D,EAA6D,CAA7D,CAFc,EAGd,IAAIxN,IAAJ,CAAUuN,IAAI,CAACjE,CAAL,GAASiE,IAAI,CAACC,KAAd,GAAsB,CAAhC,EAAoCD,IAAI,CAACrE,CAAL,GAAS,CAA7C,EAAgD,CAAhD,EAAmDqE,IAAI,CAACE,MAAL,GAAc,EAAjE,CAHc,EAId,IAAIzN,IAAJ,CAAUuN,IAAI,CAACjE,CAAL,GAASiE,IAAI,CAACC,KAAd,GAAsB,EAAhC,EAAsCD,IAAI,CAACrE,CAAL,GAASqE,IAAI,CAACE,MAAd,GAAuB,EAA7D,EAAkE,EAAlE,EAAsE,EAAtE,CAJc,CAAlB,CADgB,CAKgE;;MAChF,KAAK,IAAIjH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmM,WAAW,CAAC3N,MAAhC,EAAwCwB,CAAC,EAAzC,EAA6C;QACzC,IAAI5G,YAAY,CAACoP,QAAQ,CAAC1F,CAAV,EAAa0F,QAAQ,CAAC9F,CAAtB,EAAyByJ,WAAW,CAACnM,CAAD,CAApC,CAAhB,EAA0D;UACtDkM,WAAW,GAAIlM,CAAC,KAAK,CAAP,GAAYkM,WAAZ,GAA2BlM,CAAC,GAAG,CAAJ,KAAU,CAAX,GAAgB,WAAhB,GAA8B,WAAtE;UACA+L,MAAM,GAAG,IAAT;UACA,KAAKK,UAAL,GAAkBpM,CAAlB;UACA;QACH;MACJ;IACJ,CAdD,MAeK;MACD,IAAI8C,CAAC,GAAGiE,IAAI,CAACjE,CAAb;MACA,IAAIJ,CAAC,GAAGqE,IAAI,CAACrE,CAAb;MACA,IAAIsE,KAAK,GAAIwB,QAAQ,CAAC1F,CAAT,GAAaA,CAA1B;MACA,IAAImE,MAAM,GAAIuB,QAAQ,CAAC9F,CAAT,GAAaA,CAA3B;;MACA,QAAQ,KAAK0J,UAAb;QACI,KAAK,CAAL;UACInF,MAAM,GAAGoF,IAAI,CAACC,GAAL,CAAUvF,IAAI,CAACE,MAAL,GAAcF,IAAI,CAACrE,CAApB,GAAyB8F,QAAQ,CAAC9F,CAA3C,CAAT;UACAqE,IAAI,CAACrE,CAAL,GAAS2J,IAAI,CAACE,GAAL,CAAUxF,IAAI,CAACE,MAAL,GAAcF,IAAI,CAACrE,CAA7B,EAAiC8F,QAAQ,CAAC9F,CAA1C,CAAT;UACAqE,IAAI,CAACE,MAAL,GAAcA,MAAd;UACA;;QACJ,KAAK,CAAL;UACID,KAAK,GAAGqF,IAAI,CAACC,GAAL,CAAUvF,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACjE,CAAnB,GAAwB0F,QAAQ,CAAC1F,CAA1C,CAAR;UACAiE,IAAI,CAACjE,CAAL,GAASuJ,IAAI,CAACE,GAAL,CAAUxF,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACjE,CAA5B,EAAgC0F,QAAQ,CAAC1F,CAAzC,CAAT;UACAiE,IAAI,CAACC,KAAL,GAAaA,KAAb;UACA;;QACJ,KAAK,CAAL;UACID,IAAI,CAACE,MAAL,GAAcoF,IAAI,CAACC,GAAL,CAASrF,MAAT,CAAd;UACAF,IAAI,CAACrE,CAAL,GAAS2J,IAAI,CAACE,GAAL,CAAS/D,QAAQ,CAAC9F,CAAlB,EAAqBA,CAArB,CAAT;UACA;;QACJ,KAAK,CAAL;UACIqE,IAAI,CAACC,KAAL,GAAaqF,IAAI,CAACC,GAAL,CAAStF,KAAT,CAAb;UACAD,IAAI,CAACjE,CAAL,GAASuJ,IAAI,CAACE,GAAL,CAAS/D,QAAQ,CAAC1F,CAAlB,EAAqBA,CAArB,CAAT;UACA;;QACJ,KAAK,CAAL;UACIiE,IAAI,CAACC,KAAL,GAAaqF,IAAI,CAACC,GAAL,CAAStF,KAAT,CAAb;UACAD,IAAI,CAACE,MAAL,GAAcoF,IAAI,CAACC,GAAL,CAASrF,MAAT,CAAd;UACAF,IAAI,CAACjE,CAAL,GAASuJ,IAAI,CAACE,GAAL,CAAS/D,QAAQ,CAAC1F,CAAlB,EAAqBA,CAArB,CAAT;UACAiE,IAAI,CAACrE,CAAL,GAAS2J,IAAI,CAACE,GAAL,CAAS/D,QAAQ,CAAC9F,CAAlB,EAAqBA,CAArB,CAAT;UACA;MAxBR;IA0BH;;IACD,IAAI,KAAK9E,WAAL,KAAqB,OAAzB,EAAkC;MAC9B,KAAK+N,iBAAL,CAAuBI,MAAvB,EAA+BxS,UAAU,CAAE,KAAKS,KAAL,CAAWsN,mBAAZ,GAAmC,KAAKlK,WAAL,GACzE,KAAKqK,WADiC,GACnB,KAAKrK,WADa,CAAzC,EAC0C8O,WAD1C;IAEH;;IACD,KAAKP,iBAAL,CAAuBI,MAAvB,EAA+BE,cAA/B,EAA+CC,WAA/C;IACA,OAAOH,MAAP;EACH,CAxDD;;EAyDAjS,SAAS,CAACnB,SAAV,CAAoBgT,iBAApB,GAAwC,UAAUa,QAAV,EAAoBC,WAApB,EAAiCP,WAAjC,EAA8C;IAClFA,WAAW,GAAGM,QAAQ,GAAGN,WAAH,GAAkB,KAAK3K,OAAL,CAAasI,SAAb,KAA2B4C,WAA5B,GAA2C,MAA3C,GAAoD,MAA3F;;IACA,IAAIA,WAAJ,EAAiB;MACbA,WAAW,CAACnC,KAAZ,CAAkBC,MAAlB,GAA2B2B,WAA3B;IACH;EACJ,CALD;;EAMApS,SAAS,CAACnB,SAAV,CAAoBkN,sBAApB,GAA6C,UAAU7L,KAAV,EAAiBoE,KAAjB,EAAwB0F,gBAAxB,EAA0C;IACnF1F,KAAK,GAAGpE,KAAK,CAAC4L,iBAAN,GAA0BxH,KAA1B,GAAkCA,KAAK,CAAC4F,MAAN,CAAa,CAAb,EAAgB5F,KAAK,CAACI,MAAtB,CAA1C,CADmF,CACV;;IACzE,IAAIyH,cAAJ;;IACA,KAAK,IAAI3H,EAAE,GAAG,CAAT,EAAYoO,kBAAkB,GAAG5I,gBAAtC,EAAwDxF,EAAE,GAAGoO,kBAAkB,CAAClO,MAAhF,EAAwFF,EAAE,EAA1F,EAA8F;MAC1F,IAAIb,MAAM,GAAGiP,kBAAkB,CAACpO,EAAD,CAA/B;MACA2H,cAAc,GAAG,KAAK3F,iBAAL,CAAuB7C,MAAvB,CAAjB;MACA,KAAK2C,YAAL,CAAkB6F,cAAlB;;MACA,KAAK,IAAI5G,EAAE,GAAG,CAAT,EAAYsN,gBAAgB,GAAG1G,cAApC,EAAoD5G,EAAE,GAAGsN,gBAAgB,CAACnO,MAA1E,EAAkFa,EAAE,EAApF,EAAwF;QACpF,IAAI+G,aAAa,GAAGuG,gBAAgB,CAACtN,EAAD,CAApC;QACA,KAAKe,YAAL,CAAkB,KAAKwM,WAAL,CAAiBxG,aAAjB,CAAlB;MACH;IACJ;EACJ,CAZD;;EAaAtM,SAAS,CAACnB,SAAV,CAAoBsR,aAApB,GAAoC,UAAU4C,GAAV,EAAeC,MAAf,EAAuB;IACvD,IAAIC,IAAI,GAAG5U,MAAM,CAAC4U,IAAP,CAAYD,MAAZ,CAAX;;IACA,KAAK,IAAIxO,EAAE,GAAG,CAAT,EAAY0O,MAAM,GAAGD,IAA1B,EAAgCzO,EAAE,GAAG0O,MAAM,CAACxO,MAA5C,EAAoDF,EAAE,EAAtD,EAA0D;MACtD,IAAI2O,GAAG,GAAGD,MAAM,CAAC1O,EAAD,CAAhB;MACAuO,GAAG,CAACvL,YAAJ,CAAiB2L,GAAjB,EAAsBH,MAAM,CAACG,GAAD,CAA5B;IACH;EACJ,CAND;EAOA;AACJ;AACA;AACA;AACA;AACA;;;EACInT,SAAS,CAACnB,SAAV,CAAoBuU,gBAApB,GAAuC,UAAUlT,KAAV,EAAiBmT,YAAjB,EAA+BC,SAA/B,EAA0C1M,MAA1C,EAAkD;IACrF,IAAIqG,IAAJ;;IACA,IAAI,CAAC,KAAKS,QAAL,IAAiB,KAAKD,YAAvB,KAAyCvN,KAAK,CAACsN,mBAAnD,EAAyE;MACrE,IAAIwE,CAAC,GAAG,KAAKtR,aAAL,CAAmB,KAAKiN,WAAxB,CAAR;MACAV,IAAI,GAAG,IAAIvN,IAAJ,CAASsS,CAAC,CAAChJ,CAAX,EAAcgJ,CAAC,CAACpJ,CAAhB,EAAmBoJ,CAAC,CAAC9E,KAArB,EAA4B8E,CAAC,CAAC7E,MAA9B,CAAP;IACH,CAHD,MAIK;MACDF,IAAI,GAAG,IAAIvN,IAAJ,CAAS,KAAK4C,UAAL,CAAgB0G,CAAzB,EAA4B,KAAK1G,UAAL,CAAgBsG,CAA5C,EAA+C,KAAKtG,UAAL,CAAgB4K,KAA/D,EAAsE,KAAK5K,UAAL,CAAgB6K,MAAtF,CAAP;IACH;;IACDF,IAAI,CAACjE,CAAL,IAAWqK,YAAY,CAACrK,CAAb,GAAiB9I,KAAK,CAACqT,MAAlC;IACAtG,IAAI,CAACrE,CAAL,IAAWyK,YAAY,CAACzK,CAAb,GAAiB1I,KAAK,CAACsT,MAAlC;IACAvG,IAAI,GAAG1N,sBAAsB,CAAC0N,IAAI,CAACjE,CAAN,EAASiE,IAAI,CAACrE,CAAd,EAAiBqE,IAAI,CAACjE,CAAL,GAASiE,IAAI,CAACC,KAA/B,EAAsCD,IAAI,CAACE,MAAL,GAAcF,IAAI,CAACrE,CAAzD,EAA4D1I,KAAK,CAACsC,oBAAN,CAA2BC,cAAvF,CAA7B;;IACA,IAAI6Q,SAAJ,EAAe;MACX,KAAKrE,gBAAL,CAAsB/O,KAAtB,EAA6B+M,IAA7B,EAAmCrG,MAAnC;IACH,CAFD,MAGK;MACD,KAAKiG,6BAAL,CAAmC3M,KAAnC,EAA0C+M,IAA1C;IACH;EACJ,CAlBD;EAmBA;AACJ;AACA;AACA;AACA;AACA;;;EACIjN,SAAS,CAACnB,SAAV,CAAoB+C,iBAApB,GAAwC,UAAUK,CAAV,EAAa;IACjD,IAAI/B,KAAK,GAAG,KAAKA,KAAjB;;IACA,IAAIA,KAAK,CAACa,aAAN,KAAwB,MAA5B,EAAoC;MAChC;IACH;;IACD,KAAK+C,WAAL,GAAmB5D,KAAK,CAACa,aAAzB;;IACA,IAAI,CAAC,KAAK0S,QAAL,IAAiB,KAAK/F,QAAvB,KAAoC,KAAKZ,QAAL,CAAcI,KAAd,GAAsB,CAA1D,IAA+D,KAAKJ,QAAL,CAAcK,MAAd,GAAuB,CAA1F,EAA6F;MACzF,KAAKN,6BAAL,CAAmC3M,KAAnC,EAA0C,KAAK4M,QAA/C;IACH,CAFD,MAGK,IAAI,CAAE5M,KAAK,CAACsN,mBAAR,IAAgC,KAAKC,YAArC,IACL,KAAKnL,UAAL,CAAgB4K,KADX,IACoB,KAAK5K,UAAL,CAAgB6K,MADxC,EACgD;MACjD,KAAKiG,gBAAL,CAAsBlT,KAAtB,EAA6B,KAAK4M,QAAlC;IACH,CAHI,MAIA,IAAI,KAAKW,YAAL,IAAqB,KAAK/M,aAAL,CAAmB,KAAKiN,WAAxB,EAAqCT,KAA1D,IAAmE,KAAKxM,aAAL,CAAmB,KAAKiN,WAAxB,EAAqCR,MAA5G,EAAoH;MACrH,KAAKiG,gBAAL,CAAsBlT,KAAtB,EAA6B,KAAK4M,QAAlC;IACH;;IACD,IAAI5M,KAAK,CAACa,aAAN,KAAwB,OAAxB,IAAmC,KAAK0S,QAAxC,IAAoD,KAAK9C,IAA7D,EAAmE;MAC/D,IAAI,KAAKA,IAAL,CAAUzP,OAAV,CAAkB,GAAlB,MAA2B,CAAC,CAAhC,EAAmC;QAC/B,IAAI,CAAEhB,KAAK,CAACsN,mBAAZ,EAAkC;UAC9B/N,UAAU,CAAC,KAAK8D,SAAN,CAAV,CAA2BiE,YAA3B,CAAwC,GAAxC,EAA6C,KAAKmJ,IAAL,GAAY,GAAzD;UACA,KAAK+C,aAAL,CAAmBjU,UAAU,CAAC,KAAK8D,SAAN,CAA7B;QACH,CAHD,MAIK,IAAI9D,UAAU,CAAC,KAAK8D,SAAL,GAAiB,KAAK9C,KAAvB,CAAd,EAA6C;UAC9ChB,UAAU,CAAC,KAAK8D,SAAL,GAAiB,KAAK9C,KAAvB,CAAV,CAAwC+G,YAAxC,CAAqD,GAArD,EAA0D,KAAKmJ,IAAL,GAAY,GAAtE;UACA,KAAK+C,aAAL,CAAmBjU,UAAU,CAAC,KAAK8D,SAAL,GAAiB,KAAK9C,KAAvB,CAA7B;QACH;;QACD,IAAI,KAAKgT,QAAL,IAAiB,KAAK/F,QAA1B,EAAoC;UAChC,KAAKb,6BAAL,CAAmC3M,KAAnC,EAA0C,KAAK4M,QAA/C;QACH;MACJ;IACJ;;IACD,KAAK2G,QAAL,GAAgB,KAAhB;IACA,KAAKhG,YAAL,GAAoB,KAApB;IACA,KAAKC,QAAL,GAAgB,KAAhB;IACA,KAAK8D,qBAAL,CAA2BtR,KAA3B,EAAkC+B,CAAlC;EACH,CAnCD;;EAoCAjC,SAAS,CAACnB,SAAV,CAAoB8U,WAApB,GAAkC,UAAUzT,KAAV,EAAiBuC,cAAjB,EAAiC;IAC/D,OAAOlD,sBAAsB,CAACW,KAAK,CAACwC,UAAP,EAAmBxC,KAAK,CAACyC,UAAzB,EAAqCzC,KAAK,CAACqT,MAA3C,EAAmDrT,KAAK,CAACsT,MAAzD,EAAiE/Q,cAAjE,CAA7B;EACH,CAFD;EAGA;;;EACAzC,SAAS,CAACnB,SAAV,CAAoB0D,SAApB,GAAgC,UAAUrC,KAAV,EAAiBuC,cAAjB,EAAiCC,UAAjC,EAA6CC,UAA7C,EAAyD+D,KAAzD,EAAgE;IAC5F,IAAI5F,IAAI,GAAGZ,KAAK,CAACa,aAAjB;IACA,KAAK+C,WAAL,GAAmB5D,KAAK,CAACa,aAAzB;IACA,KAAK0S,QAAL,GAAgB,CAAC3S,IAAI,CAACI,OAAL,CAAa,MAAb,IAAuB,CAAC,CAAxB,IAA6BJ,IAAI,KAAK,OAAvC,MAAoDZ,KAAK,CAACkC,WAAN,IAAqB,CAAClC,KAAK,CAACmC,OAAhF,KACZnC,KAAK,CAAC0T,aAAN,KAAwB,YAD5B;IAEA,IAAIhN,MAAM,GAAGF,KAAK,CAACE,MAAnB;IACA,KAAK+J,IAAL,GAAYkD,SAAZ;;IACA,IAAI,KAAKJ,QAAT,EAAmB;MACf,KAAKhT,KAAL,GAAahB,UAAU,CAAC,KAAK4D,cAAN,CAAV,GAAmC,KAAK5C,KAAL,GAAa,CAAhD,GAAqD,CAAlE;MACA,KAAKqM,QAAL,GAAgB,IAAIpN,IAAJ,CAASQ,KAAK,CAACwC,UAAf,EAA2BxC,KAAK,CAACyC,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD,CAAhB;;MACA,IAAIzC,KAAK,CAACwC,UAAN,GAAmBD,cAAc,CAACuG,CAAlC,IAAuC9I,KAAK,CAACwC,UAAN,GAAoBD,cAAc,CAACuG,CAAf,GAAmBvG,cAAc,CAACyK,KAA7F,IACAhN,KAAK,CAACyC,UAAN,GAAmBF,cAAc,CAACmG,CADlC,IACuC1I,KAAK,CAACyC,UAAN,GAAoBF,cAAc,CAACmG,CAAf,GAAmBnG,cAAc,CAAC0K,MADjG,EAC0G;QACtG,KAAKsG,QAAL,GAAgB,KAAhB;MACH;IACJ;;IACD,IAAI3S,IAAI,KAAK,OAAb,EAAsB;MAClB,KAAK,IAAI0D,EAAE,GAAG,CAAT,EAAYe,EAAE,GAAGrF,KAAK,CAAC0D,aAA5B,EAA2CY,EAAE,GAAGe,EAAE,CAACb,MAAnD,EAA2DF,EAAE,EAA7D,EAAiE;QAC7D,IAAIb,MAAM,GAAG4B,EAAE,CAACf,EAAD,CAAf;;QACA,IAAIb,MAAM,CAACuB,OAAX,EAAoB;UAChB,KAAK,IAAIkH,EAAE,GAAG,CAAT,EAAY0H,EAAE,GAAGnQ,MAAM,CAAC2E,MAA7B,EAAqC8D,EAAE,GAAG0H,EAAE,CAACpP,MAA7C,EAAqD0H,EAAE,EAAvD,EAA2D;YACvD,IAAIpH,KAAK,GAAG8O,EAAE,CAAC1H,EAAD,CAAd;;YACA,IAAI,CAAElM,KAAK,CAACsN,mBAAZ,EAAkC;cAC9BxI,KAAK,CAACsJ,QAAN,GAAiB,KAAjB;YACH;UACJ;QACJ;MACJ;IACJ;;IACD,IAAI,EAAExN,IAAI,KAAK,OAAX,CAAJ,EAAyB;MACrB,IAAI,KAAKwB,UAAL,IAAmB,CAAEpC,KAAK,CAACsN,mBAA/B,EAAqD;QACjD,KAAKV,QAAL,GAAgB,IAAIpN,IAAJ,CAASQ,KAAK,CAACwC,UAAf,EAA2BxC,KAAK,CAACyC,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD,CAAhB;QACA,KAAKmP,qBAAL,CAA2B5R,KAA3B,EAAkC,IAAIf,aAAJ,CAAkBuD,UAAlB,EAA8BC,UAA9B,CAAlC,EAA6E,IAA7E;QACA,KAAK8K,YAAL,GAAoBnO,YAAY,CAACoD,UAAD,EAAaC,UAAb,EAAyB,KAAKL,UAA9B,CAAhC;MACH;;MACD,IAAKpC,KAAK,CAACsN,mBAAX,EAAiC;QAC7B,IAAIlJ,KAAK,GAAG,KAAKuM,QAAL,CAAcjK,MAAM,CAAC3D,EAArB,CAAZ;QACA,KAAK0K,WAAL,GAAmB,KAAKoG,UAAL,CAAgBnN,MAAM,CAAC3D,EAAvB,IAA6BqB,KAA7B,GAAqCuP,SAAxD;;QACA,IAAI,KAAKnT,aAAL,CAAmBgE,MAAnB,IAA6B,KAAKqP,UAAL,CAAgBnN,MAAM,CAAC3D,EAAvB,CAAjC,EAA6D;UACzD,KAAK6O,qBAAL,CAA2B5R,KAA3B,EAAkC,IAAIf,aAAJ,CAAkBuD,UAAlB,EAA8BC,UAA9B,CAAlC,EAA6E,IAA7E,EAAmFiE,MAAnF;UACA,KAAK6G,YAAL,GAAoBnO,YAAY,CAACoD,UAAD,EAAaC,UAAb,EAAyB,KAAKjC,aAAL,CAAmB4D,KAAnB,CAAzB,CAAhC;QACH;MACJ;IACJ;EACJ,CA3CD;;EA4CAtE,SAAS,CAACnB,SAAV,CAAoBkV,UAApB,GAAiC,UAAU9Q,EAAV,EAAc;IAC3C,OAAOA,EAAE,CAAC/B,OAAH,CAAW,gBAAX,IAA+B,CAAC,CAAvC;EACH,CAFD;EAGA;;;EACAlB,SAAS,CAACnB,SAAV,CAAoB8C,SAApB,GAAgC,UAAU+E,KAAV,EAAiB;IAC7C,IAAIxG,KAAK,GAAG,KAAKA,KAAjB;IACA,IAAI0G,MAAM,GAAGF,KAAK,CAACE,MAAnB;;IACA,IAAI1G,KAAK,CAACiE,aAAN,KAAwB,MAA5B,EAAoC;MAChC,IAAI,CAACjF,iBAAiB,CAAC0H,MAAD,CAAtB,EAAgC;QAC5B,IAAIF,KAAK,CAACE,MAAN,CAAa3D,EAAb,CAAgB/B,OAAhB,CAAwB,MAAxB,IAAkC,CAAtC,EAAyC;UACrC0F,MAAM,GAAGnH,UAAU,CAACiH,KAAK,CAACE,MAAN,CAAa3D,EAAb,CAAgBmF,OAAhB,CAAwB,MAAxB,EAAgC,OAAhC,CAAD,CAAnB;QACH;;QACD,IAAKxB,MAAD,CAASK,YAAT,CAAsB,OAAtB,MAAoCL,MAAD,CAASM,YAAT,CAAsB,OAAtB,EAA+BhG,OAA/B,CAAuC,WAAvC,IAAsD,CAAC,CAAvD,IACnC0F,MAAM,CAACM,YAAP,CAAoB,OAApB,EAA6BhG,OAA7B,CAAqC,WAArC,IAAoD,CAAC,CADrD,CAAJ,EAC6D;UACzD;QACH;;QACD,KAAKW,yBAAL,CAA+B6E,KAA/B;QACA;MACH;IACJ;;IACD,IAAIxG,KAAK,CAACa,aAAN,KAAwB,MAA5B,EAAoC;MAChC;IACH;;IACD,IAAI2F,KAAK,CAACzB,IAAN,KAAe,WAAf,KAA+BlG,OAAO,CAACiV,KAAR,IAAiBjV,OAAO,CAACkV,MAAxD,KAAmE,KAAKR,QAAxE,IAAoF/M,KAAK,CAACwN,cAA9F,EAA8G;MAC1GxN,KAAK,CAACwN,cAAN;IACH;;IACD,IAAIC,YAAY,GAAG7U,YAAY,CAACY,KAAK,CAACqT,MAAP,EAAerT,KAAK,CAACsT,MAArB,EAA6BtT,KAAK,CAACsC,oBAAN,CAA2BC,cAAxD,CAA/B;;IACA,IAAI0R,YAAJ,EAAkB;MACd,IAAI,KAAK1G,YAAL,IAAqB,CAAC,KAAKC,QAA/B,EAAyC;QACrC,KAAK0F,gBAAL,CAAsBlT,KAAtB,EAA6B,KAAK4M,QAAlC,EAA4C,IAA5C,EAAkDlG,MAAlD;MACH,CAFD,MAGK,IAAI,KAAK6M,QAAL,IAAiB,CAAC,KAAK/F,QAA3B,EAAqC;QACtC,IAAIxN,KAAK,CAACa,aAAN,KAAwB,OAA5B,EAAqC;UACjC,KAAKqT,OAAL,CAAalU,KAAK,CAACwC,UAAnB,EAA+BxC,KAAK,CAACyC,UAArC,EAAiDzC,KAAK,CAACqT,MAAvD,EAA+DrT,KAAK,CAACsT,MAArE;UACA,KAAKvE,gBAAL,CAAsB/O,KAAtB,EAA6B,KAAK4M,QAAlC,EAA4ClG,MAA5C;QACH,CAHD,MAIK;UACD,KAAKkG,QAAL,GAAgB,KAAK6G,WAAL,CAAiBzT,KAAjB,EAAwBA,KAAK,CAACsC,oBAAN,CAA2BC,cAAnD,CAAhB;UACA,KAAKwM,gBAAL,CAAsB/O,KAAtB,EAA6B,KAAK4M,QAAlC,EAA4ClG,MAA5C;QACH;MACJ;;MACD,IAAI,KAAKtE,UAAL,IAAmB,CAAEpC,KAAK,CAACsN,mBAA/B,EAAqD;QACjD,KAAKsE,qBAAL,CAA2B5R,KAA3B,EAAkC,IAAIf,aAAJ,CAAkBe,KAAK,CAACqT,MAAxB,EAAgCrT,KAAK,CAACsT,MAAtC,CAAlC,EAAiF,IAAjF,EAAuF5M,MAAvF;MACH,CAFD,MAGK,IAAM1G,KAAK,CAACsN,mBAAP,IAA+B,CAAC,KAAKiG,QAAtC,IAAmD,KAAK/F,QAA5D,EAAsE;QACvE,KAAKoE,qBAAL,CAA2B5R,KAA3B,EAAkC,IAAIf,aAAJ,CAAkBe,KAAK,CAACqT,MAAxB,EAAgCrT,KAAK,CAACsT,MAAtC,CAAlC,EAAiF,IAAjF,EAAuF5M,MAAvF;MACH;IACJ,CApBD,MAqBK;MACD,KAAKhF,iBAAL,CAAuB8E,KAAvB;IACH;EACJ,CA/CD;;EAgDA1G,SAAS,CAACnB,SAAV,CAAoBuV,OAApB,GAA8B,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsC;IAChE,IAAI,KAAKf,QAAT,EAAmB;MACf,IAAI,KAAK9C,IAAT,EAAe;QACX,KAAKA,IAAL,GAAY,KAAKA,IAAL,GAAY,IAAZ,GAAmB4D,IAAnB,GAA0B,GAA1B,GAAgCC,IAA5C;MACH,CAFD,MAGK;QACD,KAAK7D,IAAL,GAAY,OAAO0D,MAAP,GAAgB,GAAhB,GAAsBC,MAAlC;MACH;IACJ;EACJ,CATD;;EAUAtU,SAAS,CAACnB,SAAV,CAAoB6U,aAApB,GAAoC,UAAU/C,IAAV,EAAgB;IAChD,IAAIxQ,KAAK,GAAG,IAAZ;;IACA,IAAID,KAAK,GAAG,KAAKA,KAAjB;IACA,IAAI8C,OAAJ;IACA,IAAIyR,OAAO,GAAGhV,UAAU,CAACS,KAAK,CAACwU,KAAP,CAAV,CAAwBC,qBAAxB,EAAd;IACA,IAAIC,OAAO,GAAG1U,KAAK,CAACsC,oBAAN,CAA2BC,cAA3B,CAA0CuG,CAA1C,GAA8CuJ,IAAI,CAACsC,GAAL,CAASJ,OAAO,CAACK,IAAjB,EAAuB,CAAvB,CAA5D;IACA,IAAIC,OAAO,GAAG7U,KAAK,CAACsC,oBAAN,CAA2BC,cAA3B,CAA0CmG,CAA1C,GAA8C2J,IAAI,CAACsC,GAAL,CAASJ,OAAO,CAACO,GAAjB,EAAsB,CAAtB,CAA5D;IACA,KAAK1U,gBAAL,CAAsB,KAAKG,KAA3B,IAAoC,EAApC;;IACA,KAAK,IAAI+D,EAAE,GAAG,CAAT,EAAYe,EAAE,GAAGrF,KAAK,CAAC0D,aAA5B,EAA2CY,EAAE,GAAGe,EAAE,CAACb,MAAnD,EAA2DF,EAAE,EAA7D,EAAiE;MAC7D,IAAIb,MAAM,GAAG4B,EAAE,CAACf,EAAD,CAAf;MACAb,MAAM,CAAC2E,MAAP,CAAc2M,MAAd,CAAqB,UAAUjQ,KAAV,EAAiB;QAClC;QACA,IAAIA,KAAK,CAACyJ,eAAN,IAAyBzJ,KAAK,CAACyJ,eAAN,CAAsB/J,MAAnD,EAA2D;UACvD1B,OAAO,GAAG0C,QAAQ,CAACwP,gBAAT,CAA0BlQ,KAAK,CAACyJ,eAAN,CAAsB,CAAtB,EAAyBzF,CAAzB,GAA6B4L,OAAvD,EAAgE5P,KAAK,CAACyJ,eAAN,CAAsB,CAAtB,EAAyB7F,CAAzB,GAA6BmM,OAA7F,CAAV;QACH;;QACD,IAAI/R,OAAO,KAAK2N,IAAhB,EAAsB;UAClB3L,KAAK,CAACsJ,QAAN,GAAiB,IAAjB;;UACA,IAAKnO,KAAK,CAACD,KAAN,CAAYsN,mBAAb,IAAqCrN,KAAK,CAAC2D,WAAN,KAAsB,OAA/D,EAAwE;YACpE3D,KAAK,CAACG,gBAAN,CAAuBH,KAAK,CAACM,KAA7B,EAAoCN,KAAK,CAACK,WAA1C,IAAyDwE,KAAzD;YACA7E,KAAK,CAACK,WAAN;UACH;QACJ,CAND,MAOK,IAAI,CAAEN,KAAK,CAACsN,mBAAZ,EAAkC;UACnCxI,KAAK,CAACsJ,QAAN,GAAiB,KAAjB;QACH;MACJ,CAfD;IAgBH;;IACD,KAAK9N,WAAL,GAAmB,CAAnB;EACH,CA5BD;EA6BA;AACJ;AACA;AACA;AACA;;;EACIR,SAAS,CAACnB,SAAV,CAAoBsW,aAApB,GAAoC,YAAY;IAC5C,OAAO,WAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;;;EACInV,SAAS,CAACnB,SAAV,CAAoBuW,OAApB,GAA8B,YAAY;IACtC,KAAKxS,mBAAL,GADsC,CAEtC;EACH,CAHD;;EAIA,OAAO5C,SAAP;AACH,CA/9C8B,CA+9C7BD,aA/9C6B,CAA/B;;AAg+CA,SAASC,SAAT"},"metadata":{},"sourceType":"module"}