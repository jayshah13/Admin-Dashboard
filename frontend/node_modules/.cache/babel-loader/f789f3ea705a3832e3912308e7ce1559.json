{"ast":null,"code":"import { isNullOrUndefined, remove, extend } from '@syncfusion/ej2-base';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { FreezeRowModelGenerator } from '../services/freeze-row-model-generator';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, getEditedDataIndex, resetRowIndex, setRowElements, getRowIndexFromElement, getGroupKeysAndFields, getPredicates, generateExpandPredicates } from '../base/util';\nimport * as literals from '../base/string-literals';\n/**\n * Infinite Scrolling class\n *\n * @hidden\n */\n\nvar InfiniteScroll =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid infinite scrolling.\n   *\n   * @param {IGrid} parent - specifies the IGrid\n   * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator\n   * @hidden\n   */\n  function InfiniteScroll(parent, serviceLocator) {\n    this.infiniteCache = {};\n    this.infiniteCurrentViewData = {};\n    this.infiniteFrozenCache = {};\n    this.isDownScroll = false;\n    this.isUpScroll = false;\n    this.isScroll = true;\n    this.enableContinuousScroll = false;\n    this.initialRender = true;\n    this.isRemove = false;\n    this.isInitialCollapse = false;\n    this.prevScrollTop = 0;\n    this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting', 'refresh'];\n    this.keys = [literals.downArrow, literals.upArrow, literals.enter, literals.shiftEnter];\n    this.rowTop = 0;\n    this.isInitialMovableRender = true;\n    this.virtualInfiniteData = {};\n    this.isCancel = false;\n    this.emptyRowData = {};\n    this.isNormaledit = false;\n    this.isInfiniteScroll = false;\n    this.isLastPage = false;\n    this.isInitialRender = true;\n    this.isFocusScroll = false;\n    this.isGroupCollapse = false;\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.isNormaledit = this.parent.editSettings.mode === 'Normal';\n    this.addEventListener();\n    this.widthService = serviceLocator.getService('widthService');\n    this.rowModelGenerator = this.parent.isFrozenGrid() ? new FreezeRowModelGenerator(this.parent) : new RowModelGenerator(this.parent);\n  }\n\n  InfiniteScroll.prototype.getModuleName = function () {\n    return 'infiniteScroll';\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.addEventListener = function () {\n    this.parent.on(events.dataReady, this.onDataReady, this);\n    this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n    this.parent.on(events.infinitePageQuery, this.infinitePageQuery, this);\n    this.parent.on(events.infiniteScrollHandler, this.infiniteScrollHandler, this);\n    this.parent.on(events.beforeCellFocused, this.infiniteCellFocus, this);\n    this.parent.on(events.appendInfiniteContent, this.appendInfiniteRows, this);\n    this.parent.on(events.removeInfiniteRows, this.removeInfiniteCacheRows, this);\n    this.parent.on(events.resetInfiniteBlocks, this.resetInfiniteBlocks, this);\n    this.parent.on(events.setInfiniteCache, this.setCache, this);\n    this.parent.on(events.initialCollapse, this.ensureIntialCollapse, this);\n    this.parent.on(events.keyPressed, this.infiniteCellFocus, this);\n    this.parent.on(events.infiniteShowHide, this.setDisplayNone, this);\n    this.parent.on(events.virtualScrollEditActionBegin, this.editActionBegin, this);\n    this.parent.on(events.getVirtualData, this.getVirtualInfiniteData, this);\n    this.parent.on(events.editReset, this.resetInfiniteEdit, this);\n    this.parent.on(events.virtualScrollEditSuccess, this.infiniteEditSuccess, this);\n    this.parent.on(events.refreshVirtualCache, this.refreshInfiniteCache, this);\n    this.parent.on(events.refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex, this);\n    this.parent.on(events.infiniteEditHandler, this.infiniteEditHandler, this);\n    this.parent.on(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);\n    this.parent.on(events.modelChanged, this.modelChanged, this);\n    this.parent.on(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);\n    this.parent.on(events.destroy, this.destroy, this);\n    this.parent.on(events.contentReady, this.selectNewRow, this);\n    this.parent.on(events.captionActionComplete, this.captionActionComplete, this);\n    this.parent.on(events.setVirtualPageQuery, this.setGroupCollapsePageQuery, this);\n    this.actionBeginFunction = this.actionBegin.bind(this);\n    this.actionCompleteFunction = this.actionComplete.bind(this);\n    this.dataBoundFunction = this.dataBound.bind(this);\n    this.parent.on(events.deleteComplete, this.deleteComplate, this);\n    this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);\n    this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);\n    this.parent.addEventListener(events.dataBound, this.dataBoundFunction);\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.dataReady, this.onDataReady);\n    this.parent.off(events.dataSourceModified, this.dataSourceModified);\n    this.parent.off(events.infinitePageQuery, this.infinitePageQuery);\n    this.parent.off(events.infiniteScrollHandler, this.infiniteScrollHandler);\n    this.parent.off(events.beforeCellFocused, this.infiniteCellFocus);\n    this.parent.off(events.appendInfiniteContent, this.appendInfiniteRows);\n    this.parent.off(events.removeInfiniteRows, this.removeInfiniteCacheRows);\n    this.parent.off(events.resetInfiniteBlocks, this.resetInfiniteBlocks);\n    this.parent.off(events.setInfiniteCache, this.setCache);\n    this.parent.off(events.initialCollapse, this.ensureIntialCollapse);\n    this.parent.off(events.keyPressed, this.infiniteCellFocus);\n    this.parent.off(events.infiniteShowHide, this.setDisplayNone);\n    this.parent.off(events.virtualScrollEditActionBegin, this.editActionBegin);\n    this.parent.off(events.getVirtualData, this.getVirtualInfiniteData);\n    this.parent.off(events.editReset, this.resetInfiniteEdit);\n    this.parent.off(events.virtualScrollEditSuccess, this.infiniteEditSuccess);\n    this.parent.off(events.refreshVirtualCache, this.refreshInfiniteCache);\n    this.parent.on(events.refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex);\n    this.parent.off(events.infiniteEditHandler, this.infiniteEditHandler);\n    this.parent.off(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin);\n    this.parent.off(events.modelChanged, this.modelChanged);\n    this.parent.off(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);\n    this.parent.off(events.destroy, this.destroy);\n    this.parent.off(events.contentReady, this.selectNewRow);\n    this.parent.off(events.captionActionComplete, this.captionActionComplete);\n    this.parent.off(events.setVirtualPageQuery, this.setGroupCollapsePageQuery);\n    this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);\n    this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);\n    this.parent.removeEventListener(events.dataBound, this.dataBoundFunction);\n  };\n\n  InfiniteScroll.prototype.dataBound = function () {\n    if (this.groupCaptionAction === 'collapse') {\n      this.groupCaptionAction = 'refresh';\n      this.makeGroupCollapseRequest();\n    } else if (this.groupCaptionAction === 'refresh') {\n      this.parent.hideSpinner();\n      this.groupCaptionAction = this.empty;\n    }\n  };\n\n  InfiniteScroll.prototype.setGroupCollapsePageQuery = function (args) {\n    var gObj = this.parent;\n\n    if (!gObj.infiniteScrollSettings.enableCache && this.isGroupCollapse) {\n      args.skipPage = true;\n      this.isGroupCollapse = false;\n\n      if (this.groupCaptionAction === 'collapse') {\n        var captionRow = gObj.getRowObjectFromUID(this.parentCapUid);\n        var rowObjs = gObj.getRowsObject();\n        var childCount = 0;\n\n        for (var i = rowObjs.length - 1; i >= 0; i--) {\n          if (rowObjs[i].indent === captionRow.indent) {\n            break;\n          }\n\n          if (rowObjs[i].isDataRow) {\n            childCount++;\n          }\n        }\n\n        var key = getGroupKeysAndFields(rowObjs.indexOf(captionRow), rowObjs);\n        var pred = generateExpandPredicates(key.fields, key.keys, this);\n        var predicateList = getPredicates(pred);\n        pred = predicateList[predicateList.length - 1];\n\n        for (var i = predicateList.length - 2; i >= 0; i--) {\n          pred = pred.and(predicateList[i]);\n        }\n\n        args.query.where(pred);\n        args.query.skip(childCount);\n        this.parentCapUid = this.empty;\n      } else {\n        var rows = gObj.getRows();\n        var size = gObj.pageSettings.pageSize;\n        var skip = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n        var additionalCnt = skip - skip % size + size - skip;\n\n        if (skip % size === 0) {\n          additionalCnt = 0;\n        }\n\n        args.query.skip(skip);\n        args.query.take(gObj.infiniteScrollSettings.initialBlocks * gObj.pageSettings.pageSize + additionalCnt);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.captionActionComplete = function (args) {\n    var gObj = this.parent;\n\n    if (!gObj.infiniteScrollSettings.enableCache && args.isCollapse) {\n      var contetRect = gObj.getContent().firstElementChild.getBoundingClientRect();\n      var tableReact = gObj.contentModule.getTable().getBoundingClientRect();\n\n      if (Math.round(tableReact.bottom - gObj.getRowHeight()) <= Math.round(contetRect.bottom)) {\n        this.parentCapUid = args.parentUid;\n        this.groupCaptionAction = 'collapse';\n        gObj.showSpinner();\n        var caption = gObj.getRowObjectFromUID(args.parentUid);\n        var childCount = this.getCaptionChildCount(caption);\n\n        if (!childCount) {\n          this.groupCaptionAction = 'refresh';\n          this.makeGroupCollapseRequest();\n        } else {\n          this.makeGroupCollapseRequest(args.parentUid);\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.makeGroupCollapseRequest = function (parentUid) {\n    var gObj = this.parent;\n    var rows = gObj.getRows();\n    var index = getRowIndexFromElement(rows[rows.length - 1]);\n    var prevPage = this.parent.pageSettings.currentPage;\n    this.parent.pageSettings.currentPage = Math.ceil(index / this.parent.pageSettings.pageSize) + 1;\n\n    if (this.parent.pageSettings.currentPage > this.maxPage) {\n      gObj.hideSpinner();\n      return;\n    }\n\n    var scrollArg = {\n      requestType: 'infiniteScroll',\n      currentPage: this.parent.pageSettings.currentPage,\n      prevPage: prevPage,\n      startIndex: index + 1,\n      direction: 'down',\n      isCaptionCollapse: true,\n      parentUid: parentUid\n    };\n    this.isGroupCollapse = true;\n    this.parent.notify('model-changed', scrollArg);\n  };\n\n  InfiniteScroll.prototype.getCaptionChildCount = function (caption) {\n    var rowObj = this.parent.getRowsObject();\n    var index = rowObj.indexOf(caption);\n    var make = false;\n\n    for (var i = index; i < rowObj.length; i++) {\n      if ((rowObj[i].indent === caption.indent || rowObj[i].indent < caption.indent) && rowObj[i].data.key !== caption.data.key) {\n        break;\n      }\n\n      if (rowObj[i].isCaptionRow && !this.childCheck(rowObj, rowObj[i], i)) {\n        make = true;\n        break;\n      }\n    }\n\n    return make;\n  };\n\n  InfiniteScroll.prototype.childCheck = function (rowObj, row, index) {\n    var childCount = 0;\n\n    for (var i = index + 1; i < rowObj.length; i++) {\n      if (rowObj[i].indent === row.indent) {\n        break;\n      }\n\n      if (rowObj[i].indent === row.indent + 1 && rowObj[i].parentUid === row.uid) {\n        childCount++;\n      }\n    }\n\n    return row.data.count === childCount;\n  };\n\n  InfiniteScroll.prototype.updateCurrentViewData = function () {\n    var gObj = this.parent;\n\n    if (gObj.groupSettings.columns.length) {\n      return;\n    }\n\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    gObj.currentViewData = [];\n    var page = gObj.pageSettings.currentPage;\n    var isCache = gObj.infiniteScrollSettings.enableCache;\n    var blocks = gObj.infiniteScrollSettings.maxBlocks;\n    var isMiddlePage = isCache && (page > blocks || this.isUpScroll && page > 1);\n    var start = isMiddlePage ? this.isUpScroll ? page : page - blocks + 1 : 1;\n    var end = isMiddlePage ? start + blocks - 1 : isCache ? blocks : keys.length;\n\n    for (var i = start; i <= end; i++) {\n      if (this.infiniteCurrentViewData[i]) {\n        gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.refreshInfiniteCurrentViewData = function (e) {\n    var page = this.parent.pageSettings.currentPage;\n    var size = this.parent.pageSettings.pageSize;\n    var blocks = this.parent.infiniteScrollSettings.initialBlocks;\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    var cache = this.parent.infiniteScrollSettings.enableCache;\n\n    if (!this.parent.groupSettings.columns.length) {\n      var isAdd = e.args.requestType === 'save';\n      var isDelete = e.args.requestType === 'delete';\n\n      if (!cache && (isAdd || isDelete)) {\n        if (isAdd) {\n          this.infiniteCurrentViewData[1] = e.data.concat(this.infiniteCurrentViewData[1]);\n        } else {\n          this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);\n        }\n      } else {\n        if (blocks > 1 && e.data.length === blocks * size) {\n          this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === 'delete', true);\n        } else {\n          this.infiniteCurrentViewData[page] = e.data.slice();\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.deleteComplate = function () {\n    if (this.parent.isFrozenGrid() && !this.parent.infiniteScrollSettings.enableCache) {\n      this.parent.contentModule.refreshScrollOffset();\n    }\n  };\n\n  InfiniteScroll.prototype.modelChanged = function (args) {\n    var rows = this.parent.getRows();\n\n    if (rows && rows.length && args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {\n      this.firstIndex = getRowIndexFromElement(rows[0]);\n      this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);\n      this.lastIndex = getRowIndexFromElement(rows[rows.length - 1]);\n\n      if (args.requestType === 'delete') {\n        var rowObj = this.parent.getRowsObject();\n        args.startIndex = this.parent.infiniteScrollSettings.enableCache ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;\n      } else {\n        args.startIndex = this.firstIndex;\n      }\n\n      if (!this.parent.infiniteScrollSettings.enableCache && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {\n        this.isLastPage = true;\n        this.lastIndex = this.lastIndex - 1;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.infiniteAddActionBegin = function (args) {\n    if (this.isNormaledit) {\n      this.isAdd = true;\n\n      if (this.parent.infiniteScrollSettings.enableCache) {\n        if (!Object.keys(this.emptyRowData).length) {\n          this.createEmptyRowdata();\n        }\n\n        if (this.parent.pageSettings.currentPage > 1) {\n          args.startEdit = false;\n          this.resetInfiniteBlocks({}, true);\n          this.makeRequest({\n            currentPage: 1\n          });\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n    if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete' || args.e.requestType === 'save' && this.requestType === 'add')) {\n      var frozenCols = this.parent.isFrozenGrid();\n      var rowElms = this.parent.getRows();\n      var rows = this.parent.getRowsObject();\n\n      if (this.ensureRowAvailability(rows, args.result[0])) {\n        if (rowElms.length) {\n          this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add', true);\n\n          if (frozenCols) {\n            var rows_1 = this.parent.getMovableRowsObject();\n            this.resetRowIndex(rows_1, args.e, this.parent.getMovableDataRows(), this.requestType === 'add');\n\n            if (this.parent.getFrozenMode() === literals.leftRight) {\n              var frRows = this.parent.getFrozenRightRowsObject();\n              this.resetRowIndex(frRows, args.e, this.parent.getFrozenRightRows(), this.requestType === 'add');\n            }\n          }\n        }\n\n        if (!this.isLastPage) {\n          this.createRow(rows, args);\n        } else {\n          this.isLastPage = false;\n          this.parent.pageSettings.currentPage = this.maxPage;\n\n          if (this.parent.selectionModule.index < this.parent.frozenRows) {\n            remove(rowElms[this.parent.frozenRows - 1]);\n            this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);\n\n            if (frozenCols) {\n              var movableRows = this.parent.getMovableDataRows();\n              remove(movableRows[this.parent.frozenRows]);\n              this.createRow([this.parent.getMovableRowsObject()[this.parent.frozenRows - 1]], args, true, true);\n\n              if (this.parent.getFrozenMode() === literals.leftRight) {\n                var rightRows = this.parent.getFrozenRightDataRows();\n                remove(rightRows[this.parent.frozenRows]);\n                this.createRow([this.parent.getFrozenRightRowsObject()[this.parent.frozenRows - 1]], args, false, true, true);\n              }\n            }\n\n            setRowElements(this.parent);\n          }\n        }\n      }\n\n      this.parent.hideSpinner();\n      this.parent.notify(events.refreshInfinitePersistSelection, {});\n\n      if (this.requestType === 'delete') {\n        this.parent.notify(events.deleteComplete, args.e);\n      } else {\n        this.parent.notify(events.saveComplete, args.e);\n      }\n    }\n\n    this.parent.notify(events.freezeRender, {\n      case: 'refreshHeight'\n    });\n  };\n\n  InfiniteScroll.prototype.createRow = function (rows, args, isMovable, isFrozenRows, isFrozenRight) {\n    var row = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;\n    var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n    var tbody;\n\n    if (isFrozenRight) {\n      tbody = this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n    } else {\n      tbody = !this.parent.isFrozenGrid() ? this.parent.getContent().querySelector(literals.tbody) : isMovable ? this.parent.getMovableVirtualContent().querySelector(literals.tbody) : this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n    }\n\n    if (this.parent.frozenRows) {\n      tbody = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add' ? !this.parent.isFrozenGrid() ? this.parent.getHeaderContent().querySelector(literals.tbody) : isMovable ? this.parent.getMovableVirtualHeader().querySelector(literals.tbody) : isFrozenRight ? this.parent.element.querySelector('.e-frozen-right-header').querySelector(literals.tbody) : this.parent.getFrozenVirtualHeader().querySelector(literals.tbody) : tbody;\n    }\n\n    var notifyArgs = {\n      rows: rows,\n      cancel: false,\n      args: args,\n      isMovable: isMovable,\n      isFrozenRows: isFrozenRows,\n      isFrozenRight: isFrozenRows,\n      row: row\n    };\n    this.parent.notify(events.infiniteCrudCancel, notifyArgs);\n\n    if (!notifyArgs.cancel) {\n      for (var i = row.length - 1; i >= 0; i--) {\n        if (this.requestType === 'delete') {\n          tbody.appendChild(rowRenderer.render(row[i], this.parent.getColumns()));\n        } else {\n          tbody.insertBefore(rowRenderer.render(row[i], this.parent.getColumns()), tbody.firstElementChild);\n        }\n      }\n    }\n\n    if (!isFrozenRows && this.parent.frozenRows && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {\n      var rowElems = isMovable ? this.parent.getMovableDataRows() : isFrozenRight ? this.parent.getFrozenRightDataRows() : this.parent.getRows();\n      var index = (isMovable || isFrozenRight) && this.requestType === 'add' ? this.parent.frozenRows : this.parent.frozenRows - 1;\n      remove(rowElems[index]);\n      this.createRow([rows[this.parent.frozenRows - 1]], args, isMovable, true, isFrozenRight);\n    }\n\n    if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {\n      if (isFrozenRight) {\n        setRowElements(this.parent);\n        this.parent.contentModule.rightFreezeRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n      } else if (!this.parent.isFrozenGrid() || isMovable) {\n        setRowElements(this.parent);\n        this.parent.contentModule.visibleRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n\n        if (this.parent.getFrozenMode() === literals.leftRight) {\n          args.e.renderMovableContent = true;\n          this.createRow(this.parent.getFrozenRightRowsObject(), args, false, false, true);\n        }\n      } else {\n        this.parent.contentModule.visibleFrozenRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n        args.e.isFrozen = true;\n        this.createRow(this.parent.getMovableRowsObject(), args, true);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.ensureRowAvailability = function (rows, data) {\n    var resume = true;\n\n    if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache && this.parent.sortSettings.columns && this.requestType === 'add') {\n      var key = this.parent.getPrimaryKeyFieldNames()[0];\n\n      for (var i = 0; i < rows.length; i++) {\n        if (rows[i].data[key] === data[key]) {\n          resume = false;\n          break;\n        }\n      }\n    }\n\n    return resume;\n  };\n\n  InfiniteScroll.prototype.generateRows = function (data, args) {\n    return this.rowModelGenerator.generateRows(data, args);\n  };\n\n  InfiniteScroll.prototype.resetRowIndex = function (rows, args, rowElms, isAdd, isFrozen) {\n    var _this = this;\n\n    var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n    var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);\n\n    if (isAdd) {\n      if (isRemove) {\n        if (isFrozen && !this.parent.groupSettings.columns.length) {\n          this.swapCurrentViewData(1, true);\n        }\n\n        remove(rowElms[rows.length - 1]);\n        rowElms.splice(rows.length - 1, 1);\n        rows.splice(rows.length - 1, 1);\n      }\n    } else {\n      rows.filter(function (e, index) {\n        if (e.data[keyField] === args.data[0][keyField]) {\n          if (isFrozen && !_this.parent.groupSettings.columns.length) {\n            var page = Math.ceil((index + 1) / _this.parent.pageSettings.pageSize);\n\n            _this.resetInfiniteCurrentViewData(page, index);\n          }\n\n          rows.splice(index, 1);\n          remove(rowElms[index]);\n          rowElms.splice(index, 1);\n        }\n      });\n    }\n\n    var startIndex = isAdd ? 1 : 0;\n    resetRowIndex(this.parent, rows, rowElms, startIndex);\n  };\n\n  InfiniteScroll.prototype.resetInfiniteCurrentViewData = function (page, index) {\n    index = index - (page - 1) * this.parent.pageSettings.pageSize;\n    this.infiniteCurrentViewData[page].splice(index, 1);\n    this.swapCurrentViewData(page, false);\n  };\n\n  InfiniteScroll.prototype.swapCurrentViewData = function (page, isAdd) {\n    var keys = Object.keys(this.infiniteCurrentViewData);\n    var end = isAdd ? keys.length + 1 : keys.length;\n\n    for (var i = page; i < end; i++) {\n      if (this.infiniteCurrentViewData[i + 1]) {\n        var pageIndex = isAdd ? i : i + 1;\n        var index = isAdd ? this.infiniteCurrentViewData[i].length - 1 : 0;\n        var data = this.infiniteCurrentViewData[pageIndex].splice(index, 1);\n\n        if (isAdd) {\n          this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);\n\n          if (i + 1 === end - 1) {\n            this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);\n          }\n        } else {\n          this.infiniteCurrentViewData[i].push(data[0]);\n        }\n      }\n    }\n\n    this.updateCurrentViewData();\n  };\n\n  InfiniteScroll.prototype.setDisplayNone = function (args) {\n    if (this.parent.infiniteScrollSettings.enableCache) {\n      var frozenCols = this.parent.isFrozenGrid();\n      var keys = frozenCols ? Object.keys(this.infiniteFrozenCache) : Object.keys(this.infiniteCache);\n\n      for (var i = 1; i <= keys.length; i++) {\n        var cache = frozenCols ? args.isFreeze ? this.infiniteFrozenCache[i][0] : this.infiniteFrozenCache[i][1] : this.infiniteCache[i];\n        cache.filter(function (e) {\n          e.cells[args.index].visible = args.visible === '';\n        });\n      }\n\n      this.resetContentModuleCache(frozenCols ? this.infiniteFrozenCache : this.infiniteCache);\n    }\n  };\n\n  InfiniteScroll.prototype.refreshInfiniteCache = function (args) {\n    this.getEditedRowObject().data = args.data;\n  };\n\n  InfiniteScroll.prototype.refreshInfiniteEditrowindex = function (args) {\n    this.editRowIndex = args.index;\n  };\n\n  InfiniteScroll.prototype.getEditedRowObject = function () {\n    var rowObjects = this.parent.getRowsObject();\n    var editedrow;\n\n    for (var i = 0; i < rowObjects.length; i++) {\n      if (rowObjects[i].index === this.editRowIndex) {\n        editedrow = rowObjects[i];\n      }\n    }\n\n    return editedrow;\n  };\n\n  InfiniteScroll.prototype.infiniteEditSuccess = function (args) {\n    if (this.isNormaledit) {\n      if (!this.isAdd && args.data) {\n        this.updateCurrentViewRecords(args.data);\n      }\n\n      this.isAdd = false;\n    }\n  };\n\n  InfiniteScroll.prototype.updateCurrentViewRecords = function (data) {\n    var index = getEditedDataIndex(this.parent, data);\n\n    if (!isNullOrUndefined(index)) {\n      this.parent.getCurrentViewRecords()[index] = data;\n    }\n  };\n\n  InfiniteScroll.prototype.actionBegin = function (args) {\n    if (args.requestType === 'add' || args.requestType === 'delete') {\n      this.requestType = args.requestType;\n    } else if (args.action === 'add' && args.requestType === 'save') {\n      this.requestType = args.action;\n    }\n\n    if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === 'searching' || args.requestType === 'sorting' || args.requestType === 'filtering') {\n      this.isInitialRender = true;\n    }\n  };\n\n  InfiniteScroll.prototype.actionComplete = function (args) {\n    if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {\n      this.requestType = this.empty;\n      this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';\n      this.isAdd = this.isEdit = false;\n\n      if (this.isNormaledit) {\n        this.editRowIndex = this.empty;\n        this.virtualInfiniteData = {};\n        this.parent.editModule.previousVirtualData = {};\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.resetInfiniteEdit = function () {\n    if (this.parent.enableInfiniteScrolling && this.isNormaledit) {\n      if (this.parent.editSettings.allowEditing && this.isEdit || this.parent.editSettings.allowAdding && this.isAdd) {\n        this.parent.isEdit = true;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.getVirtualInfiniteData = function (data) {\n    data.virtualData = this.virtualInfiniteData;\n    data.isAdd = this.isAdd;\n    data.isCancel = this.isCancel;\n  };\n\n  InfiniteScroll.prototype.editActionBegin = function (e) {\n    this.isEdit = true;\n    this.editRowIndex = e.index;\n    var rowObject = extend({}, this.getEditedRowObject().data);\n    e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;\n  };\n\n  InfiniteScroll.prototype.dataSourceModified = function () {\n    this.resetInfiniteBlocks({\n      requestType: this.empty\n    }, true);\n  };\n\n  InfiniteScroll.prototype.onDataReady = function (e) {\n    if (!isNullOrUndefined(e.count) && e.requestType !== 'infiniteScroll') {\n      this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);\n    }\n  };\n\n  InfiniteScroll.prototype.ensureIntialCollapse = function (isExpand) {\n    this.isInitialCollapse = !isExpand;\n  };\n\n  InfiniteScroll.prototype.infiniteScrollHandler = function (e) {\n    this.restoreInfiniteEdit();\n    this.restoreInfiniteAdd();\n    var targetEle = e.target;\n    var isInfinite = targetEle.classList.contains(literals.content);\n\n    if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {\n      var scrollEle = this.parent.getContent().firstElementChild;\n      this.prevScrollTop = scrollEle.scrollTop;\n      var rows = this.parent.getRows();\n\n      if (!rows.length) {\n        return;\n      }\n\n      var index = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n      var prevPage = this.parent.pageSettings.currentPage;\n      var args = void 0;\n      var offset = targetEle.scrollHeight - targetEle.scrollTop;\n      var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);\n      var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);\n\n      if (floor > targetEle.clientHeight) {\n        floor = floor - 1;\n      }\n\n      var isBottom = floor === targetEle.clientHeight || round === targetEle.clientHeight;\n\n      if (!isNullOrUndefined(this.groupCaptionAction)) {\n        return;\n      }\n\n      if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          this.isUpScroll = false;\n          this.isDownScroll = true;\n        }\n\n        var rows_2 = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));\n        var row = rows_2[rows_2.length - 1];\n        var rowIndex = getRowIndexFromElement(row);\n        this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;\n        args = {\n          requestType: 'infiniteScroll',\n          currentPage: this.parent.pageSettings.currentPage,\n          prevPage: prevPage,\n          startIndex: index,\n          direction: 'down'\n        };\n        this.makeRequest(args);\n      }\n\n      if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0 && this.parent.pageSettings.currentPage !== 1) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          this.isDownScroll = false;\n          this.isUpScroll = true;\n        }\n\n        var row = [].slice.call(scrollEle.getElementsByClassName(literals.row));\n        var rowIndex = getRowIndexFromElement(row[this.parent.pageSettings.pageSize - 1]);\n        var startIndex = getRowIndexFromElement(row[0]) - this.parent.pageSettings.pageSize;\n        this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;\n\n        if (this.parent.pageSettings.currentPage) {\n          args = {\n            requestType: 'infiniteScroll',\n            currentPage: this.parent.pageSettings.currentPage,\n            prevPage: prevPage,\n            startIndex: startIndex,\n            direction: 'up'\n          };\n          this.makeRequest(args);\n        }\n      }\n\n      if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {\n        if (this.isDownScroll || this.isUpScroll) {\n          scrollEle.scrollTop = this.top;\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.makeRequest = function (args) {\n    var _this = this;\n\n    if (this.parent.pageSettings.currentPage !== args.prevPage) {\n      var initBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n\n      if (initBlocks < this.maxPage && this.parent.pageSettings.currentPage <= this.maxPage) {\n        this.isInfiniteScroll = true;\n\n        if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {\n          setTimeout(function () {\n            _this.getVirtualInfiniteEditedData();\n\n            _this.parent.notify('model-changed', args);\n          }, 100);\n        } else {\n          setTimeout(function () {\n            _this.getVirtualInfiniteEditedData();\n\n            _this.parent.notify(events.refreshInfiniteModeBlocks, args);\n          }, 100);\n        }\n      } else {\n        this.parent.pageSettings.currentPage = this.maxPage;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.infinitePageQuery = function (query) {\n    if (this.initialRender) {\n      this.initialRender = false;\n      this.intialPageQuery(query);\n    } else {\n      if (!this.isInfiniteScroll && (this.requestType === 'delete' || this.requestType === 'add')) {\n        this.editPageQuery(query);\n      } else {\n        query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.editPageQuery = function (query) {\n    var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n    var isCache = this.parent.infiniteScrollSettings.enableCache;\n\n    if (isCache) {\n      this.infiniteCache = {};\n      this.infiniteFrozenCache = {};\n      this.infiniteCurrentViewData = {};\n      query.skip(this.firstIndex);\n      query.take(initialBlocks * this.parent.pageSettings.pageSize);\n    } else {\n      if (this.parent.editSettings.mode === 'Dialog') {\n        this.parent.clearSelection();\n      }\n\n      var index = this.requestType === 'delete' ? this.lastIndex : this.firstIndex;\n      query.skip(index);\n      query.take(1);\n    }\n  };\n\n  InfiniteScroll.prototype.intialPageQuery = function (query) {\n    if (this.parent.infiniteScrollSettings.enableCache && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n      this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n    }\n\n    var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;\n    query.page(1, pageSize);\n  };\n\n  InfiniteScroll.prototype.scrollToLastFocusedCell = function (e) {\n    var gObj = this.parent;\n    var rowIdx = this.lastFocusInfo.rowIdx + (e.keyArgs.action === literals.upArrow ? -1 : 1);\n    var cellIdx = this.lastFocusInfo.cellIdx;\n    var row = gObj.getRowByIndex(rowIdx);\n    var content = gObj.getContent().firstElementChild;\n\n    if (!row) {\n      var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n      var page = Math.floor(rowIdx / this.parent.pageSettings.pageSize) + 1;\n      gObj.pageSettings.currentPage = page;\n      var cols = gObj.getColumns();\n      remove(gObj.getContent().querySelector('tbody'));\n      gObj.getContent().querySelector('table').appendChild(gObj.createElement('tbody'));\n      var focusRows = [];\n\n      for (var i = page === 1 || this.maxPage === page ? 0 : -1, k = 0; k < gObj.infiniteScrollSettings.maxBlocks; this.maxPage === page ? i-- : i++, k++) {\n        var rows = this.infiniteCache[page + i];\n\n        if (rows) {\n          focusRows = focusRows.concat(rows);\n\n          for (var j = 0; j < rows.length; j++) {\n            gObj.getContent().querySelector('tbody').appendChild(rowRenderer.render(rows[j], cols));\n          }\n        }\n      }\n\n      gObj.notify(events.contentReady, {\n        rows: focusRows,\n        args: {}\n      });\n      setRowElements(gObj);\n    }\n\n    row = gObj.getRowByIndex(rowIdx);\n    var target = row.cells[cellIdx];\n    gObj.focusModule.isInfiniteScroll = true;\n    gObj.focusModule.onClick({\n      target: target\n    }, true);\n    gObj.selectRow(rowIdx);\n    target.focus();\n    this.isFocusScroll = false;\n    e.cancel = true;\n  };\n\n  InfiniteScroll.prototype.setLastCellFocusInfo = function (e) {\n    var cell = e.byClick && e.clickArgs.target || e.byKey && e.keyArgs.target || (!this.isFocusScroll && e).target;\n\n    if (cell && cell.classList.contains('e-rowcell')) {\n      var cellIdx = parseInt(cell.getAttribute('aria-colindex'), 10);\n      var rowIdx = parseInt(cell.parentElement.getAttribute('aria-rowindex'));\n      this.lastFocusInfo = {\n        rowIdx: rowIdx,\n        cellIdx: cellIdx\n      };\n    }\n  };\n\n  InfiniteScroll.prototype.infiniteCellFocus = function (e) {\n    var gObj = this.parent;\n    var cache = gObj.infiniteScrollSettings.enableCache;\n\n    if (e.byKey) {\n      if (cache && this.isFocusScroll) {\n        this.scrollToLastFocusedCell(e);\n        return;\n      }\n\n      var cell = document.activeElement;\n      var rowIndex = getRowIndexFromElement(cell.parentElement);\n      this.cellIndex = parseInt(cell.getAttribute(literals.ariaColIndex), 10);\n      var content = gObj.getContent().firstElementChild;\n      var totalRowsCount = this.maxPage * gObj.pageSettings.pageSize - 1;\n      var visibleRowCount = Math.floor(content.offsetHeight / this.parent.getRowHeight());\n      var contentRect = content.getBoundingClientRect();\n\n      if (!isNaN(rowIndex)) {\n        if (e.keyArgs.action === literals.downArrow || e.keyArgs.action === literals.enter) {\n          this.rowIndex = rowIndex += 1;\n          var row = gObj.getRowByIndex(rowIndex);\n          var rowRect = row && row.getBoundingClientRect();\n\n          if (cache) {\n            rowIndex = cell.parentElement.rowIndex + 1;\n          }\n\n          if (this.isFocusScroll || !row && rowIndex < totalRowsCount || rowRect && rowRect.bottom >= contentRect.bottom) {\n            if (!this.isFocusScroll) {\n              this.pressedKey = e.keyArgs.action;\n            }\n\n            this.isFocusScroll = false;\n            content.scrollTop = (rowIndex - visibleRowCount + 1) * this.parent.getRowHeight();\n          } else if (!cache && row) {\n            if (rowRect && (rowRect.bottom >= contentRect.bottom || rowRect.top < contentRect.top)) {\n              row.cells[this.cellIndex].scrollIntoView();\n            }\n          }\n        } else if (e.keyArgs.action === literals.upArrow || e.keyArgs.action === literals.shiftEnter) {\n          this.rowIndex = rowIndex -= 1;\n          var row = gObj.getRowByIndex(rowIndex);\n          var rowRect = row && row.getBoundingClientRect();\n\n          if (cache) {\n            rowIndex = cell.parentElement.rowIndex - 1;\n          }\n\n          if (!row || rowRect.top <= contentRect.top) {\n            this.pressedKey = e.keyArgs.action;\n            content.scrollTop = rowIndex * this.parent.getRowHeight();\n          }\n        }\n      }\n    } else if (e.key === 'PageDown' || e.key === 'PageUp') {\n      this.pressedKey = e.key;\n    }\n\n    this.setLastCellFocusInfo(e);\n  };\n\n  InfiniteScroll.prototype.createEmptyRowdata = function () {\n    var _this = this;\n\n    this.parent.getColumns().filter(function (e) {\n      _this.emptyRowData[e.field] = _this.empty;\n    });\n  };\n\n  InfiniteScroll.prototype.getVirtualInfiniteEditedData = function () {\n    var editForm = this.parent.element.querySelector('.' + literals.editedRow);\n    var addForm = this.parent.element.querySelector('.' + literals.addedRow);\n    var gridForm = this.parent.element.querySelector('.e-gridform');\n\n    if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {\n      var rowData = editForm ? extend({}, this.getEditedRowObject().data) : extend({}, this.emptyRowData);\n      this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);\n\n      if (this.parent.isFrozenGrid()) {\n        this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(this.parent.getMovableVirtualContent().querySelector('.e-gridform'), rowData);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.restoreInfiniteEdit = function () {\n    var content = this.parent.getContent().firstElementChild;\n    var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;\n\n    if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {\n      if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {\n        var row = this.parent.getRowByIndex(this.editRowIndex);\n\n        if (Object.keys(this.virtualInfiniteData).length && row && !this.parent.getContent().querySelector('.' + literals.editedRow)) {\n          var top_1 = row.getBoundingClientRect().top;\n\n          if (top_1 < content.offsetHeight && top_1 > this.parent.getRowHeight()) {\n            this.parent.isEdit = false;\n            this.parent.editModule.startEdit(row);\n          }\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.restoreInfiniteAdd = function () {\n    var content = this.parent.getContent().firstElementChild;\n\n    if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content.querySelector('.' + literals.addedRow)) {\n      var isTop = content.scrollTop < this.parent.getRowHeight();\n\n      if (isTop) {\n        this.parent.isEdit = false;\n        this.parent.addRecord();\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.appendInfiniteRows = function (e) {\n    var frozenCols = this.parent.isFrozenGrid();\n    var scrollEle = this.parent.getContent().firstElementChild;\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n    var isMovable = this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable';\n\n    if (isInfiniteScroll && !e.args.isFrozen && !isMovable || !isInfiniteScroll) {\n      if (isInfiniteScroll && e.args.direction === 'up') {\n        e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);\n      } else {\n        e.tbody.appendChild(e.frag);\n      }\n    }\n\n    if (!frozenCols) {\n      this.parent.contentModule.getTable().appendChild(e.tbody);\n      this.updateCurrentViewData();\n    } else {\n      if (isInfiniteScroll) {\n        if (e.tableName === literals.frozenLeft || this.parent.getFrozenMode() === 'Right' && e.tableName === literals.frozenRight) {\n          this.frozenFrag = e.frag;\n        } else if (this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable') {\n          this.movableFrag = e.frag;\n        } else {\n          var tbody = this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n\n          if (e.args.direction === 'up') {\n            tbody.insertBefore(this.frozenFrag, tbody.firstElementChild);\n          } else {\n            tbody.appendChild(this.frozenFrag);\n          }\n\n          if (e.tableName === literals.frozenRight) {\n            this.parent.getMovableVirtualContent().querySelector(literals.tbody).appendChild(this.movableFrag);\n            this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody).appendChild(e.frag);\n          } else {\n            this.parent.getMovableVirtualContent().querySelector('.' + literals.table).appendChild(e.tbody);\n          }\n\n          this.parent.contentModule.refreshScrollOffset();\n          this.updateCurrentViewData();\n        }\n      } else {\n        var table = void 0;\n\n        if (e.tableName === literals.frozenLeft) {\n          table = this.parent.getFrozenVirtualContent().querySelector('.' + literals.table);\n        } else if (e.tableName === 'movable') {\n          table = this.parent.getMovableVirtualContent().querySelector('.' + literals.table);\n\n          if (this.parent.getFrozenMode() !== literals.leftRight) {\n            this.parent.contentModule.refreshScrollOffset();\n            this.updateCurrentViewData();\n          }\n        } else {\n          table = this.parent.element.querySelector('.e-frozen-right-content').querySelector('.' + literals.table);\n\n          if (this.parent.getFrozenMode() === literals.leftRight) {\n            this.parent.contentModule.refreshScrollOffset();\n            this.updateCurrentViewData();\n          }\n        }\n\n        table.appendChild(e.tbody);\n        this.widthService.refreshFrozenScrollbar();\n      }\n    }\n\n    if (this.isInitialRender && !e.args.isFrozen) {\n      this.isInitialRender = false;\n      this.parent.scrollModule.setHeight();\n    }\n\n    if (!e.args.isFrozen) {\n      this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;\n\n      if (isInfiniteScroll) {\n        if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n          scrollEle.scrollTop = this.top;\n        }\n\n        setRowElements(this.parent);\n      }\n\n      this.restoreInfiniteAdd();\n      this.isScroll = true;\n    }\n\n    this.isInfiniteScroll = false;\n  };\n\n  InfiniteScroll.prototype.selectNewRow = function (args) {\n    var _this = this;\n\n    var gObj = this.parent;\n    var row = gObj.getRowByIndex(this.rowIndex);\n    var cache = gObj.infiniteScrollSettings.enableCache;\n\n    if (row && this.keys.some(function (value) {\n      return value === _this.pressedKey;\n    })) {\n      var content = gObj.getContent().firstElementChild;\n      var rowHeight = gObj.getRowHeight();\n      var target = row.cells[this.cellIndex];\n\n      if (this.pressedKey === literals.downArrow || this.pressedKey === literals.enter || cache && (this.pressedKey === literals.upArrow || this.pressedKey === literals.shiftEnter)) {\n        if (!cache && this.pressedKey !== literals.upArrow && this.pressedKey !== literals.shiftEnter) {\n          content.scrollTop = content.scrollTop + rowHeight;\n        }\n\n        gObj.focusModule.isInfiniteScroll = true;\n        gObj.focusModule.onClick({\n          target: target\n        }, true);\n        gObj.selectRow(this.rowIndex);\n      }\n    } else if (this.lastFocusInfo || this.pressedKey === literals.pageDown || this.pressedKey === literals.pageUp) {\n      var idx = cache ? 0 : this.lastFocusInfo.rowIdx;\n\n      if (gObj.getRowByIndex(idx)) {\n        var target = gObj.getCellFromIndex(idx, this.lastFocusInfo.cellIdx);\n\n        if (target) {\n          this.isFocusScroll = true;\n\n          if (!cache) {\n            gObj.focusModule.isInfiniteScroll = true;\n            gObj.focusModule.onClick({\n              target: target\n            }, true);\n          } else {\n            target.focus({\n              preventScroll: true\n            });\n          }\n        }\n      }\n    }\n\n    this.pressedKey = undefined;\n  };\n\n  InfiniteScroll.prototype.removeInfiniteCacheRows = function (e) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n\n    if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n      var rows = [].slice.call(this.parent.getContentTable().getElementsByClassName(literals.row));\n\n      if (e.args.direction === 'down') {\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n          var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n          this.removeCaptionRows(captionRows, e.args);\n        }\n\n        var addRowCount = this.parent.element.querySelector('.' + literals.addedRow) ? 0 : 1;\n        this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);\n      }\n\n      if (e.args.direction === 'up') {\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n          var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n          this.removeCaptionRows(captionRows, e.args);\n        } else {\n          this.removeBottomRows(rows, rows.length - 1, e.args);\n        }\n      }\n\n      this.isScroll = false;\n      this.top = this.calculateScrollTop(e.args);\n    }\n  };\n\n  InfiniteScroll.prototype.calculateScrollTop = function (args) {\n    var top = 0;\n    var scrollCnt = this.parent.getContent().firstElementChild;\n\n    if (args.direction === 'down') {\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n        top = this.captionRowHeight();\n      }\n\n      var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));\n      var captionCount = 0;\n\n      if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {\n        captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);\n      }\n\n      var value = captionCount ? captionCount : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);\n      var currentViewRowCount = 0;\n      var i = 0;\n\n      while (currentViewRowCount < scrollCnt.clientHeight) {\n        i++;\n        currentViewRowCount = i * this.parent.getRowHeight();\n      }\n\n      i = i - 1;\n      top += (value - i) * this.parent.getRowHeight();\n    }\n\n    if (args.direction === 'up') {\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n        top = this.infiniteCache[this.parent.pageSettings.currentPage].length * this.parent.getRowHeight();\n      } else if (this.isInitialCollapse) {\n        var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];\n        var count = 0;\n\n        for (var i = 0; i < groupedData.length; i++) {\n          if (groupedData[i].isCaptionRow) {\n            count++;\n          }\n        }\n\n        top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();\n      } else {\n        top += this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth();\n      }\n    }\n\n    return top;\n  };\n\n  InfiniteScroll.prototype.captionRowHeight = function () {\n    var rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));\n    return rows.length * this.parent.getRowHeight();\n  };\n\n  InfiniteScroll.prototype.removeTopRows = function (rows, maxIndx) {\n    var frozeCols = this.parent.isFrozenGrid();\n    var frRows = this.parent.getFrozenMode() === literals.leftRight ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n    var movableRows = frozeCols ? [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n\n    for (var i = 0; i <= maxIndx; i++) {\n      if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1 && i > maxIndx - this.parent.frozenRows) {\n        continue;\n      }\n\n      remove(rows[i]);\n\n      if (movableRows) {\n        remove(movableRows[i]);\n      }\n\n      if (frRows) {\n        remove(frRows[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.removeBottomRows = function (rows, maxIndx, args) {\n    var cnt = 0;\n    var frozeCols = this.parent.isFrozenGrid();\n    var movableRows = frozeCols ? [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n    var frRows = this.parent.getFrozenMode() === literals.leftRight ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n    var pageSize = this.parent.pageSettings.pageSize;\n\n    if (!frozeCols && this.infiniteCache[args.prevPage].length < pageSize) {\n      cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;\n    }\n\n    if (frozeCols && this.infiniteFrozenCache[args.prevPage][1].length < pageSize) {\n      cnt = this.parent.pageSettings.pageSize - this.infiniteFrozenCache[args.prevPage][1].length;\n    }\n\n    for (var i = maxIndx; cnt < pageSize; i--) {\n      cnt++;\n      remove(rows[i]);\n\n      if (movableRows) {\n        remove(movableRows[i]);\n      }\n\n      if (frRows) {\n        remove(frRows[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.removeCaptionRows = function (rows, args) {\n    var rowElements = [].slice.call(this.parent.getContent().getElementsByClassName(literals.row));\n\n    if (args.direction === 'down') {\n      var lastRow = rowElements[this.parent.pageSettings.pageSize - 1];\n      var lastRowIndex = getRowIndexFromElement(lastRow) - 1;\n      var k = 0;\n\n      for (var i = 0; k < lastRowIndex; i++) {\n        if (!rows[i].classList.contains(literals.row)) {\n          remove(rows[i]);\n        } else {\n          k = getRowIndexFromElement(rows[i]);\n        }\n      }\n    }\n\n    if (args.direction === 'up') {\n      var lastIndex = getRowIndexFromElement(rowElements[rowElements.length - 1]);\n      var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);\n      var startIndex = 0;\n\n      for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {\n        startIndex += this.infiniteCache[i].length;\n      }\n\n      for (var i = startIndex; i < rows.length; i++) {\n        remove(rows[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.resetInfiniteBlocks = function (args, isDataModified) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';\n\n    if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {\n      if (this.actions.some(function (value) {\n        return value === args.requestType;\n      }) || isDataModified) {\n        var scrollEle = this.parent.getContent().firstElementChild;\n        this.initialRender = true;\n        scrollEle.scrollTop = 0;\n        this.parent.pageSettings.currentPage = 1;\n        this.infiniteCache = this.infiniteFrozenCache = {};\n        this.infiniteCurrentViewData = {};\n        this.resetContentModuleCache({});\n        this.isRemove = false;\n        this.top = 0;\n        this.isInitialMovableRender = true;\n        this.isInitialCollapse = false;\n        this.parent.contentModule.isRemove = this.isRemove;\n        this.parent.contentModule.isAddRows = this.isRemove;\n        this.parent.contentModule.visibleRows = [];\n        this.parent.contentModule.visibleFrozenRows = [];\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.setCache = function (e) {\n    if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n      var frozeCols = this.parent.isFrozenGrid();\n      var idx = e.args.isFrozen ? 1 : 0;\n      var isEdit = e.args.requestType !== 'infiniteScroll' && (this.requestType === 'delete' || this.requestType === 'add');\n      var currentPage = this.parent.pageSettings.currentPage;\n\n      if (frozeCols && this.isInitialMovableRender || !frozeCols && !Object.keys(this.infiniteCache).length || isEdit) {\n        this.isInitialMovableRender = !e.args.isFrozen;\n        this.setInitialCache(e.modelData, e.args, isEdit);\n      }\n\n      if (!frozeCols && isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n        this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;\n        this.resetContentModuleCache(this.infiniteCache);\n      }\n\n      if (frozeCols) {\n        if (idx === 0 && isNullOrUndefined(this.infiniteFrozenCache[currentPage]) || !this.infiniteFrozenCache[currentPage][idx].length) {\n          this.createFrozenCache(currentPage);\n          this.infiniteFrozenCache[currentPage][idx] = e.modelData;\n\n          if (idx === 1) {\n            this.resetContentModuleCache(this.infiniteFrozenCache);\n          }\n        }\n      }\n\n      if (e.isInfiniteScroll && !this.isRemove) {\n        this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;\n        this.parent.contentModule.isRemove = this.isRemove;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.setInitialCache = function (data, args, isEdit, isCurrentViewData) {\n    var frozenCols = this.parent.isFrozenGrid();\n    var idx = args.isFrozen ? 1 : 0;\n    var k = !isEdit ? 1 : this.firstBlock;\n\n    for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {\n      var startIndex = (i - 1) * this.parent.pageSettings.pageSize;\n      var endIndex = i * this.parent.pageSettings.pageSize;\n\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {\n        this.setInitialGroupCache(data, k, startIndex, endIndex);\n      } else {\n        if (isCurrentViewData) {\n          this.infiniteCurrentViewData[k] = data.slice(startIndex, endIndex);\n        } else {\n          if (frozenCols) {\n            this.createFrozenCache(k);\n            this.infiniteFrozenCache[k][idx] = data.slice(startIndex, endIndex);\n            this.resetContentModuleCache(this.infiniteFrozenCache);\n          } else {\n            this.infiniteCache[k] = data.slice(startIndex, endIndex);\n            this.resetContentModuleCache(this.infiniteCache);\n          }\n        }\n      }\n\n      k++;\n    }\n  };\n\n  InfiniteScroll.prototype.createFrozenCache = function (index) {\n    if (!this.infiniteFrozenCache[index]) {\n      this.infiniteFrozenCache[index] = [[], []];\n    }\n  };\n\n  InfiniteScroll.prototype.setInitialGroupCache = function (data, index, sIndex, eIndex) {\n    var pageData = [];\n    var startIndex = 0;\n\n    for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {\n      startIndex += this.infiniteCache[i].length;\n    }\n\n    var k = sIndex;\n\n    for (var i = startIndex; i < data.length && k < eIndex; i++) {\n      if (data[i].index < eIndex || data[i].isCaptionRow) {\n        k = data[i].isCaptionRow ? k : data[i].index;\n        pageData.push(data[i]);\n      }\n\n      if (data[i].index >= eIndex || data[i].index === eIndex - 1) {\n        break;\n      }\n    }\n\n    this.infiniteCache[index] = pageData;\n    this.resetContentModuleCache(this.infiniteCache);\n  };\n\n  InfiniteScroll.prototype.resetContentModuleCache = function (data) {\n    this.parent.contentModule.infiniteCache = data;\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return InfiniteScroll;\n}();\n\nexport { InfiniteScroll };","map":{"version":3,"names":["isNullOrUndefined","remove","extend","RowModelGenerator","FreezeRowModelGenerator","RowRenderer","events","getScrollBarWidth","getEditedDataIndex","resetRowIndex","setRowElements","getRowIndexFromElement","getGroupKeysAndFields","getPredicates","generateExpandPredicates","literals","InfiniteScroll","parent","serviceLocator","infiniteCache","infiniteCurrentViewData","infiniteFrozenCache","isDownScroll","isUpScroll","isScroll","enableContinuousScroll","initialRender","isRemove","isInitialCollapse","prevScrollTop","actions","keys","downArrow","upArrow","enter","shiftEnter","rowTop","isInitialMovableRender","virtualInfiniteData","isCancel","emptyRowData","isNormaledit","isInfiniteScroll","isLastPage","isInitialRender","isFocusScroll","isGroupCollapse","editSettings","mode","addEventListener","widthService","getService","rowModelGenerator","isFrozenGrid","prototype","getModuleName","on","dataReady","onDataReady","dataSourceModified","infinitePageQuery","infiniteScrollHandler","beforeCellFocused","infiniteCellFocus","appendInfiniteContent","appendInfiniteRows","removeInfiniteRows","removeInfiniteCacheRows","resetInfiniteBlocks","setInfiniteCache","setCache","initialCollapse","ensureIntialCollapse","keyPressed","infiniteShowHide","setDisplayNone","virtualScrollEditActionBegin","editActionBegin","getVirtualData","getVirtualInfiniteData","editReset","resetInfiniteEdit","virtualScrollEditSuccess","infiniteEditSuccess","refreshVirtualCache","refreshInfiniteCache","refreshInfiniteEditrowindex","infiniteEditHandler","virtualScrollAddActionBegin","infiniteAddActionBegin","modelChanged","refreshInfiniteCurrentViewData","destroy","contentReady","selectNewRow","captionActionComplete","setVirtualPageQuery","setGroupCollapsePageQuery","actionBeginFunction","actionBegin","bind","actionCompleteFunction","actionComplete","dataBoundFunction","dataBound","deleteComplete","deleteComplate","removeEventListener","isDestroyed","off","groupCaptionAction","makeGroupCollapseRequest","hideSpinner","empty","args","gObj","infiniteScrollSettings","enableCache","skipPage","captionRow","getRowObjectFromUID","parentCapUid","rowObjs","getRowsObject","childCount","i","length","indent","isDataRow","key","indexOf","pred","fields","predicateList","and","query","where","skip","rows","getRows","size","pageSettings","pageSize","additionalCnt","take","initialBlocks","isCollapse","contetRect","getContent","firstElementChild","getBoundingClientRect","tableReact","contentModule","getTable","Math","round","bottom","getRowHeight","parentUid","showSpinner","caption","getCaptionChildCount","index","prevPage","currentPage","ceil","maxPage","scrollArg","requestType","startIndex","direction","isCaptionCollapse","notify","rowObj","make","data","isCaptionRow","childCheck","row","uid","count","updateCurrentViewData","groupSettings","columns","Object","currentViewData","page","isCache","blocks","maxBlocks","isMiddlePage","start","end","concat","e","cache","isAdd","isDelete","push","setInitialCache","slice","refreshScrollOffset","firstIndex","firstBlock","lastIndex","createEmptyRowdata","startEdit","makeRequest","frozenCols","rowElms","ensureRowAvailability","result","rows_1","getMovableRowsObject","getMovableDataRows","getFrozenMode","leftRight","frRows","getFrozenRightRowsObject","getFrozenRightRows","createRow","selectionModule","frozenRows","movableRows","rightRows","getFrozenRightDataRows","refreshInfinitePersistSelection","saveComplete","freezeRender","case","isMovable","isFrozenRows","isFrozenRight","generateRows","rowRenderer","tbody","element","querySelector","getMovableVirtualContent","getFrozenVirtualContent","getHeaderContent","getMovableVirtualHeader","getFrozenVirtualHeader","notifyArgs","cancel","infiniteCrudCancel","appendChild","render","getColumns","insertBefore","rowElems","rightFreezeRows","visibleRows","renderMovableContent","visibleFrozenRows","isFrozen","resume","sortSettings","getPrimaryKeyFieldNames","_this","keyField","swapCurrentViewData","splice","filter","resetInfiniteCurrentViewData","pageIndex","isFreeze","cells","visible","resetContentModuleCache","getEditedRowObject","editRowIndex","rowObjects","editedrow","updateCurrentViewRecords","getCurrentViewRecords","action","isEdit","editModule","previousVirtualData","enableInfiniteScrolling","allowEditing","allowAdding","virtualData","rowObject","isExpand","restoreInfiniteEdit","restoreInfiniteAdd","targetEle","target","isInfinite","classList","contains","content","isLeft","scrollEle","scrollTop","offset","scrollHeight","floor","clientHeight","isBottom","rows_2","call","querySelectorAll","rowIndex","getElementsByClassName","top","initBlocks","setTimeout","getVirtualInfiniteEditedData","refreshInfiniteModeBlocks","intialPageQuery","editPageQuery","clearSelection","scrollToLastFocusedCell","rowIdx","lastFocusInfo","keyArgs","cellIdx","getRowByIndex","cols","createElement","focusRows","k","j","focusModule","onClick","selectRow","focus","setLastCellFocusInfo","cell","byClick","clickArgs","byKey","parseInt","getAttribute","parentElement","document","activeElement","cellIndex","ariaColIndex","totalRowsCount","visibleRowCount","offsetHeight","contentRect","isNaN","rowRect","pressedKey","scrollIntoView","field","editForm","editedRow","addForm","addedRow","gridForm","rowData","getCurrentEditedData","frozenEdit","top_1","isTop","addRecord","tableName","frag","frozenLeft","frozenRight","frozenFrag","movableFrag","table","refreshFrozenScrollbar","scrollModule","setHeight","some","value","rowHeight","pageDown","pageUp","idx","getCellFromIndex","preventScroll","undefined","getContentTable","allowGrouping","captionRows","removeCaptionRows","addRowCount","removeTopRows","removeBottomRows","calculateScrollTop","scrollCnt","captionRowHeight","captionCount","currentViewRowCount","groupedData","maxIndx","frozeCols","cnt","rowElements","lastRow","lastRowIndex","isDataModified","infiniteScrollModule","isAddRows","modelData","createFrozenCache","isCurrentViewData","endIndex","setInitialGroupCache","sIndex","eIndex","pageData"],"sources":["C:/Users/shahj/OneDrive/Documents/GitHub/Admin Dashboard/Frontend/node_modules/@syncfusion/ej2-grids/src/grid/actions/infinite-scroll.js"],"sourcesContent":["import { isNullOrUndefined, remove, extend } from '@syncfusion/ej2-base';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { FreezeRowModelGenerator } from '../services/freeze-row-model-generator';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, getEditedDataIndex, resetRowIndex, setRowElements, getRowIndexFromElement, getGroupKeysAndFields, getPredicates, generateExpandPredicates } from '../base/util';\nimport * as literals from '../base/string-literals';\n/**\n * Infinite Scrolling class\n *\n * @hidden\n */\nvar InfiniteScroll = /** @class */ (function () {\n    /**\n     * Constructor for the Grid infinite scrolling.\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator\n     * @hidden\n     */\n    function InfiniteScroll(parent, serviceLocator) {\n        this.infiniteCache = {};\n        this.infiniteCurrentViewData = {};\n        this.infiniteFrozenCache = {};\n        this.isDownScroll = false;\n        this.isUpScroll = false;\n        this.isScroll = true;\n        this.enableContinuousScroll = false;\n        this.initialRender = true;\n        this.isRemove = false;\n        this.isInitialCollapse = false;\n        this.prevScrollTop = 0;\n        this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting', 'refresh'];\n        this.keys = [literals.downArrow, literals.upArrow, literals.enter, literals.shiftEnter];\n        this.rowTop = 0;\n        this.isInitialMovableRender = true;\n        this.virtualInfiniteData = {};\n        this.isCancel = false;\n        this.emptyRowData = {};\n        this.isNormaledit = false;\n        this.isInfiniteScroll = false;\n        this.isLastPage = false;\n        this.isInitialRender = true;\n        this.isFocusScroll = false;\n        this.isGroupCollapse = false;\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        this.isNormaledit = this.parent.editSettings.mode === 'Normal';\n        this.addEventListener();\n        this.widthService = serviceLocator.getService('widthService');\n        this.rowModelGenerator = this.parent.isFrozenGrid() ? new FreezeRowModelGenerator(this.parent)\n            : new RowModelGenerator(this.parent);\n    }\n    InfiniteScroll.prototype.getModuleName = function () {\n        return 'infiniteScroll';\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.addEventListener = function () {\n        this.parent.on(events.dataReady, this.onDataReady, this);\n        this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n        this.parent.on(events.infinitePageQuery, this.infinitePageQuery, this);\n        this.parent.on(events.infiniteScrollHandler, this.infiniteScrollHandler, this);\n        this.parent.on(events.beforeCellFocused, this.infiniteCellFocus, this);\n        this.parent.on(events.appendInfiniteContent, this.appendInfiniteRows, this);\n        this.parent.on(events.removeInfiniteRows, this.removeInfiniteCacheRows, this);\n        this.parent.on(events.resetInfiniteBlocks, this.resetInfiniteBlocks, this);\n        this.parent.on(events.setInfiniteCache, this.setCache, this);\n        this.parent.on(events.initialCollapse, this.ensureIntialCollapse, this);\n        this.parent.on(events.keyPressed, this.infiniteCellFocus, this);\n        this.parent.on(events.infiniteShowHide, this.setDisplayNone, this);\n        this.parent.on(events.virtualScrollEditActionBegin, this.editActionBegin, this);\n        this.parent.on(events.getVirtualData, this.getVirtualInfiniteData, this);\n        this.parent.on(events.editReset, this.resetInfiniteEdit, this);\n        this.parent.on(events.virtualScrollEditSuccess, this.infiniteEditSuccess, this);\n        this.parent.on(events.refreshVirtualCache, this.refreshInfiniteCache, this);\n        this.parent.on(events.refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex, this);\n        this.parent.on(events.infiniteEditHandler, this.infiniteEditHandler, this);\n        this.parent.on(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);\n        this.parent.on(events.modelChanged, this.modelChanged, this);\n        this.parent.on(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);\n        this.parent.on(events.destroy, this.destroy, this);\n        this.parent.on(events.contentReady, this.selectNewRow, this);\n        this.parent.on(events.captionActionComplete, this.captionActionComplete, this);\n        this.parent.on(events.setVirtualPageQuery, this.setGroupCollapsePageQuery, this);\n        this.actionBeginFunction = this.actionBegin.bind(this);\n        this.actionCompleteFunction = this.actionComplete.bind(this);\n        this.dataBoundFunction = this.dataBound.bind(this);\n        this.parent.on(events.deleteComplete, this.deleteComplate, this);\n        this.parent.addEventListener(events.actionBegin, this.actionBeginFunction);\n        this.parent.addEventListener(events.actionComplete, this.actionCompleteFunction);\n        this.parent.addEventListener(events.dataBound, this.dataBoundFunction);\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.dataReady, this.onDataReady);\n        this.parent.off(events.dataSourceModified, this.dataSourceModified);\n        this.parent.off(events.infinitePageQuery, this.infinitePageQuery);\n        this.parent.off(events.infiniteScrollHandler, this.infiniteScrollHandler);\n        this.parent.off(events.beforeCellFocused, this.infiniteCellFocus);\n        this.parent.off(events.appendInfiniteContent, this.appendInfiniteRows);\n        this.parent.off(events.removeInfiniteRows, this.removeInfiniteCacheRows);\n        this.parent.off(events.resetInfiniteBlocks, this.resetInfiniteBlocks);\n        this.parent.off(events.setInfiniteCache, this.setCache);\n        this.parent.off(events.initialCollapse, this.ensureIntialCollapse);\n        this.parent.off(events.keyPressed, this.infiniteCellFocus);\n        this.parent.off(events.infiniteShowHide, this.setDisplayNone);\n        this.parent.off(events.virtualScrollEditActionBegin, this.editActionBegin);\n        this.parent.off(events.getVirtualData, this.getVirtualInfiniteData);\n        this.parent.off(events.editReset, this.resetInfiniteEdit);\n        this.parent.off(events.virtualScrollEditSuccess, this.infiniteEditSuccess);\n        this.parent.off(events.refreshVirtualCache, this.refreshInfiniteCache);\n        this.parent.on(events.refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex);\n        this.parent.off(events.infiniteEditHandler, this.infiniteEditHandler);\n        this.parent.off(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin);\n        this.parent.off(events.modelChanged, this.modelChanged);\n        this.parent.off(events.refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);\n        this.parent.off(events.destroy, this.destroy);\n        this.parent.off(events.contentReady, this.selectNewRow);\n        this.parent.off(events.captionActionComplete, this.captionActionComplete);\n        this.parent.off(events.setVirtualPageQuery, this.setGroupCollapsePageQuery);\n        this.parent.removeEventListener(events.actionBegin, this.actionBeginFunction);\n        this.parent.removeEventListener(events.actionComplete, this.actionCompleteFunction);\n        this.parent.removeEventListener(events.dataBound, this.dataBoundFunction);\n    };\n    InfiniteScroll.prototype.dataBound = function () {\n        if (this.groupCaptionAction === 'collapse') {\n            this.groupCaptionAction = 'refresh';\n            this.makeGroupCollapseRequest();\n        }\n        else if (this.groupCaptionAction === 'refresh') {\n            this.parent.hideSpinner();\n            this.groupCaptionAction = this.empty;\n        }\n    };\n    InfiniteScroll.prototype.setGroupCollapsePageQuery = function (args) {\n        var gObj = this.parent;\n        if (!gObj.infiniteScrollSettings.enableCache && this.isGroupCollapse) {\n            args.skipPage = true;\n            this.isGroupCollapse = false;\n            if (this.groupCaptionAction === 'collapse') {\n                var captionRow = gObj.getRowObjectFromUID(this.parentCapUid);\n                var rowObjs = gObj.getRowsObject();\n                var childCount = 0;\n                for (var i = rowObjs.length - 1; i >= 0; i--) {\n                    if (rowObjs[i].indent === captionRow.indent) {\n                        break;\n                    }\n                    if (rowObjs[i].isDataRow) {\n                        childCount++;\n                    }\n                }\n                var key = getGroupKeysAndFields(rowObjs.indexOf(captionRow), rowObjs);\n                var pred = generateExpandPredicates(key.fields, key.keys, this);\n                var predicateList = getPredicates(pred);\n                pred = predicateList[predicateList.length - 1];\n                for (var i = predicateList.length - 2; i >= 0; i--) {\n                    pred = pred.and(predicateList[i]);\n                }\n                args.query.where(pred);\n                args.query.skip(childCount);\n                this.parentCapUid = this.empty;\n            }\n            else {\n                var rows = gObj.getRows();\n                var size = gObj.pageSettings.pageSize;\n                var skip = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n                var additionalCnt = ((skip - (skip % size)) + size) - skip;\n                if ((skip % size) === 0) {\n                    additionalCnt = 0;\n                }\n                args.query.skip(skip);\n                args.query.take((gObj.infiniteScrollSettings.initialBlocks * gObj.pageSettings.pageSize) + additionalCnt);\n            }\n        }\n    };\n    InfiniteScroll.prototype.captionActionComplete = function (args) {\n        var gObj = this.parent;\n        if (!gObj.infiniteScrollSettings.enableCache && args.isCollapse) {\n            var contetRect = gObj.getContent().firstElementChild.getBoundingClientRect();\n            var tableReact = gObj.contentModule.getTable().getBoundingClientRect();\n            if (Math.round(tableReact.bottom - gObj.getRowHeight()) <= Math.round(contetRect.bottom)) {\n                this.parentCapUid = args.parentUid;\n                this.groupCaptionAction = 'collapse';\n                gObj.showSpinner();\n                var caption = gObj.getRowObjectFromUID(args.parentUid);\n                var childCount = this.getCaptionChildCount(caption);\n                if (!childCount) {\n                    this.groupCaptionAction = 'refresh';\n                    this.makeGroupCollapseRequest();\n                }\n                else {\n                    this.makeGroupCollapseRequest(args.parentUid);\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.makeGroupCollapseRequest = function (parentUid) {\n        var gObj = this.parent;\n        var rows = gObj.getRows();\n        var index = getRowIndexFromElement(rows[rows.length - 1]);\n        var prevPage = this.parent.pageSettings.currentPage;\n        this.parent.pageSettings.currentPage = Math.ceil(index / this.parent.pageSettings.pageSize) + 1;\n        if (this.parent.pageSettings.currentPage > this.maxPage) {\n            gObj.hideSpinner();\n            return;\n        }\n        var scrollArg = {\n            requestType: 'infiniteScroll',\n            currentPage: this.parent.pageSettings.currentPage,\n            prevPage: prevPage,\n            startIndex: index + 1,\n            direction: 'down',\n            isCaptionCollapse: true,\n            parentUid: parentUid\n        };\n        this.isGroupCollapse = true;\n        this.parent.notify('model-changed', scrollArg);\n    };\n    InfiniteScroll.prototype.getCaptionChildCount = function (caption) {\n        var rowObj = this.parent.getRowsObject();\n        var index = rowObj.indexOf(caption);\n        var make = false;\n        for (var i = index; i < rowObj.length; i++) {\n            if ((rowObj[i].indent === caption.indent || rowObj[i].indent < caption.indent)\n                && rowObj[i].data.key !== caption.data.key) {\n                break;\n            }\n            if (rowObj[i].isCaptionRow && !this.childCheck(rowObj, rowObj[i], i)) {\n                make = true;\n                break;\n            }\n        }\n        return make;\n    };\n    InfiniteScroll.prototype.childCheck = function (rowObj, row, index) {\n        var childCount = 0;\n        for (var i = index + 1; i < rowObj.length; i++) {\n            if (rowObj[i].indent === row.indent) {\n                break;\n            }\n            if (rowObj[i].indent === (row.indent + 1) && rowObj[i].parentUid === row.uid) {\n                childCount++;\n            }\n        }\n        return row.data.count === childCount;\n    };\n    InfiniteScroll.prototype.updateCurrentViewData = function () {\n        var gObj = this.parent;\n        if (gObj.groupSettings.columns.length) {\n            return;\n        }\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        gObj.currentViewData = [];\n        var page = gObj.pageSettings.currentPage;\n        var isCache = gObj.infiniteScrollSettings.enableCache;\n        var blocks = gObj.infiniteScrollSettings.maxBlocks;\n        var isMiddlePage = isCache && (page > blocks || (this.isUpScroll && page > 1));\n        var start = isMiddlePage ? this.isUpScroll ? page : (page - blocks) + 1 : 1;\n        var end = isMiddlePage ? (start + blocks) - 1 : isCache ? blocks : keys.length;\n        for (var i = start; i <= end; i++) {\n            if (this.infiniteCurrentViewData[i]) {\n                gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.refreshInfiniteCurrentViewData = function (e) {\n        var page = this.parent.pageSettings.currentPage;\n        var size = this.parent.pageSettings.pageSize;\n        var blocks = this.parent.infiniteScrollSettings.initialBlocks;\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        var cache = this.parent.infiniteScrollSettings.enableCache;\n        if (!this.parent.groupSettings.columns.length) {\n            var isAdd = e.args.requestType === 'save';\n            var isDelete = e.args.requestType === 'delete';\n            if (!cache && (isAdd || isDelete)) {\n                if (isAdd) {\n                    this.infiniteCurrentViewData[1] = e.data.concat(this.infiniteCurrentViewData[1]);\n                }\n                else {\n                    this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);\n                }\n            }\n            else {\n                if (blocks > 1 && e.data.length === (blocks * size)) {\n                    this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === 'delete', true);\n                }\n                else {\n                    this.infiniteCurrentViewData[page] = e.data.slice();\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.deleteComplate = function () {\n        if (this.parent.isFrozenGrid() && !this.parent.infiniteScrollSettings.enableCache) {\n            this.parent.contentModule.refreshScrollOffset();\n        }\n    };\n    InfiniteScroll.prototype.modelChanged = function (args) {\n        var rows = this.parent.getRows();\n        if (rows && rows.length && args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {\n            this.firstIndex = getRowIndexFromElement(rows[0]);\n            this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);\n            this.lastIndex = getRowIndexFromElement(rows[rows.length - 1]);\n            if (args.requestType === 'delete') {\n                var rowObj = this.parent.getRowsObject();\n                args.startIndex = this.parent.infiniteScrollSettings.enableCache\n                    ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;\n            }\n            else {\n                args.startIndex = this.firstIndex;\n            }\n            if (!this.parent.infiniteScrollSettings.enableCache\n                && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {\n                this.isLastPage = true;\n                this.lastIndex = this.lastIndex - 1;\n            }\n        }\n    };\n    InfiniteScroll.prototype.infiniteAddActionBegin = function (args) {\n        if (this.isNormaledit) {\n            this.isAdd = true;\n            if (this.parent.infiniteScrollSettings.enableCache) {\n                if (!Object.keys(this.emptyRowData).length) {\n                    this.createEmptyRowdata();\n                }\n                if (this.parent.pageSettings.currentPage > 1) {\n                    args.startEdit = false;\n                    this.resetInfiniteBlocks({}, true);\n                    this.makeRequest({ currentPage: 1 });\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n        if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete'\n            || (args.e.requestType === 'save' && this.requestType === 'add'))) {\n            var frozenCols = this.parent.isFrozenGrid();\n            var rowElms = this.parent.getRows();\n            var rows = this.parent.getRowsObject();\n            if (this.ensureRowAvailability(rows, args.result[0])) {\n                if (rowElms.length) {\n                    this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add', true);\n                    if (frozenCols) {\n                        var rows_1 = this.parent.getMovableRowsObject();\n                        this.resetRowIndex(rows_1, args.e, this.parent.getMovableDataRows(), this.requestType === 'add');\n                        if (this.parent.getFrozenMode() === literals.leftRight) {\n                            var frRows = this.parent.getFrozenRightRowsObject();\n                            this.resetRowIndex(frRows, args.e, this.parent.getFrozenRightRows(), this.requestType === 'add');\n                        }\n                    }\n                }\n                if (!this.isLastPage) {\n                    this.createRow(rows, args);\n                }\n                else {\n                    this.isLastPage = false;\n                    this.parent.pageSettings.currentPage = this.maxPage;\n                    if (this.parent.selectionModule.index < this.parent.frozenRows) {\n                        remove(rowElms[this.parent.frozenRows - 1]);\n                        this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);\n                        if (frozenCols) {\n                            var movableRows = this.parent.getMovableDataRows();\n                            remove(movableRows[this.parent.frozenRows]);\n                            this.createRow([this.parent.getMovableRowsObject()[this.parent.frozenRows - 1]], args, true, true);\n                            if (this.parent.getFrozenMode() === literals.leftRight) {\n                                var rightRows = this.parent.getFrozenRightDataRows();\n                                remove(rightRows[this.parent.frozenRows]);\n                                this.createRow([this.parent.getFrozenRightRowsObject()[this.parent.frozenRows - 1]], args, false, true, true);\n                            }\n                        }\n                        setRowElements(this.parent);\n                    }\n                }\n            }\n            this.parent.hideSpinner();\n            this.parent.notify(events.refreshInfinitePersistSelection, {});\n            if (this.requestType === 'delete') {\n                this.parent.notify(events.deleteComplete, args.e);\n            }\n            else {\n                this.parent.notify(events.saveComplete, args.e);\n            }\n        }\n        this.parent.notify(events.freezeRender, { case: 'refreshHeight' });\n    };\n    InfiniteScroll.prototype.createRow = function (rows, args, isMovable, isFrozenRows, isFrozenRight) {\n        var row = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;\n        var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n        var tbody;\n        if (isFrozenRight) {\n            tbody = this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody);\n        }\n        else {\n            tbody = !this.parent.isFrozenGrid() ? this.parent.getContent().querySelector(literals.tbody) : isMovable\n                ? this.parent.getMovableVirtualContent().querySelector(literals.tbody)\n                : this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n        }\n        if (this.parent.frozenRows) {\n            tbody = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add'\n                ? !this.parent.isFrozenGrid() ? this.parent.getHeaderContent().querySelector(literals.tbody)\n                    : isMovable ? this.parent.getMovableVirtualHeader().querySelector(literals.tbody)\n                        : isFrozenRight ? this.parent.element.querySelector('.e-frozen-right-header').querySelector(literals.tbody)\n                            : this.parent.getFrozenVirtualHeader().querySelector(literals.tbody) : tbody;\n        }\n        var notifyArgs = {\n            rows: rows, cancel: false, args: args, isMovable: isMovable,\n            isFrozenRows: isFrozenRows, isFrozenRight: isFrozenRows, row: row\n        };\n        this.parent.notify(events.infiniteCrudCancel, notifyArgs);\n        if (!notifyArgs.cancel) {\n            for (var i = row.length - 1; i >= 0; i--) {\n                if (this.requestType === 'delete') {\n                    tbody.appendChild(rowRenderer.render(row[i], this.parent.getColumns()));\n                }\n                else {\n                    tbody.insertBefore(rowRenderer.render(row[i], this.parent.getColumns()), tbody.firstElementChild);\n                }\n            }\n        }\n        if (!isFrozenRows && this.parent.frozenRows\n            && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {\n            var rowElems = isMovable ? this.parent.getMovableDataRows() : isFrozenRight ? this.parent.getFrozenRightDataRows()\n                : this.parent.getRows();\n            var index = (isMovable || isFrozenRight) && this.requestType === 'add'\n                ? this.parent.frozenRows : this.parent.frozenRows - 1;\n            remove(rowElems[index]);\n            this.createRow([rows[this.parent.frozenRows - 1]], args, isMovable, true, isFrozenRight);\n        }\n        if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {\n            if (isFrozenRight) {\n                setRowElements(this.parent);\n                this.parent.contentModule.rightFreezeRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n            }\n            else if (!this.parent.isFrozenGrid() || isMovable) {\n                setRowElements(this.parent);\n                this.parent.contentModule.visibleRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n                if (this.parent.getFrozenMode() === literals.leftRight) {\n                    args.e.renderMovableContent = true;\n                    this.createRow(this.parent.getFrozenRightRowsObject(), args, false, false, true);\n                }\n            }\n            else {\n                this.parent.contentModule.visibleFrozenRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n                args.e.isFrozen = true;\n                this.createRow(this.parent.getMovableRowsObject(), args, true);\n            }\n        }\n    };\n    InfiniteScroll.prototype.ensureRowAvailability = function (rows, data) {\n        var resume = true;\n        if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache\n            && this.parent.sortSettings.columns && this.requestType === 'add') {\n            var key = this.parent.getPrimaryKeyFieldNames()[0];\n            for (var i = 0; i < rows.length; i++) {\n                if (rows[i].data[key] === data[key]) {\n                    resume = false;\n                    break;\n                }\n            }\n        }\n        return resume;\n    };\n    InfiniteScroll.prototype.generateRows = function (data, args) {\n        return this.rowModelGenerator.generateRows(data, args);\n    };\n    InfiniteScroll.prototype.resetRowIndex = function (rows, args, rowElms, isAdd, isFrozen) {\n        var _this = this;\n        var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n        var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);\n        if (isAdd) {\n            if (isRemove) {\n                if (isFrozen && !this.parent.groupSettings.columns.length) {\n                    this.swapCurrentViewData(1, true);\n                }\n                remove(rowElms[rows.length - 1]);\n                rowElms.splice(rows.length - 1, 1);\n                rows.splice(rows.length - 1, 1);\n            }\n        }\n        else {\n            rows.filter(function (e, index) {\n                if (e.data[keyField] === args.data[0][keyField]) {\n                    if (isFrozen && !_this.parent.groupSettings.columns.length) {\n                        var page = Math.ceil((index + 1) / _this.parent.pageSettings.pageSize);\n                        _this.resetInfiniteCurrentViewData(page, index);\n                    }\n                    rows.splice(index, 1);\n                    remove(rowElms[index]);\n                    rowElms.splice(index, 1);\n                }\n            });\n        }\n        var startIndex = isAdd ? 1 : 0;\n        resetRowIndex(this.parent, rows, rowElms, startIndex);\n    };\n    InfiniteScroll.prototype.resetInfiniteCurrentViewData = function (page, index) {\n        index = index - ((page - 1) * this.parent.pageSettings.pageSize);\n        this.infiniteCurrentViewData[page].splice(index, 1);\n        this.swapCurrentViewData(page, false);\n    };\n    InfiniteScroll.prototype.swapCurrentViewData = function (page, isAdd) {\n        var keys = Object.keys(this.infiniteCurrentViewData);\n        var end = isAdd ? keys.length + 1 : keys.length;\n        for (var i = page; i < end; i++) {\n            if (this.infiniteCurrentViewData[i + 1]) {\n                var pageIndex = isAdd ? i : i + 1;\n                var index = isAdd ? this.infiniteCurrentViewData[i].length - 1 : 0;\n                var data = this.infiniteCurrentViewData[pageIndex].splice(index, 1);\n                if (isAdd) {\n                    this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);\n                    if ((i + 1) === end - 1) {\n                        this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);\n                    }\n                }\n                else {\n                    this.infiniteCurrentViewData[i].push(data[0]);\n                }\n            }\n        }\n        this.updateCurrentViewData();\n    };\n    InfiniteScroll.prototype.setDisplayNone = function (args) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n            var frozenCols = this.parent.isFrozenGrid();\n            var keys = frozenCols ? Object.keys(this.infiniteFrozenCache) : Object.keys(this.infiniteCache);\n            for (var i = 1; i <= keys.length; i++) {\n                var cache = frozenCols ? args.isFreeze ? this.infiniteFrozenCache[i][0]\n                    : this.infiniteFrozenCache[i][1] : this.infiniteCache[i];\n                cache.filter(function (e) {\n                    e.cells[args.index].visible = args.visible === '';\n                });\n            }\n            this.resetContentModuleCache(frozenCols ? this.infiniteFrozenCache : this.infiniteCache);\n        }\n    };\n    InfiniteScroll.prototype.refreshInfiniteCache = function (args) {\n        this.getEditedRowObject().data = args.data;\n    };\n    InfiniteScroll.prototype.refreshInfiniteEditrowindex = function (args) {\n        this.editRowIndex = args.index;\n    };\n    InfiniteScroll.prototype.getEditedRowObject = function () {\n        var rowObjects = this.parent.getRowsObject();\n        var editedrow;\n        for (var i = 0; i < rowObjects.length; i++) {\n            if (rowObjects[i].index === this.editRowIndex) {\n                editedrow = rowObjects[i];\n            }\n        }\n        return editedrow;\n    };\n    InfiniteScroll.prototype.infiniteEditSuccess = function (args) {\n        if (this.isNormaledit) {\n            if (!this.isAdd && args.data) {\n                this.updateCurrentViewRecords(args.data);\n            }\n            this.isAdd = false;\n        }\n    };\n    InfiniteScroll.prototype.updateCurrentViewRecords = function (data) {\n        var index = getEditedDataIndex(this.parent, data);\n        if (!isNullOrUndefined(index)) {\n            this.parent.getCurrentViewRecords()[index] = data;\n        }\n    };\n    InfiniteScroll.prototype.actionBegin = function (args) {\n        if (args.requestType === 'add' || args.requestType === 'delete') {\n            this.requestType = args.requestType;\n        }\n        else if (args.action === 'add' && args.requestType === 'save') {\n            this.requestType = args.action;\n        }\n        if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === 'searching'\n            || args.requestType === 'sorting' || args.requestType === 'filtering') {\n            this.isInitialRender = true;\n        }\n    };\n    InfiniteScroll.prototype.actionComplete = function (args) {\n        if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {\n            this.requestType = this.empty;\n            this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';\n            this.isAdd = this.isEdit = false;\n            if (this.isNormaledit) {\n                this.editRowIndex = this.empty;\n                this.virtualInfiniteData = {};\n                this.parent.editModule.previousVirtualData = {};\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetInfiniteEdit = function () {\n        if (this.parent.enableInfiniteScrolling && this.isNormaledit) {\n            if ((this.parent.editSettings.allowEditing && this.isEdit) || (this.parent.editSettings.allowAdding && this.isAdd)) {\n                this.parent.isEdit = true;\n            }\n        }\n    };\n    InfiniteScroll.prototype.getVirtualInfiniteData = function (data) {\n        data.virtualData = this.virtualInfiniteData;\n        data.isAdd = this.isAdd;\n        data.isCancel = this.isCancel;\n    };\n    InfiniteScroll.prototype.editActionBegin = function (e) {\n        this.isEdit = true;\n        this.editRowIndex = e.index;\n        var rowObject = extend({}, this.getEditedRowObject().data);\n        e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;\n    };\n    InfiniteScroll.prototype.dataSourceModified = function () {\n        this.resetInfiniteBlocks({ requestType: this.empty }, true);\n    };\n    InfiniteScroll.prototype.onDataReady = function (e) {\n        if (!isNullOrUndefined(e.count) && e.requestType !== 'infiniteScroll') {\n            this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);\n        }\n    };\n    InfiniteScroll.prototype.ensureIntialCollapse = function (isExpand) {\n        this.isInitialCollapse = !isExpand;\n    };\n    InfiniteScroll.prototype.infiniteScrollHandler = function (e) {\n        this.restoreInfiniteEdit();\n        this.restoreInfiniteAdd();\n        var targetEle = e.target;\n        var isInfinite = targetEle.classList.contains(literals.content);\n        if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {\n            var scrollEle = this.parent.getContent().firstElementChild;\n            this.prevScrollTop = scrollEle.scrollTop;\n            var rows = this.parent.getRows();\n            if (!rows.length) {\n                return;\n            }\n            var index = getRowIndexFromElement(rows[rows.length - 1]) + 1;\n            var prevPage = this.parent.pageSettings.currentPage;\n            var args = void 0;\n            var offset = targetEle.scrollHeight - targetEle.scrollTop;\n            var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);\n            var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);\n            if (floor > targetEle.clientHeight) {\n                floor = floor - 1;\n            }\n            var isBottom = (floor === targetEle.clientHeight || round === targetEle.clientHeight);\n            if (!isNullOrUndefined(this.groupCaptionAction)) {\n                return;\n            }\n            if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {\n                if (this.parent.infiniteScrollSettings.enableCache) {\n                    this.isUpScroll = false;\n                    this.isDownScroll = true;\n                }\n                var rows_2 = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));\n                var row = rows_2[rows_2.length - 1];\n                var rowIndex = getRowIndexFromElement(row);\n                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;\n                args = {\n                    requestType: 'infiniteScroll',\n                    currentPage: this.parent.pageSettings.currentPage,\n                    prevPage: prevPage,\n                    startIndex: index,\n                    direction: 'down'\n                };\n                this.makeRequest(args);\n            }\n            if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0\n                && this.parent.pageSettings.currentPage !== 1) {\n                if (this.parent.infiniteScrollSettings.enableCache) {\n                    this.isDownScroll = false;\n                    this.isUpScroll = true;\n                }\n                var row = [].slice.call(scrollEle.getElementsByClassName(literals.row));\n                var rowIndex = getRowIndexFromElement(row[this.parent.pageSettings.pageSize - 1]);\n                var startIndex = getRowIndexFromElement(row[0]) - this.parent.pageSettings.pageSize;\n                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;\n                if (this.parent.pageSettings.currentPage) {\n                    args = {\n                        requestType: 'infiniteScroll',\n                        currentPage: this.parent.pageSettings.currentPage,\n                        prevPage: prevPage,\n                        startIndex: startIndex,\n                        direction: 'up'\n                    };\n                    this.makeRequest(args);\n                }\n            }\n            if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {\n                if (this.isDownScroll || this.isUpScroll) {\n                    scrollEle.scrollTop = this.top;\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.makeRequest = function (args) {\n        var _this = this;\n        if (this.parent.pageSettings.currentPage !== args.prevPage) {\n            var initBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n            if (initBlocks < this.maxPage && this.parent.pageSettings.currentPage <= this.maxPage) {\n                this.isInfiniteScroll = true;\n                if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {\n                    setTimeout(function () {\n                        _this.getVirtualInfiniteEditedData();\n                        _this.parent.notify('model-changed', args);\n                    }, 100);\n                }\n                else {\n                    setTimeout(function () {\n                        _this.getVirtualInfiniteEditedData();\n                        _this.parent.notify(events.refreshInfiniteModeBlocks, args);\n                    }, 100);\n                }\n            }\n            else {\n                this.parent.pageSettings.currentPage = this.maxPage;\n            }\n        }\n    };\n    InfiniteScroll.prototype.infinitePageQuery = function (query) {\n        if (this.initialRender) {\n            this.initialRender = false;\n            this.intialPageQuery(query);\n        }\n        else {\n            if (!this.isInfiniteScroll && (this.requestType === 'delete' || this.requestType === 'add')) {\n                this.editPageQuery(query);\n            }\n            else {\n                query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n            }\n        }\n    };\n    InfiniteScroll.prototype.editPageQuery = function (query) {\n        var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n        var isCache = this.parent.infiniteScrollSettings.enableCache;\n        if (isCache) {\n            this.infiniteCache = {};\n            this.infiniteFrozenCache = {};\n            this.infiniteCurrentViewData = {};\n            query.skip(this.firstIndex);\n            query.take(initialBlocks * this.parent.pageSettings.pageSize);\n        }\n        else {\n            if (this.parent.editSettings.mode === 'Dialog') {\n                this.parent.clearSelection();\n            }\n            var index = this.requestType === 'delete' ? this.lastIndex : this.firstIndex;\n            query.skip(index);\n            query.take(1);\n        }\n    };\n    InfiniteScroll.prototype.intialPageQuery = function (query) {\n        if (this.parent.infiniteScrollSettings.enableCache\n            && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n            this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n        }\n        var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;\n        query.page(1, pageSize);\n    };\n    InfiniteScroll.prototype.scrollToLastFocusedCell = function (e) {\n        var gObj = this.parent;\n        var rowIdx = this.lastFocusInfo.rowIdx + (e.keyArgs.action === literals.upArrow ? -1 : 1);\n        var cellIdx = this.lastFocusInfo.cellIdx;\n        var row = gObj.getRowByIndex(rowIdx);\n        var content = gObj.getContent().firstElementChild;\n        if (!row) {\n            var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n            var page = Math.floor(rowIdx / this.parent.pageSettings.pageSize) + 1;\n            gObj.pageSettings.currentPage = page;\n            var cols = gObj.getColumns();\n            remove(gObj.getContent().querySelector('tbody'));\n            gObj.getContent().querySelector('table').appendChild(gObj.createElement('tbody'));\n            var focusRows = [];\n            for (var i = (page === 1 || this.maxPage === page) ? 0 : -1, k = 0; k < gObj.infiniteScrollSettings.maxBlocks; this.maxPage === page ? i-- : i++, k++) {\n                var rows = this.infiniteCache[page + i];\n                if (rows) {\n                    focusRows = focusRows.concat(rows);\n                    for (var j = 0; j < rows.length; j++) {\n                        gObj.getContent().querySelector('tbody').appendChild(rowRenderer.render(rows[j], cols));\n                    }\n                }\n            }\n            gObj.notify(events.contentReady, { rows: focusRows, args: {} });\n            setRowElements(gObj);\n        }\n        row = gObj.getRowByIndex(rowIdx);\n        var target = row.cells[cellIdx];\n        gObj.focusModule.isInfiniteScroll = true;\n        gObj.focusModule.onClick({ target: target }, true);\n        gObj.selectRow(rowIdx);\n        target.focus();\n        this.isFocusScroll = false;\n        e.cancel = true;\n    };\n    InfiniteScroll.prototype.setLastCellFocusInfo = function (e) {\n        var cell = ((e.byClick && e.clickArgs.target) || (e.byKey && e.keyArgs.target)\n            || (!this.isFocusScroll && e).target);\n        if (cell && cell.classList.contains('e-rowcell')) {\n            var cellIdx = parseInt(cell.getAttribute('aria-colindex'), 10);\n            var rowIdx = parseInt(cell.parentElement.getAttribute('aria-rowindex'));\n            this.lastFocusInfo = { rowIdx: rowIdx, cellIdx: cellIdx };\n        }\n    };\n    InfiniteScroll.prototype.infiniteCellFocus = function (e) {\n        var gObj = this.parent;\n        var cache = gObj.infiniteScrollSettings.enableCache;\n        if (e.byKey) {\n            if (cache && this.isFocusScroll) {\n                this.scrollToLastFocusedCell(e);\n                return;\n            }\n            var cell = document.activeElement;\n            var rowIndex = getRowIndexFromElement(cell.parentElement);\n            this.cellIndex = parseInt(cell.getAttribute(literals.ariaColIndex), 10);\n            var content = gObj.getContent().firstElementChild;\n            var totalRowsCount = (this.maxPage * gObj.pageSettings.pageSize) - 1;\n            var visibleRowCount = Math.floor(content.offsetHeight / this.parent.getRowHeight());\n            var contentRect = content.getBoundingClientRect();\n            if (!isNaN(rowIndex)) {\n                if (e.keyArgs.action === literals.downArrow || e.keyArgs.action === literals.enter) {\n                    this.rowIndex = rowIndex += 1;\n                    var row = gObj.getRowByIndex(rowIndex);\n                    var rowRect = row && row.getBoundingClientRect();\n                    if (cache) {\n                        rowIndex = cell.parentElement.rowIndex + 1;\n                    }\n                    if (this.isFocusScroll || (!row && rowIndex < totalRowsCount)\n                        || (rowRect && rowRect.bottom >= contentRect.bottom)) {\n                        if (!this.isFocusScroll) {\n                            this.pressedKey = e.keyArgs.action;\n                        }\n                        this.isFocusScroll = false;\n                        content.scrollTop = ((rowIndex - visibleRowCount) + 1) * this.parent.getRowHeight();\n                    }\n                    else if (!cache && row) {\n                        if (rowRect && (rowRect.bottom >= contentRect.bottom || rowRect.top < contentRect.top)) {\n                            row.cells[this.cellIndex].scrollIntoView();\n                        }\n                    }\n                }\n                else if (e.keyArgs.action === literals.upArrow || e.keyArgs.action === literals.shiftEnter) {\n                    this.rowIndex = rowIndex -= 1;\n                    var row = gObj.getRowByIndex(rowIndex);\n                    var rowRect = row && row.getBoundingClientRect();\n                    if (cache) {\n                        rowIndex = cell.parentElement.rowIndex - 1;\n                    }\n                    if (!row || rowRect.top <= contentRect.top) {\n                        this.pressedKey = e.keyArgs.action;\n                        content.scrollTop = rowIndex * this.parent.getRowHeight();\n                    }\n                }\n            }\n        }\n        else if (e.key === 'PageDown' || e.key === 'PageUp') {\n            this.pressedKey = e.key;\n        }\n        this.setLastCellFocusInfo(e);\n    };\n    InfiniteScroll.prototype.createEmptyRowdata = function () {\n        var _this = this;\n        this.parent.getColumns().filter(function (e) {\n            _this.emptyRowData[e.field] = _this.empty;\n        });\n    };\n    InfiniteScroll.prototype.getVirtualInfiniteEditedData = function () {\n        var editForm = this.parent.element.querySelector('.' + literals.editedRow);\n        var addForm = this.parent.element.querySelector('.' + literals.addedRow);\n        var gridForm = this.parent.element.querySelector('.e-gridform');\n        if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {\n            var rowData = editForm ? extend({}, this.getEditedRowObject().data)\n                : extend({}, this.emptyRowData);\n            this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);\n            if (this.parent.isFrozenGrid()) {\n                this.virtualInfiniteData = this.parent.editModule\n                    .getCurrentEditedData(this.parent.getMovableVirtualContent().querySelector('.e-gridform'), rowData);\n            }\n        }\n    };\n    InfiniteScroll.prototype.restoreInfiniteEdit = function () {\n        var content = this.parent.getContent().firstElementChild;\n        var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;\n        if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {\n            if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {\n                var row = this.parent.getRowByIndex(this.editRowIndex);\n                if (Object.keys(this.virtualInfiniteData).length && row && !this.parent.getContent().querySelector('.' + literals.editedRow)) {\n                    var top_1 = row.getBoundingClientRect().top;\n                    if (top_1 < content.offsetHeight && top_1 > this.parent.getRowHeight()) {\n                        this.parent.isEdit = false;\n                        this.parent.editModule.startEdit(row);\n                    }\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.restoreInfiniteAdd = function () {\n        var content = this.parent.getContent().firstElementChild;\n        if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit &&\n            this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content.querySelector('.' + literals.addedRow)) {\n            var isTop = content.scrollTop < this.parent.getRowHeight();\n            if (isTop) {\n                this.parent.isEdit = false;\n                this.parent.addRecord();\n            }\n        }\n    };\n    InfiniteScroll.prototype.appendInfiniteRows = function (e) {\n        var frozenCols = this.parent.isFrozenGrid();\n        var scrollEle = this.parent.getContent().firstElementChild;\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n        var isMovable = this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable';\n        if ((isInfiniteScroll && !e.args.isFrozen && !isMovable) || !isInfiniteScroll) {\n            if (isInfiniteScroll && e.args.direction === 'up') {\n                e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);\n            }\n            else {\n                e.tbody.appendChild(e.frag);\n            }\n        }\n        if (!frozenCols) {\n            this.parent.contentModule.getTable().appendChild(e.tbody);\n            this.updateCurrentViewData();\n        }\n        else {\n            if (isInfiniteScroll) {\n                if (e.tableName === literals.frozenLeft || (this.parent.getFrozenMode() === 'Right' && e.tableName === literals.frozenRight)) {\n                    this.frozenFrag = e.frag;\n                }\n                else if (this.parent.getFrozenMode() === literals.leftRight && e.tableName === 'movable') {\n                    this.movableFrag = e.frag;\n                }\n                else {\n                    var tbody = this.parent.getFrozenVirtualContent().querySelector(literals.tbody);\n                    if (e.args.direction === 'up') {\n                        tbody.insertBefore(this.frozenFrag, tbody.firstElementChild);\n                    }\n                    else {\n                        tbody.appendChild(this.frozenFrag);\n                    }\n                    if (e.tableName === literals.frozenRight) {\n                        this.parent.getMovableVirtualContent().querySelector(literals.tbody).appendChild(this.movableFrag);\n                        this.parent.element.querySelector('.e-frozen-right-content').querySelector(literals.tbody).appendChild(e.frag);\n                    }\n                    else {\n                        this.parent.getMovableVirtualContent().querySelector('.' + literals.table).appendChild(e.tbody);\n                    }\n                    this.parent.contentModule.refreshScrollOffset();\n                    this.updateCurrentViewData();\n                }\n            }\n            else {\n                var table = void 0;\n                if (e.tableName === literals.frozenLeft) {\n                    table = this.parent.getFrozenVirtualContent().querySelector('.' + literals.table);\n                }\n                else if (e.tableName === 'movable') {\n                    table = this.parent.getMovableVirtualContent().querySelector('.' + literals.table);\n                    if (this.parent.getFrozenMode() !== literals.leftRight) {\n                        this.parent.contentModule.refreshScrollOffset();\n                        this.updateCurrentViewData();\n                    }\n                }\n                else {\n                    table = this.parent.element.querySelector('.e-frozen-right-content').querySelector('.' + literals.table);\n                    if (this.parent.getFrozenMode() === literals.leftRight) {\n                        this.parent.contentModule.refreshScrollOffset();\n                        this.updateCurrentViewData();\n                    }\n                }\n                table.appendChild(e.tbody);\n                this.widthService.refreshFrozenScrollbar();\n            }\n        }\n        if (this.isInitialRender && !e.args.isFrozen) {\n            this.isInitialRender = false;\n            this.parent.scrollModule.setHeight();\n        }\n        if (!e.args.isFrozen) {\n            this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;\n            if (isInfiniteScroll) {\n                if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n                    scrollEle.scrollTop = this.top;\n                }\n                setRowElements(this.parent);\n            }\n            this.restoreInfiniteAdd();\n            this.isScroll = true;\n        }\n        this.isInfiniteScroll = false;\n    };\n    InfiniteScroll.prototype.selectNewRow = function (args) {\n        var _this = this;\n        var gObj = this.parent;\n        var row = gObj.getRowByIndex(this.rowIndex);\n        var cache = gObj.infiniteScrollSettings.enableCache;\n        if (row && this.keys.some(function (value) { return value === _this.pressedKey; })) {\n            var content = gObj.getContent().firstElementChild;\n            var rowHeight = gObj.getRowHeight();\n            var target = row.cells[this.cellIndex];\n            if ((this.pressedKey === literals.downArrow || this.pressedKey === literals.enter)\n                || (cache && (this.pressedKey === literals.upArrow || this.pressedKey === literals.shiftEnter))) {\n                if (!cache && this.pressedKey !== literals.upArrow && this.pressedKey !== literals.shiftEnter) {\n                    content.scrollTop = content.scrollTop + rowHeight;\n                }\n                gObj.focusModule.isInfiniteScroll = true;\n                gObj.focusModule.onClick({ target: target }, true);\n                gObj.selectRow(this.rowIndex);\n            }\n        }\n        else if (this.lastFocusInfo || this.pressedKey === literals.pageDown || this.pressedKey === literals.pageUp) {\n            var idx = cache ? 0 : this.lastFocusInfo.rowIdx;\n            if (gObj.getRowByIndex(idx)) {\n                var target = gObj.getCellFromIndex(idx, this.lastFocusInfo.cellIdx);\n                if (target) {\n                    this.isFocusScroll = true;\n                    if (!cache) {\n                        gObj.focusModule.isInfiniteScroll = true;\n                        gObj.focusModule.onClick({ target: target }, true);\n                    }\n                    else {\n                        target.focus({ preventScroll: true });\n                    }\n                }\n            }\n        }\n        this.pressedKey = undefined;\n    };\n    InfiniteScroll.prototype.removeInfiniteCacheRows = function (e) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n        if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n            var rows = [].slice.call(this.parent.getContentTable().getElementsByClassName(literals.row));\n            if (e.args.direction === 'down') {\n                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                    var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n                    this.removeCaptionRows(captionRows, e.args);\n                }\n                var addRowCount = this.parent.element.querySelector('.' + literals.addedRow) ? 0 : 1;\n                this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);\n            }\n            if (e.args.direction === 'up') {\n                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                    var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n                    this.removeCaptionRows(captionRows, e.args);\n                }\n                else {\n                    this.removeBottomRows(rows, rows.length - 1, e.args);\n                }\n            }\n            this.isScroll = false;\n            this.top = this.calculateScrollTop(e.args);\n        }\n    };\n    InfiniteScroll.prototype.calculateScrollTop = function (args) {\n        var top = 0;\n        var scrollCnt = this.parent.getContent().firstElementChild;\n        if (args.direction === 'down') {\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n                top = this.captionRowHeight();\n            }\n            var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));\n            var captionCount = 0;\n            if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {\n                captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);\n            }\n            var value = captionCount ? captionCount\n                : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);\n            var currentViewRowCount = 0;\n            var i = 0;\n            while (currentViewRowCount < scrollCnt.clientHeight) {\n                i++;\n                currentViewRowCount = i * this.parent.getRowHeight();\n            }\n            i = i - 1;\n            top += (value - i) * this.parent.getRowHeight();\n        }\n        if (args.direction === 'up') {\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n                top = this.infiniteCache[this.parent.pageSettings.currentPage].length * this.parent.getRowHeight();\n            }\n            else if (this.isInitialCollapse) {\n                var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];\n                var count = 0;\n                for (var i = 0; i < groupedData.length; i++) {\n                    if (groupedData[i].isCaptionRow) {\n                        count++;\n                    }\n                }\n                top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();\n            }\n            else {\n                top += (this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth());\n            }\n        }\n        return top;\n    };\n    InfiniteScroll.prototype.captionRowHeight = function () {\n        var rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));\n        return rows.length * this.parent.getRowHeight();\n    };\n    InfiniteScroll.prototype.removeTopRows = function (rows, maxIndx) {\n        var frozeCols = this.parent.isFrozenGrid();\n        var frRows = this.parent.getFrozenMode() === literals.leftRight\n            ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n        var movableRows = frozeCols ?\n            [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n        for (var i = 0; i <= maxIndx; i++) {\n            if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1\n                && i > (maxIndx - this.parent.frozenRows)) {\n                continue;\n            }\n            remove(rows[i]);\n            if (movableRows) {\n                remove(movableRows[i]);\n            }\n            if (frRows) {\n                remove(frRows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.removeBottomRows = function (rows, maxIndx, args) {\n        var cnt = 0;\n        var frozeCols = this.parent.isFrozenGrid();\n        var movableRows = frozeCols ?\n            [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(literals.row)) : null;\n        var frRows = this.parent.getFrozenMode() === literals.leftRight ?\n            [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(literals.row)) : null;\n        var pageSize = this.parent.pageSettings.pageSize;\n        if (!frozeCols && this.infiniteCache[args.prevPage].length < pageSize) {\n            cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;\n        }\n        if (frozeCols && this.infiniteFrozenCache[args.prevPage][1].length < pageSize) {\n            cnt = this.parent.pageSettings.pageSize - this.infiniteFrozenCache[args.prevPage][1].length;\n        }\n        for (var i = maxIndx; cnt < pageSize; i--) {\n            cnt++;\n            remove(rows[i]);\n            if (movableRows) {\n                remove(movableRows[i]);\n            }\n            if (frRows) {\n                remove(frRows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.removeCaptionRows = function (rows, args) {\n        var rowElements = [].slice.call(this.parent.getContent().getElementsByClassName(literals.row));\n        if (args.direction === 'down') {\n            var lastRow = rowElements[this.parent.pageSettings.pageSize - 1];\n            var lastRowIndex = getRowIndexFromElement(lastRow) - 1;\n            var k = 0;\n            for (var i = 0; k < lastRowIndex; i++) {\n                if (!rows[i].classList.contains(literals.row)) {\n                    remove(rows[i]);\n                }\n                else {\n                    k = getRowIndexFromElement(rows[i]);\n                }\n            }\n        }\n        if (args.direction === 'up') {\n            var lastIndex = getRowIndexFromElement(rowElements[rowElements.length - 1]);\n            var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);\n            var startIndex = 0;\n            for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {\n                startIndex += this.infiniteCache[i].length;\n            }\n            for (var i = startIndex; i < rows.length; i++) {\n                remove(rows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetInfiniteBlocks = function (args, isDataModified) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';\n        if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {\n            if (this.actions.some(function (value) { return value === args.requestType; }) || isDataModified) {\n                var scrollEle = this.parent.getContent().firstElementChild;\n                this.initialRender = true;\n                scrollEle.scrollTop = 0;\n                this.parent.pageSettings.currentPage = 1;\n                this.infiniteCache = this.infiniteFrozenCache = {};\n                this.infiniteCurrentViewData = {};\n                this.resetContentModuleCache({});\n                this.isRemove = false;\n                this.top = 0;\n                this.isInitialMovableRender = true;\n                this.isInitialCollapse = false;\n                this.parent.contentModule.isRemove = this.isRemove;\n                this.parent.contentModule.isAddRows = this.isRemove;\n                this.parent.contentModule.visibleRows = [];\n                this.parent.contentModule.visibleFrozenRows = [];\n            }\n        }\n    };\n    InfiniteScroll.prototype.setCache = function (e) {\n        if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n            var frozeCols = this.parent.isFrozenGrid();\n            var idx = e.args.isFrozen ? 1 : 0;\n            var isEdit = e.args.requestType !== 'infiniteScroll'\n                && (this.requestType === 'delete' || this.requestType === 'add');\n            var currentPage = this.parent.pageSettings.currentPage;\n            if ((frozeCols && this.isInitialMovableRender) || (!frozeCols && !Object.keys(this.infiniteCache).length) || isEdit) {\n                this.isInitialMovableRender = !e.args.isFrozen;\n                this.setInitialCache(e.modelData, e.args, isEdit);\n            }\n            if (!frozeCols && isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n                this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;\n                this.resetContentModuleCache(this.infiniteCache);\n            }\n            if (frozeCols) {\n                if ((idx === 0 && isNullOrUndefined(this.infiniteFrozenCache[currentPage]))\n                    || !this.infiniteFrozenCache[currentPage][idx].length) {\n                    this.createFrozenCache(currentPage);\n                    this.infiniteFrozenCache[currentPage][idx] = e.modelData;\n                    if (idx === 1) {\n                        this.resetContentModuleCache(this.infiniteFrozenCache);\n                    }\n                }\n            }\n            if (e.isInfiniteScroll && !this.isRemove) {\n                this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;\n                this.parent.contentModule.isRemove = this.isRemove;\n            }\n        }\n    };\n    InfiniteScroll.prototype.setInitialCache = function (data, args, isEdit, isCurrentViewData) {\n        var frozenCols = this.parent.isFrozenGrid();\n        var idx = args.isFrozen ? 1 : 0;\n        var k = !isEdit ? 1 : this.firstBlock;\n        for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {\n            var startIndex = (i - 1) * this.parent.pageSettings.pageSize;\n            var endIndex = i * this.parent.pageSettings.pageSize;\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {\n                this.setInitialGroupCache(data, k, startIndex, endIndex);\n            }\n            else {\n                if (isCurrentViewData) {\n                    this.infiniteCurrentViewData[k] = data.slice(startIndex, endIndex);\n                }\n                else {\n                    if (frozenCols) {\n                        this.createFrozenCache(k);\n                        this.infiniteFrozenCache[k][idx] = data.slice(startIndex, endIndex);\n                        this.resetContentModuleCache(this.infiniteFrozenCache);\n                    }\n                    else {\n                        this.infiniteCache[k] = data.slice(startIndex, endIndex);\n                        this.resetContentModuleCache(this.infiniteCache);\n                    }\n                }\n            }\n            k++;\n        }\n    };\n    InfiniteScroll.prototype.createFrozenCache = function (index) {\n        if (!this.infiniteFrozenCache[index]) {\n            this.infiniteFrozenCache[index] = [[], []];\n        }\n    };\n    InfiniteScroll.prototype.setInitialGroupCache = function (data, index, sIndex, eIndex) {\n        var pageData = [];\n        var startIndex = 0;\n        for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {\n            startIndex += this.infiniteCache[i].length;\n        }\n        var k = sIndex;\n        for (var i = startIndex; i < data.length && k < eIndex; i++) {\n            if (data[i].index < eIndex || data[i].isCaptionRow) {\n                k = data[i].isCaptionRow ? k : data[i].index;\n                pageData.push(data[i]);\n            }\n            if (data[i].index >= eIndex || data[i].index === eIndex - 1) {\n                break;\n            }\n        }\n        this.infiniteCache[index] = pageData;\n        this.resetContentModuleCache(this.infiniteCache);\n    };\n    InfiniteScroll.prototype.resetContentModuleCache = function (data) {\n        this.parent.contentModule\n            .infiniteCache = data;\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return InfiniteScroll;\n}());\nexport { InfiniteScroll };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}