{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-inferrable-types */\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable jsdoc/require-returns */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable jsdoc/require-param */\nimport { Series, Points } from '../series/chart-series';\nimport { findClipRect, RectOption } from '../../common/utils/helper';\n/**\n * `Trendline` module is used to render 6 types of trendlines in chart.\n */\n\nvar Trendlines =\n/** @class */\nfunction () {\n  function Trendlines() {}\n  /**\n   * Defines the collection of series, that are used to represent a trendline\n   *\n   * @private\n   */\n\n\n  Trendlines.prototype.initSeriesCollection = function (trendline, chart) {\n    var trendLineSeries = new Series(trendline, 'targetSeries', {}, true);\n\n    if (trendline.type === 'Linear' || trendline.type === 'MovingAverage') {\n      trendLineSeries.type = 'Line';\n    } else {\n      trendLineSeries.type = 'Spline';\n    }\n\n    this.setSeriesProperties(trendLineSeries, trendline, trendline.type, trendline.fill, trendline.width, chart);\n  };\n  /**\n   * Initializes the properties of the trendline series\n   */\n\n\n  Trendlines.prototype.setSeriesProperties = function (series, trendline, name, fill, width, chart) {\n    series.name = trendline.name;\n    series.xName = 'x';\n    series.yName = 'y';\n    series.fill = fill || 'blue';\n    series.width = width;\n    series.dashArray = trendline.dashArray;\n    series.clipRectElement = trendline.clipRectElement;\n    series.points = [];\n    series.enableTooltip = trendline.enableTooltip;\n    series.index = trendline.index;\n    series.sourceIndex = trendline.sourceIndex;\n    series.interior = series.fill;\n    series.animation = trendline.animation;\n    series.legendShape = 'HorizontalLine';\n    series.marker = trendline.marker;\n    series.category = 'TrendLine';\n    series.chart = chart;\n    series.xMin = Infinity;\n    series.xMax = -Infinity;\n    series.yMin = Infinity;\n    series.yMax = -Infinity;\n    series.xData = [];\n    series.yData = [];\n    trendline.targetSeries = series;\n\n    if (chart.isBlazor) {\n      trendline.targetSeries.border = {}; // To avoid console error in blazor\n\n      trendline.targetSeries.connector = {}; // To avoid console error in blazor\n    }\n  };\n  /**\n   * Creates the elements of a trendline\n   */\n\n\n  Trendlines.prototype.createTrendLineElements = function (chart, trendline, index, element, clipRectElement) {\n    trendline.trendLineElement = element;\n    trendline.targetSeries.clipRectElement = clipRectElement;\n    trendline.targetSeries.seriesElement = element;\n\n    if (chart.trendLineElements) {\n      chart.trendLineElements.appendChild(trendline.trendLineElement);\n    }\n  };\n  /**\n   * Defines the data point of trendline\n   */\n\n\n  Trendlines.prototype.getDataPoint = function (x, y, series, index) {\n    var trendPoint = new Points();\n    trendPoint.x = series.xAxis.valueType === 'DateTime' ? new Date(Number(x)) : x;\n    trendPoint.y = y;\n    trendPoint.xValue = Number(x);\n    trendPoint.color = series.fill;\n    trendPoint.index = index;\n    trendPoint.yValue = Number(y);\n    trendPoint.visible = true;\n    series.xMin = Math.min(series.xMin, trendPoint.xValue);\n    series.yMin = Math.min(series.yMin, trendPoint.yValue);\n    series.xMax = Math.max(series.xMax, trendPoint.xValue);\n    series.yMax = Math.max(series.yMax, trendPoint.yValue);\n    series.xData.push(trendPoint.xValue);\n    return trendPoint;\n  };\n  /**\n   * Finds the slope and intercept of trendline\n   */\n\n\n  Trendlines.prototype.findSlopeIntercept = function (xValues, yValues, trendline, points) {\n    var xAvg = 0;\n    var yAvg = 0;\n    var xyAvg = 0;\n    var xxAvg = 0;\n    var index = 0;\n    var slope = 0;\n    var intercept = 0;\n\n    while (index < points.length) {\n      // To fix trendline not rendered issue while Nan Value is provided for y values.\n      if (isNaN(yValues[index])) {\n        yValues[index] = (yValues[index - 1] + yValues[index + 1]) / 2;\n      }\n\n      xAvg += xValues[index];\n      yAvg += yValues[index];\n      xyAvg += xValues[index] * yValues[index];\n      xxAvg += xValues[index] * xValues[index];\n      index++;\n    }\n\n    var type = trendline.type;\n\n    if (trendline.intercept && (type === 'Linear' || type === 'Exponential')) {\n      intercept = trendline.intercept;\n\n      switch (type) {\n        case 'Linear':\n          slope = (xyAvg - trendline.intercept * xAvg) / xxAvg;\n          break;\n\n        case 'Exponential':\n          slope = (xyAvg - Math.log(Math.abs(trendline.intercept)) * xAvg) / xxAvg;\n          break;\n      }\n    } else {\n      slope = (points.length * xyAvg - xAvg * yAvg) / (points.length * xxAvg - xAvg * xAvg);\n      slope = type === 'Linear' ? slope : Math.abs(slope);\n\n      if (type === 'Exponential' || type === 'Power') {\n        intercept = Math.exp((yAvg - slope * xAvg) / points.length);\n      } else {\n        intercept = (yAvg - slope * xAvg) / points.length;\n      }\n    }\n\n    return {\n      slope: slope,\n      intercept: intercept\n    };\n  };\n  /**\n   * Defines the points to draw the trendlines\n   */\n\n\n  Trendlines.prototype.initDataSource = function (trendline) {\n    var points = trendline.points;\n\n    if (points && points.length) {\n      //prepare data\n      var trendlineSeries = trendline.targetSeries;\n\n      switch (trendline.type) {\n        case 'Linear':\n          this.setLinearRange(points, trendline, trendlineSeries);\n          break;\n\n        case 'Exponential':\n          this.setExponentialRange(points, trendline, trendlineSeries);\n          break;\n\n        case 'MovingAverage':\n          this.setMovingAverageRange(points, trendline, trendlineSeries);\n          break;\n\n        case 'Polynomial':\n          this.setPolynomialRange(points, trendline, trendlineSeries);\n          break;\n\n        case 'Power':\n          this.setPowerRange(points, trendline, trendlineSeries);\n          break;\n\n        case 'Logarithmic':\n          this.setLogarithmicRange(points, trendline, trendlineSeries);\n          break;\n      }\n\n      if (trendline.type !== 'Linear' && trendline.type !== 'MovingAverage') {\n        trendlineSeries.chart.splineSeriesModule.findSplinePoint(trendlineSeries);\n      }\n    }\n  };\n  /**\n   * Calculation of exponential points\n   */\n\n\n  Trendlines.prototype.setExponentialRange = function (points, trendline, series) {\n    var xValue = [];\n    var yValue = [];\n    var index = 0;\n\n    while (index < points.length) {\n      var point = points[index];\n      var yDataValue = point.yValue ? Math.log(point.yValue) : 0;\n      xValue.push(point.xValue);\n      yValue.push(yDataValue);\n      index++;\n    }\n\n    var slopeIntercept = this.findSlopeIntercept(xValue, yValue, trendline, points);\n    series.points = this.getExponentialPoints(trendline, points, xValue, yValue, series, slopeIntercept);\n  };\n  /**\n   * Calculation of logarithmic points\n   */\n\n\n  Trendlines.prototype.setLogarithmicRange = function (points, trendline, series) {\n    var xLogValue = [];\n    var yLogValue = [];\n    var xPointsLgr = [];\n    var index = 0;\n\n    while (index < points.length) {\n      var point = points[index];\n      var xDataValue = point.xValue ? Math.log(point.xValue) : 0;\n      xPointsLgr.push(point.xValue);\n      xLogValue.push(xDataValue);\n      yLogValue.push(point.yValue);\n      index++;\n    }\n\n    var slopeIntercept = this.findSlopeIntercept(xLogValue, yLogValue, trendline, points);\n    series.points = this.getLogarithmicPoints(trendline, points, xPointsLgr, yLogValue, series, slopeIntercept);\n  };\n  /**\n   * Calculation of polynomial points\n   */\n\n\n  Trendlines.prototype.setPolynomialRange = function (points, trendline, series) {\n    var xPolyValues = [];\n    var yPolyValues = [];\n    var index = 0;\n\n    while (index < points.length) {\n      var point = points[index];\n      xPolyValues.push(point.xValue);\n      yPolyValues.push(point.yValue);\n      index++;\n    }\n\n    series.points = this.getPolynomialPoints(trendline, points, xPolyValues, yPolyValues, series);\n  };\n  /**\n   * Calculation of power points\n   */\n\n\n  Trendlines.prototype.setPowerRange = function (points, trendline, series) {\n    var xValues = [];\n    var yValues = [];\n    var powerPoints = [];\n    var index = 0;\n\n    while (index < points.length) {\n      var point = points[index];\n      var xDataValue = point.xValue ? Math.log(point.xValue) : 0;\n      var yDataValue = point.yValue ? Math.log(point.yValue) : 0;\n      powerPoints.push(point.xValue);\n      xValues.push(xDataValue);\n      yValues.push(yDataValue);\n      index++;\n    }\n\n    var slopeIntercept = this.findSlopeIntercept(xValues, yValues, trendline, points);\n    series.points = this.getPowerPoints(trendline, points, powerPoints, yValues, series, slopeIntercept);\n  };\n  /**\n   * Calculation of linear points\n   */\n\n\n  Trendlines.prototype.setLinearRange = function (points, trendline, series) {\n    var xValues = [];\n    var yValues = [];\n    var index = 0;\n\n    while (index < points.length) {\n      var point = points[index];\n      xValues.push(point.xValue);\n      yValues.push(point.yValue);\n      index++;\n    }\n\n    var slopeIntercept = this.findSlopeIntercept(xValues, yValues, trendline, points);\n    series.points = this.getLinearPoints(trendline, points, xValues, yValues, series, slopeIntercept);\n  };\n  /**\n   * Calculation of moving average points\n   */\n\n\n  Trendlines.prototype.setMovingAverageRange = function (points, trendline, series) {\n    var xValues = [];\n    var yValues = [];\n    var xAvgValues = [];\n    var index = 0;\n\n    while (index < points.length) {\n      var point = points[index];\n      xAvgValues.push(point.xValue);\n      xValues.push(index + 1);\n      yValues.push(point.yValue);\n      index++;\n    }\n\n    series.points = this.getMovingAveragePoints(trendline, points, xAvgValues, yValues, series);\n  };\n  /**\n   * Calculation of logarithmic points\n   */\n\n\n  Trendlines.prototype.getLogarithmicPoints = function (trendline, points, xValues, yValues, series, slopeInterceptLog) {\n    var midPoint = Math.round(points.length / 2);\n    var pts = [];\n    var x1Log = xValues[0] - trendline.backwardForecast;\n    var x1 = x1Log ? Math.log(x1Log) : 0;\n    var y1Log = slopeInterceptLog.intercept + slopeInterceptLog.slope * x1;\n    var x2Log = xValues[midPoint - 1];\n    var x2 = x2Log ? Math.log(x2Log) : 0;\n    var y2Log = slopeInterceptLog.intercept + slopeInterceptLog.slope * x2;\n    var x3Log = xValues[xValues.length - 1] + trendline.forwardForecast;\n    var x3 = x3Log ? Math.log(x3Log) : 0;\n    var y3Log = slopeInterceptLog.intercept + slopeInterceptLog.slope * x3;\n    pts.push(this.getDataPoint(x1Log, y1Log, series, pts.length));\n    pts.push(this.getDataPoint(x2Log, y2Log, series, pts.length));\n    pts.push(this.getDataPoint(x3Log, y3Log, series, pts.length));\n    return pts;\n  };\n  /**\n   * Defines the points based on data point\n   */\n\n\n  Trendlines.prototype.getPowerPoints = function (trendline, points, xValues, yValues, series, slopeInterceptPower) {\n    var midPoint = Math.round(points.length / 2);\n    var pts = [];\n    var x1 = xValues[0] - trendline.backwardForecast;\n    x1 = x1 > -1 ? x1 : 0;\n    var y1 = slopeInterceptPower.intercept * Math.pow(x1, slopeInterceptPower.slope);\n    var x2 = xValues[midPoint - 1];\n    var y2 = slopeInterceptPower.intercept * Math.pow(x2, slopeInterceptPower.slope);\n    var x3 = xValues[xValues.length - 1] + trendline.forwardForecast;\n    var y3 = slopeInterceptPower.intercept * Math.pow(x3, slopeInterceptPower.slope);\n    pts.push(this.getDataPoint(x1, y1, series, pts.length));\n    pts.push(this.getDataPoint(x2, y2, series, pts.length));\n    pts.push(this.getDataPoint(x3, y3, series, pts.length));\n    return pts;\n  };\n  /**\n   * Get the polynomial points based on polynomial slopes\n   */\n\n\n  Trendlines.prototype.getPolynomialPoints = function (trendline, points, xValues, yValues, series) {\n    var pts = [];\n    var polynomialOrder = points.length <= trendline.polynomialOrder ? points.length : trendline.polynomialOrder;\n    polynomialOrder = Math.max(2, polynomialOrder);\n    polynomialOrder = Math.min(6, polynomialOrder);\n    trendline.polynomialOrder = polynomialOrder;\n    trendline.polynomialSlopes = [];\n    trendline.polynomialSlopes.length = trendline.polynomialOrder + 1;\n    var index = 0;\n\n    while (index < xValues.length) {\n      var xVal = xValues[index];\n      var yVal = yValues[index];\n      var subIndex = 0;\n\n      while (subIndex <= trendline.polynomialOrder) {\n        if (!trendline.polynomialSlopes[subIndex]) {\n          trendline.polynomialSlopes[subIndex] = 0;\n        }\n\n        trendline.polynomialSlopes[subIndex] += Math.pow(xVal, subIndex) * yVal;\n        ++subIndex;\n      }\n\n      index++;\n    }\n\n    var numArray = [];\n    numArray.length = 1 + 2 * trendline.polynomialOrder;\n    var matrix = [];\n    matrix.length = trendline.polynomialOrder + 1;\n    var newIndex = 0;\n\n    while (newIndex < trendline.polynomialOrder + 1) {\n      matrix[newIndex] = [];\n      matrix[newIndex].length = 3;\n      newIndex++;\n    }\n\n    var nIndex = 0;\n\n    while (nIndex < xValues.length) {\n      var d = xValues[nIndex];\n      var num2 = 1.0;\n      var nIndex2 = 0;\n\n      while (nIndex2 < numArray.length) {\n        if (!numArray[nIndex2]) {\n          numArray[nIndex2] = 0;\n        }\n\n        numArray[nIndex2] += num2;\n        num2 *= d;\n        ++nIndex2;\n      }\n\n      ++nIndex;\n    }\n\n    var nnIndex = 0;\n\n    while (nnIndex <= trendline.polynomialOrder) {\n      var nnIndex2 = 0;\n\n      while (nnIndex2 <= trendline.polynomialOrder) {\n        matrix[nnIndex][nnIndex2] = numArray[nnIndex + nnIndex2];\n        ++nnIndex2;\n      }\n\n      ++nnIndex;\n    }\n\n    if (!this.gaussJordanElimination(matrix, trendline.polynomialSlopes)) {\n      trendline.polynomialSlopes = null;\n    }\n\n    pts = this.getPoints(trendline, points, xValues, series);\n    return pts;\n  };\n  /**\n   * Defines the moving average points\n   */\n\n\n  Trendlines.prototype.getMovingAveragePoints = function (trendline, points, xValues, yValues, series) {\n    var pts = [];\n    var period = trendline.period >= points.length ? points.length - 1 : trendline.period;\n    period = Math.max(2, period);\n    var index = 0;\n    var y;\n    var x;\n    var count;\n    var nullCount;\n\n    while (index < points.length - 1) {\n      y = count = nullCount = 0;\n\n      for (var j = index; count < period; j++) {\n        count++;\n\n        if (!yValues[j]) {\n          nullCount++;\n        }\n\n        y += yValues[j];\n      }\n\n      y = period - nullCount <= 0 ? null : y / (period - nullCount);\n\n      if (y && !isNaN(y)) {\n        x = xValues[period - 1 + index];\n        pts.push(this.getDataPoint(x, y, series, pts.length));\n      }\n\n      index++;\n    }\n\n    return pts;\n  };\n  /**\n   * Defines the linear points\n   */\n\n\n  Trendlines.prototype.getLinearPoints = function (trendline, points, xValues, yValues, series, slopeInterceptLinear) {\n    var pts = [];\n    var max = xValues.indexOf(Math.max.apply(null, xValues));\n    var min = xValues.indexOf(Math.min.apply(null, xValues));\n    var x1Linear = xValues[min] - trendline.backwardForecast;\n    var y1Linear = slopeInterceptLinear.slope * x1Linear + slopeInterceptLinear.intercept;\n    var x2Linear = xValues[max] + trendline.forwardForecast;\n    var y2Linear = slopeInterceptLinear.slope * x2Linear + slopeInterceptLinear.intercept;\n    pts.push(this.getDataPoint(x1Linear, y1Linear, series, pts.length));\n    pts.push(this.getDataPoint(x2Linear, y2Linear, series, pts.length));\n    return pts;\n  };\n  /**\n   * Defines the exponential points\n   */\n\n\n  Trendlines.prototype.getExponentialPoints = function (trendline, points, xValues, yValues, series, slopeInterceptExp) {\n    var midPoint = Math.round(points.length / 2);\n    var ptsExp = [];\n    var x1 = xValues[0] - trendline.backwardForecast;\n    var y1 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x1);\n    var x2 = xValues[midPoint - 1];\n    var y2 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x2);\n    var x3 = xValues[xValues.length - 1] + trendline.forwardForecast;\n    var y3 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x3);\n    ptsExp.push(this.getDataPoint(x1, y1, series, ptsExp.length));\n    ptsExp.push(this.getDataPoint(x2, y2, series, ptsExp.length));\n    ptsExp.push(this.getDataPoint(x3, y3, series, ptsExp.length));\n    return ptsExp;\n  };\n  /**\n   * Defines the points based on data point\n   */\n\n\n  Trendlines.prototype.getPoints = function (trendline, points, xValues, series) {\n    var polynomialSlopes = trendline.polynomialSlopes;\n    var pts = [];\n    var x1 = 1;\n    var index = 1;\n    var xValue;\n    var yValue; // We have to sort the points in ascending order. Because, the data source of the series may be random order.\n\n    points.sort(function (a, b) {\n      return a.xValue - b.xValue;\n    });\n    xValues.sort(function (a, b) {\n      return a - b;\n    });\n\n    while (index <= polynomialSlopes.length) {\n      if (index === 1) {\n        xValue = xValues[0] - trendline.backwardForecast;\n        yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\n        pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\n      } else if (index === polynomialSlopes.length) {\n        xValue = xValues[points.length - 1] + trendline.forwardForecast;\n        yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\n        pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\n      } else {\n        x1 += (points.length + trendline.forwardForecast) / polynomialSlopes.length;\n        xValue = xValues[parseInt(x1.toString(), 10) - 1];\n        yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\n        pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\n      }\n\n      index++;\n    }\n\n    return pts;\n  };\n  /**\n   * Defines the polynomial value of y\n   */\n\n\n  Trendlines.prototype.getPolynomialYValue = function (slopes, x) {\n    var sum = 0;\n    var index = 0;\n\n    while (index < slopes.length) {\n      sum += slopes[index] * Math.pow(x, index);\n      index++;\n    }\n\n    return sum;\n  };\n  /**\n   * Defines the gauss jordan elimination\n   */\n\n\n  Trendlines.prototype.gaussJordanElimination = function (matrix, polynomialSlopes) {\n    var length = matrix.length;\n    var numArray1 = [];\n    var numArray2 = [];\n    var numArray3 = [];\n    numArray1.length = length;\n    numArray2.length = length;\n    numArray3.length = length;\n    var index = 0;\n\n    while (index < length) {\n      numArray3[index] = 0;\n      ++index;\n    }\n\n    var index1 = 0;\n\n    while (index1 < length) {\n      var num1 = 0;\n      var index2 = 0;\n      var index3 = 0;\n      var index4 = 0;\n\n      while (index4 < length) {\n        if (numArray3[index4] !== 1) {\n          var index5 = 0;\n\n          while (index5 < length) {\n            if (numArray3[index5] === 0 && Math.abs(matrix[index4][index5]) >= num1) {\n              num1 = Math.abs(matrix[index4][index5]);\n              index2 = index4;\n              index3 = index5;\n            }\n\n            ++index5;\n          }\n        }\n\n        ++index4;\n      }\n\n      ++numArray3[index3];\n\n      if (index2 !== index3) {\n        var index4_1 = 0;\n\n        while (index4_1 < length) {\n          var num2 = matrix[index2][index4_1];\n          matrix[index2][index4_1] = matrix[index3][index4_1];\n          matrix[index3][index4_1] = num2;\n          ++index4_1;\n        }\n\n        var num3 = polynomialSlopes[index2];\n        polynomialSlopes[index2] = polynomialSlopes[index3];\n        polynomialSlopes[index3] = num3;\n      }\n\n      numArray2[index1] = index2;\n      numArray1[index1] = index3;\n\n      if (matrix[index3][index3] === 0.0) {\n        return false;\n      }\n\n      var num4 = 1.0 / matrix[index3][index3];\n      matrix[index3][index3] = 1.0;\n      var iindex4 = 0;\n\n      while (iindex4 < length) {\n        matrix[index3][iindex4] *= num4;\n        ++iindex4;\n      }\n\n      polynomialSlopes[index3] *= num4;\n      var iandex4 = 0;\n\n      while (iandex4 < length) {\n        if (iandex4 !== index3) {\n          var num2 = matrix[iandex4][index3];\n          matrix[iandex4][index3] = 0.0;\n          var index5 = 0;\n\n          while (index5 < length) {\n            matrix[iandex4][index5] -= matrix[index3][index5] * num2;\n            ++index5;\n          }\n\n          polynomialSlopes[iandex4] -= polynomialSlopes[index3] * num2;\n        }\n\n        ++iandex4;\n      }\n\n      ++index1;\n    }\n\n    var iindex1 = length - 1;\n\n    while (iindex1 >= 0) {\n      if (numArray2[iindex1] !== numArray1[iindex1]) {\n        var iindex2 = 0;\n\n        while (iindex2 < length) {\n          var num = matrix[iindex2][numArray2[iindex1]];\n          matrix[iindex2][numArray2[iindex1]] = matrix[iindex2][numArray1[iindex1]];\n          matrix[iindex2][numArray1[iindex1]] = num;\n          ++iindex2;\n        }\n      }\n\n      --iindex1;\n    }\n\n    return true;\n  };\n  /**\n   * Defines the trendline elements\n   */\n\n\n  Trendlines.prototype.getTrendLineElements = function (series, chart) {\n    findClipRect(series);\n    var clipRect = series.clipRect;\n    var clipRectElement = chart.renderer.drawClipPath(new RectOption(chart.element.id + '_ChartTrendlineClipRect_' + series.index, 'transparent', {\n      width: 1,\n      color: 'Gray'\n    }, 1, {\n      x: 0,\n      y: 0,\n      width: clipRect.width,\n      height: clipRect.height\n    }));\n    var element = chart.renderer.createGroup({\n      'id': chart.element.id + 'TrendlineSeriesGroup' + series.index,\n      'transform': 'translate(' + clipRect.x + ',' + clipRect.y + ')',\n      'clip-path': 'url(#' + chart.element.id + '_ChartTrendlineClipRect_' + series.index + ')'\n    }); //defines the clip rect element\n\n    if (element) {\n      element.appendChild(clipRectElement);\n    }\n\n    for (var _i = 0, _a = series.trendlines; _i < _a.length; _i++) {\n      var trendline = _a[_i];\n      this.createTrendLineElements(chart, trendline, trendline.index, element, clipRectElement);\n    }\n  };\n  /**\n   * To destroy the trendline\n   */\n\n\n  Trendlines.prototype.destroy = function () {\n    /**\n     * Destroys the Linear Trendline\n     */\n  };\n  /**\n   * Get module name\n   */\n\n\n  Trendlines.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'TrendLine';\n  };\n\n  return Trendlines;\n}();\n\nexport { Trendlines };","map":{"version":3,"names":["Series","Points","findClipRect","RectOption","Trendlines","prototype","initSeriesCollection","trendline","chart","trendLineSeries","type","setSeriesProperties","fill","width","series","name","xName","yName","dashArray","clipRectElement","points","enableTooltip","index","sourceIndex","interior","animation","legendShape","marker","category","xMin","Infinity","xMax","yMin","yMax","xData","yData","targetSeries","isBlazor","border","connector","createTrendLineElements","element","trendLineElement","seriesElement","trendLineElements","appendChild","getDataPoint","x","y","trendPoint","xAxis","valueType","Date","Number","xValue","color","yValue","visible","Math","min","max","push","findSlopeIntercept","xValues","yValues","xAvg","yAvg","xyAvg","xxAvg","slope","intercept","length","isNaN","log","abs","exp","initDataSource","trendlineSeries","setLinearRange","setExponentialRange","setMovingAverageRange","setPolynomialRange","setPowerRange","setLogarithmicRange","splineSeriesModule","findSplinePoint","point","yDataValue","slopeIntercept","getExponentialPoints","xLogValue","yLogValue","xPointsLgr","xDataValue","getLogarithmicPoints","xPolyValues","yPolyValues","getPolynomialPoints","powerPoints","getPowerPoints","getLinearPoints","xAvgValues","getMovingAveragePoints","slopeInterceptLog","midPoint","round","pts","x1Log","backwardForecast","x1","y1Log","x2Log","x2","y2Log","x3Log","forwardForecast","x3","y3Log","slopeInterceptPower","y1","pow","y2","y3","polynomialOrder","polynomialSlopes","xVal","yVal","subIndex","numArray","matrix","newIndex","nIndex","d","num2","nIndex2","nnIndex","nnIndex2","gaussJordanElimination","getPoints","period","count","nullCount","j","slopeInterceptLinear","indexOf","apply","x1Linear","y1Linear","x2Linear","y2Linear","slopeInterceptExp","ptsExp","sort","a","b","getPolynomialYValue","parseInt","toString","slopes","sum","numArray1","numArray2","numArray3","index1","num1","index2","index3","index4","index5","index4_1","num3","num4","iindex4","iandex4","iindex1","iindex2","num","getTrendLineElements","clipRect","renderer","drawClipPath","id","height","createGroup","_i","_a","trendlines","destroy","getModuleName"],"sources":["C:/Users/shahj/OneDrive/Documents/GitHub/Admin-Dashboard/frontend/node_modules/@syncfusion/ej2-charts/src/chart/trend-lines/trend-line.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-param */\nimport { Series, Points } from '../series/chart-series';\nimport { findClipRect, RectOption } from '../../common/utils/helper';\n/**\n * `Trendline` module is used to render 6 types of trendlines in chart.\n */\nvar Trendlines = /** @class */ (function () {\n    function Trendlines() {\n    }\n    /**\n     * Defines the collection of series, that are used to represent a trendline\n     *\n     * @private\n     */\n    Trendlines.prototype.initSeriesCollection = function (trendline, chart) {\n        var trendLineSeries = new Series(trendline, 'targetSeries', {}, true);\n        if (trendline.type === 'Linear' || trendline.type === 'MovingAverage') {\n            trendLineSeries.type = 'Line';\n        }\n        else {\n            trendLineSeries.type = 'Spline';\n        }\n        this.setSeriesProperties(trendLineSeries, trendline, trendline.type, trendline.fill, trendline.width, chart);\n    };\n    /**\n     * Initializes the properties of the trendline series\n     */\n    Trendlines.prototype.setSeriesProperties = function (series, trendline, name, fill, width, chart) {\n        series.name = trendline.name;\n        series.xName = 'x';\n        series.yName = 'y';\n        series.fill = fill || 'blue';\n        series.width = width;\n        series.dashArray = trendline.dashArray;\n        series.clipRectElement = trendline.clipRectElement;\n        series.points = [];\n        series.enableTooltip = trendline.enableTooltip;\n        series.index = trendline.index;\n        series.sourceIndex = trendline.sourceIndex;\n        series.interior = series.fill;\n        series.animation = trendline.animation;\n        series.legendShape = 'HorizontalLine';\n        series.marker = trendline.marker;\n        series.category = 'TrendLine';\n        series.chart = chart;\n        series.xMin = Infinity;\n        series.xMax = -Infinity;\n        series.yMin = Infinity;\n        series.yMax = -Infinity;\n        series.xData = [];\n        series.yData = [];\n        trendline.targetSeries = series;\n        if (chart.isBlazor) {\n            trendline.targetSeries.border = {}; // To avoid console error in blazor\n            trendline.targetSeries.connector = {}; // To avoid console error in blazor\n        }\n    };\n    /**\n     * Creates the elements of a trendline\n     */\n    Trendlines.prototype.createTrendLineElements = function (chart, trendline, index, element, clipRectElement) {\n        trendline.trendLineElement = element;\n        trendline.targetSeries.clipRectElement = clipRectElement;\n        trendline.targetSeries.seriesElement = element;\n        if (chart.trendLineElements) {\n            chart.trendLineElements.appendChild(trendline.trendLineElement);\n        }\n    };\n    /**\n     * Defines the data point of trendline\n     */\n    Trendlines.prototype.getDataPoint = function (x, y, series, index) {\n        var trendPoint = new Points();\n        trendPoint.x = series.xAxis.valueType === 'DateTime' ? new Date(Number(x)) : x;\n        trendPoint.y = y;\n        trendPoint.xValue = Number(x);\n        trendPoint.color = series.fill;\n        trendPoint.index = index;\n        trendPoint.yValue = Number(y);\n        trendPoint.visible = true;\n        series.xMin = Math.min(series.xMin, trendPoint.xValue);\n        series.yMin = Math.min(series.yMin, trendPoint.yValue);\n        series.xMax = Math.max(series.xMax, trendPoint.xValue);\n        series.yMax = Math.max(series.yMax, trendPoint.yValue);\n        series.xData.push(trendPoint.xValue);\n        return trendPoint;\n    };\n    /**\n     * Finds the slope and intercept of trendline\n     */\n    Trendlines.prototype.findSlopeIntercept = function (xValues, yValues, trendline, points) {\n        var xAvg = 0;\n        var yAvg = 0;\n        var xyAvg = 0;\n        var xxAvg = 0;\n        var index = 0;\n        var slope = 0;\n        var intercept = 0;\n        while (index < points.length) {\n            // To fix trendline not rendered issue while Nan Value is provided for y values.\n            if (isNaN(yValues[index])) {\n                yValues[index] = ((yValues[index - 1] + yValues[index + 1]) / 2);\n            }\n            xAvg += xValues[index];\n            yAvg += yValues[index];\n            xyAvg += xValues[index] * yValues[index];\n            xxAvg += xValues[index] * xValues[index];\n            index++;\n        }\n        var type = trendline.type;\n        if (trendline.intercept && (type === 'Linear' || type === 'Exponential')) {\n            intercept = trendline.intercept;\n            switch (type) {\n                case 'Linear':\n                    slope = ((xyAvg) - (trendline.intercept * xAvg)) / xxAvg;\n                    break;\n                case 'Exponential':\n                    slope = ((xyAvg) - (Math.log(Math.abs(trendline.intercept)) * xAvg)) / xxAvg;\n                    break;\n            }\n        }\n        else {\n            slope = ((points.length * xyAvg) - (xAvg * yAvg)) / ((points.length * xxAvg) - (xAvg * xAvg));\n            slope = (type === 'Linear' ? slope : Math.abs(slope));\n            if (type === 'Exponential' || type === 'Power') {\n                intercept = Math.exp((yAvg - (slope * xAvg)) / points.length);\n            }\n            else {\n                intercept = (yAvg - (slope * xAvg)) / points.length;\n            }\n        }\n        return { slope: slope, intercept: intercept };\n    };\n    /**\n     * Defines the points to draw the trendlines\n     */\n    Trendlines.prototype.initDataSource = function (trendline) {\n        var points = trendline.points;\n        if (points && points.length) {\n            //prepare data\n            var trendlineSeries = trendline.targetSeries;\n            switch (trendline.type) {\n                case 'Linear':\n                    this.setLinearRange(points, trendline, trendlineSeries);\n                    break;\n                case 'Exponential':\n                    this.setExponentialRange(points, trendline, trendlineSeries);\n                    break;\n                case 'MovingAverage':\n                    this.setMovingAverageRange(points, trendline, trendlineSeries);\n                    break;\n                case 'Polynomial':\n                    this.setPolynomialRange(points, trendline, trendlineSeries);\n                    break;\n                case 'Power':\n                    this.setPowerRange(points, trendline, trendlineSeries);\n                    break;\n                case 'Logarithmic':\n                    this.setLogarithmicRange(points, trendline, trendlineSeries);\n                    break;\n            }\n            if (trendline.type !== 'Linear' && trendline.type !== 'MovingAverage') {\n                trendlineSeries.chart.splineSeriesModule.findSplinePoint(trendlineSeries);\n            }\n        }\n    };\n    /**\n     * Calculation of exponential points\n     */\n    Trendlines.prototype.setExponentialRange = function (points, trendline, series) {\n        var xValue = [];\n        var yValue = [];\n        var index = 0;\n        while (index < points.length) {\n            var point = points[index];\n            var yDataValue = point.yValue ? Math.log(point.yValue) : 0;\n            xValue.push(point.xValue);\n            yValue.push(yDataValue);\n            index++;\n        }\n        var slopeIntercept = this.findSlopeIntercept(xValue, yValue, trendline, points);\n        series.points = this.getExponentialPoints(trendline, points, xValue, yValue, series, slopeIntercept);\n    };\n    /**\n     * Calculation of logarithmic points\n     */\n    Trendlines.prototype.setLogarithmicRange = function (points, trendline, series) {\n        var xLogValue = [];\n        var yLogValue = [];\n        var xPointsLgr = [];\n        var index = 0;\n        while (index < points.length) {\n            var point = points[index];\n            var xDataValue = point.xValue ? Math.log(point.xValue) : 0;\n            xPointsLgr.push(point.xValue);\n            xLogValue.push(xDataValue);\n            yLogValue.push(point.yValue);\n            index++;\n        }\n        var slopeIntercept = this.findSlopeIntercept(xLogValue, yLogValue, trendline, points);\n        series.points = this.getLogarithmicPoints(trendline, points, xPointsLgr, yLogValue, series, slopeIntercept);\n    };\n    /**\n     * Calculation of polynomial points\n     */\n    Trendlines.prototype.setPolynomialRange = function (points, trendline, series) {\n        var xPolyValues = [];\n        var yPolyValues = [];\n        var index = 0;\n        while (index < points.length) {\n            var point = points[index];\n            xPolyValues.push(point.xValue);\n            yPolyValues.push(point.yValue);\n            index++;\n        }\n        series.points = this.getPolynomialPoints(trendline, points, xPolyValues, yPolyValues, series);\n    };\n    /**\n     * Calculation of power points\n     */\n    Trendlines.prototype.setPowerRange = function (points, trendline, series) {\n        var xValues = [];\n        var yValues = [];\n        var powerPoints = [];\n        var index = 0;\n        while (index < points.length) {\n            var point = points[index];\n            var xDataValue = point.xValue ? Math.log(point.xValue) : 0;\n            var yDataValue = point.yValue ? Math.log(point.yValue) : 0;\n            powerPoints.push(point.xValue);\n            xValues.push(xDataValue);\n            yValues.push(yDataValue);\n            index++;\n        }\n        var slopeIntercept = this.findSlopeIntercept(xValues, yValues, trendline, points);\n        series.points = this.getPowerPoints(trendline, points, powerPoints, yValues, series, slopeIntercept);\n    };\n    /**\n     * Calculation of linear points\n     */\n    Trendlines.prototype.setLinearRange = function (points, trendline, series) {\n        var xValues = [];\n        var yValues = [];\n        var index = 0;\n        while (index < points.length) {\n            var point = points[index];\n            xValues.push(point.xValue);\n            yValues.push(point.yValue);\n            index++;\n        }\n        var slopeIntercept = this.findSlopeIntercept(xValues, yValues, trendline, points);\n        series.points = this.getLinearPoints(trendline, points, xValues, yValues, series, slopeIntercept);\n    };\n    /**\n     * Calculation of moving average points\n     */\n    Trendlines.prototype.setMovingAverageRange = function (points, trendline, series) {\n        var xValues = [];\n        var yValues = [];\n        var xAvgValues = [];\n        var index = 0;\n        while (index < points.length) {\n            var point = points[index];\n            xAvgValues.push(point.xValue);\n            xValues.push(index + 1);\n            yValues.push(point.yValue);\n            index++;\n        }\n        series.points = this.getMovingAveragePoints(trendline, points, xAvgValues, yValues, series);\n    };\n    /**\n     * Calculation of logarithmic points\n     */\n    Trendlines.prototype.getLogarithmicPoints = function (trendline, points, xValues, yValues, series, slopeInterceptLog) {\n        var midPoint = Math.round((points.length / 2));\n        var pts = [];\n        var x1Log = xValues[0] - trendline.backwardForecast;\n        var x1 = x1Log ? Math.log(x1Log) : 0;\n        var y1Log = slopeInterceptLog.intercept + (slopeInterceptLog.slope * x1);\n        var x2Log = xValues[midPoint - 1];\n        var x2 = x2Log ? Math.log(x2Log) : 0;\n        var y2Log = slopeInterceptLog.intercept + (slopeInterceptLog.slope * x2);\n        var x3Log = xValues[xValues.length - 1] + trendline.forwardForecast;\n        var x3 = x3Log ? Math.log(x3Log) : 0;\n        var y3Log = slopeInterceptLog.intercept + (slopeInterceptLog.slope * x3);\n        pts.push(this.getDataPoint(x1Log, y1Log, series, pts.length));\n        pts.push(this.getDataPoint(x2Log, y2Log, series, pts.length));\n        pts.push(this.getDataPoint(x3Log, y3Log, series, pts.length));\n        return pts;\n    };\n    /**\n     * Defines the points based on data point\n     */\n    Trendlines.prototype.getPowerPoints = function (trendline, points, xValues, yValues, series, slopeInterceptPower) {\n        var midPoint = Math.round((points.length / 2));\n        var pts = [];\n        var x1 = xValues[0] - trendline.backwardForecast;\n        x1 = x1 > -1 ? x1 : 0;\n        var y1 = slopeInterceptPower.intercept * Math.pow(x1, slopeInterceptPower.slope);\n        var x2 = xValues[midPoint - 1];\n        var y2 = slopeInterceptPower.intercept * Math.pow(x2, slopeInterceptPower.slope);\n        var x3 = xValues[xValues.length - 1] + trendline.forwardForecast;\n        var y3 = slopeInterceptPower.intercept * Math.pow(x3, slopeInterceptPower.slope);\n        pts.push(this.getDataPoint(x1, y1, series, pts.length));\n        pts.push(this.getDataPoint(x2, y2, series, pts.length));\n        pts.push(this.getDataPoint(x3, y3, series, pts.length));\n        return pts;\n    };\n    /**\n     * Get the polynomial points based on polynomial slopes\n     */\n    Trendlines.prototype.getPolynomialPoints = function (trendline, points, xValues, yValues, series) {\n        var pts = [];\n        var polynomialOrder = points.length <= trendline.polynomialOrder ? points.length : trendline.polynomialOrder;\n        polynomialOrder = Math.max(2, polynomialOrder);\n        polynomialOrder = Math.min(6, polynomialOrder);\n        trendline.polynomialOrder = polynomialOrder;\n        trendline.polynomialSlopes = [];\n        trendline.polynomialSlopes.length = trendline.polynomialOrder + 1;\n        var index = 0;\n        while (index < xValues.length) {\n            var xVal = xValues[index];\n            var yVal = yValues[index];\n            var subIndex = 0;\n            while (subIndex <= trendline.polynomialOrder) {\n                if (!trendline.polynomialSlopes[subIndex]) {\n                    trendline.polynomialSlopes[subIndex] = 0;\n                }\n                trendline.polynomialSlopes[subIndex] += Math.pow(xVal, subIndex) * yVal;\n                ++subIndex;\n            }\n            index++;\n        }\n        var numArray = [];\n        numArray.length = 1 + 2 * trendline.polynomialOrder;\n        var matrix = [];\n        matrix.length = trendline.polynomialOrder + 1;\n        var newIndex = 0;\n        while (newIndex < (trendline.polynomialOrder + 1)) {\n            matrix[newIndex] = [];\n            matrix[newIndex].length = 3;\n            newIndex++;\n        }\n        var nIndex = 0;\n        while (nIndex < xValues.length) {\n            var d = xValues[nIndex];\n            var num2 = 1.0;\n            var nIndex2 = 0;\n            while (nIndex2 < numArray.length) {\n                if (!numArray[nIndex2]) {\n                    numArray[nIndex2] = 0;\n                }\n                numArray[nIndex2] += num2;\n                num2 *= d;\n                ++nIndex2;\n            }\n            ++nIndex;\n        }\n        var nnIndex = 0;\n        while (nnIndex <= trendline.polynomialOrder) {\n            var nnIndex2 = 0;\n            while (nnIndex2 <= trendline.polynomialOrder) {\n                matrix[nnIndex][nnIndex2] = numArray[nnIndex + nnIndex2];\n                ++nnIndex2;\n            }\n            ++nnIndex;\n        }\n        if (!this.gaussJordanElimination(matrix, trendline.polynomialSlopes)) {\n            trendline.polynomialSlopes = null;\n        }\n        pts = this.getPoints(trendline, points, xValues, series);\n        return pts;\n    };\n    /**\n     * Defines the moving average points\n     */\n    Trendlines.prototype.getMovingAveragePoints = function (trendline, points, xValues, yValues, series) {\n        var pts = [];\n        var period = trendline.period >= points.length ? points.length - 1 : trendline.period;\n        period = Math.max(2, period);\n        var index = 0;\n        var y;\n        var x;\n        var count;\n        var nullCount;\n        while (index < points.length - 1) {\n            y = count = nullCount = 0;\n            for (var j = index; count < period; j++) {\n                count++;\n                if (!yValues[j]) {\n                    nullCount++;\n                }\n                y += yValues[j];\n            }\n            y = period - nullCount <= 0 ? null : y / (period - nullCount);\n            if (y && !isNaN(y)) {\n                x = xValues[period - 1 + index];\n                pts.push(this.getDataPoint(x, y, series, pts.length));\n            }\n            index++;\n        }\n        return pts;\n    };\n    /**\n     * Defines the linear points\n     */\n    Trendlines.prototype.getLinearPoints = function (trendline, points, xValues, yValues, series, slopeInterceptLinear) {\n        var pts = [];\n        var max = xValues.indexOf(Math.max.apply(null, xValues));\n        var min = xValues.indexOf(Math.min.apply(null, xValues));\n        var x1Linear = xValues[min] - trendline.backwardForecast;\n        var y1Linear = slopeInterceptLinear.slope * x1Linear + slopeInterceptLinear.intercept;\n        var x2Linear = xValues[max] + trendline.forwardForecast;\n        var y2Linear = slopeInterceptLinear.slope * x2Linear + slopeInterceptLinear.intercept;\n        pts.push(this.getDataPoint(x1Linear, y1Linear, series, pts.length));\n        pts.push(this.getDataPoint(x2Linear, y2Linear, series, pts.length));\n        return pts;\n    };\n    /**\n     * Defines the exponential points\n     */\n    Trendlines.prototype.getExponentialPoints = function (trendline, points, xValues, yValues, series, slopeInterceptExp) {\n        var midPoint = Math.round((points.length / 2));\n        var ptsExp = [];\n        var x1 = xValues[0] - trendline.backwardForecast;\n        var y1 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x1);\n        var x2 = xValues[midPoint - 1];\n        var y2 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x2);\n        var x3 = xValues[xValues.length - 1] + trendline.forwardForecast;\n        var y3 = slopeInterceptExp.intercept * Math.exp(slopeInterceptExp.slope * x3);\n        ptsExp.push(this.getDataPoint(x1, y1, series, ptsExp.length));\n        ptsExp.push(this.getDataPoint(x2, y2, series, ptsExp.length));\n        ptsExp.push(this.getDataPoint(x3, y3, series, ptsExp.length));\n        return ptsExp;\n    };\n    /**\n     * Defines the points based on data point\n     */\n    Trendlines.prototype.getPoints = function (trendline, points, xValues, series) {\n        var polynomialSlopes = trendline.polynomialSlopes;\n        var pts = [];\n        var x1 = 1;\n        var index = 1;\n        var xValue;\n        var yValue;\n        // We have to sort the points in ascending order. Because, the data source of the series may be random order.\n        points.sort(function (a, b) { return a.xValue - b.xValue; });\n        xValues.sort(function (a, b) { return a - b; });\n        while (index <= polynomialSlopes.length) {\n            if (index === 1) {\n                xValue = xValues[0] - trendline.backwardForecast;\n                yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\n                pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\n            }\n            else if (index === polynomialSlopes.length) {\n                xValue = xValues[points.length - 1] + trendline.forwardForecast;\n                yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\n                pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\n            }\n            else {\n                x1 += (points.length + trendline.forwardForecast) / polynomialSlopes.length;\n                xValue = xValues[parseInt(x1.toString(), 10) - 1];\n                yValue = this.getPolynomialYValue(polynomialSlopes, xValue);\n                pts.push(this.getDataPoint(xValue, yValue, series, pts.length));\n            }\n            index++;\n        }\n        return pts;\n    };\n    /**\n     * Defines the polynomial value of y\n     */\n    Trendlines.prototype.getPolynomialYValue = function (slopes, x) {\n        var sum = 0;\n        var index = 0;\n        while (index < slopes.length) {\n            sum += slopes[index] * Math.pow(x, index);\n            index++;\n        }\n        return sum;\n    };\n    /**\n     * Defines the gauss jordan elimination\n     */\n    Trendlines.prototype.gaussJordanElimination = function (matrix, polynomialSlopes) {\n        var length = matrix.length;\n        var numArray1 = [];\n        var numArray2 = [];\n        var numArray3 = [];\n        numArray1.length = length;\n        numArray2.length = length;\n        numArray3.length = length;\n        var index = 0;\n        while (index < length) {\n            numArray3[index] = 0;\n            ++index;\n        }\n        var index1 = 0;\n        while (index1 < length) {\n            var num1 = 0;\n            var index2 = 0;\n            var index3 = 0;\n            var index4 = 0;\n            while (index4 < length) {\n                if (numArray3[index4] !== 1) {\n                    var index5 = 0;\n                    while (index5 < length) {\n                        if (numArray3[index5] === 0 && Math.abs(matrix[index4][index5]) >= num1) {\n                            num1 = Math.abs(matrix[index4][index5]);\n                            index2 = index4;\n                            index3 = index5;\n                        }\n                        ++index5;\n                    }\n                }\n                ++index4;\n            }\n            ++numArray3[index3];\n            if (index2 !== index3) {\n                var index4_1 = 0;\n                while (index4_1 < length) {\n                    var num2 = matrix[index2][index4_1];\n                    matrix[index2][index4_1] = matrix[index3][index4_1];\n                    matrix[index3][index4_1] = num2;\n                    ++index4_1;\n                }\n                var num3 = polynomialSlopes[index2];\n                polynomialSlopes[index2] = polynomialSlopes[index3];\n                polynomialSlopes[index3] = num3;\n            }\n            numArray2[index1] = index2;\n            numArray1[index1] = index3;\n            if (matrix[index3][index3] === 0.0) {\n                return false;\n            }\n            var num4 = 1.0 / matrix[index3][index3];\n            matrix[index3][index3] = 1.0;\n            var iindex4 = 0;\n            while (iindex4 < length) {\n                matrix[index3][iindex4] *= num4;\n                ++iindex4;\n            }\n            polynomialSlopes[index3] *= num4;\n            var iandex4 = 0;\n            while (iandex4 < length) {\n                if (iandex4 !== index3) {\n                    var num2 = matrix[iandex4][index3];\n                    matrix[iandex4][index3] = 0.0;\n                    var index5 = 0;\n                    while (index5 < length) {\n                        matrix[iandex4][index5] -= matrix[index3][index5] * num2;\n                        ++index5;\n                    }\n                    polynomialSlopes[iandex4] -= polynomialSlopes[index3] * num2;\n                }\n                ++iandex4;\n            }\n            ++index1;\n        }\n        var iindex1 = length - 1;\n        while (iindex1 >= 0) {\n            if (numArray2[iindex1] !== numArray1[iindex1]) {\n                var iindex2 = 0;\n                while (iindex2 < length) {\n                    var num = matrix[iindex2][numArray2[iindex1]];\n                    matrix[iindex2][numArray2[iindex1]] = matrix[iindex2][numArray1[iindex1]];\n                    matrix[iindex2][numArray1[iindex1]] = num;\n                    ++iindex2;\n                }\n            }\n            --iindex1;\n        }\n        return true;\n    };\n    /**\n     * Defines the trendline elements\n     */\n    Trendlines.prototype.getTrendLineElements = function (series, chart) {\n        findClipRect(series);\n        var clipRect = series.clipRect;\n        var clipRectElement = chart.renderer.drawClipPath(new RectOption(chart.element.id + '_ChartTrendlineClipRect_' + series.index, 'transparent', { width: 1, color: 'Gray' }, 1, {\n            x: 0, y: 0, width: clipRect.width,\n            height: clipRect.height\n        }));\n        var element = chart.renderer.createGroup({\n            'id': chart.element.id + 'TrendlineSeriesGroup' + series.index,\n            'transform': 'translate(' + clipRect.x + ',' + clipRect.y + ')',\n            'clip-path': 'url(#' + chart.element.id + '_ChartTrendlineClipRect_' + series.index + ')'\n        });\n        //defines the clip rect element\n        if (element) {\n            element.appendChild(clipRectElement);\n        }\n        for (var _i = 0, _a = series.trendlines; _i < _a.length; _i++) {\n            var trendline = _a[_i];\n            this.createTrendLineElements(chart, trendline, trendline.index, element, clipRectElement);\n        }\n    };\n    /**\n     * To destroy the trendline\n     */\n    Trendlines.prototype.destroy = function () {\n        /**\n         * Destroys the Linear Trendline\n         */\n    };\n    /**\n     * Get module name\n     */\n    Trendlines.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series\n         */\n        return 'TrendLine';\n    };\n    return Trendlines;\n}());\nexport { Trendlines };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}