{"ast":null,"code":"import { Browser, remove, EventHandler, isUndefined, closest, classList } from '@syncfusion/ej2-base';\nimport { parentsUntil } from '../base/util';\nimport * as events from '../base/constant';\nimport * as literals from '../base/string-literals';\n/**\n * The `Clipboard` module is used to handle clipboard copy action.\n */\n\nvar Clipboard =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid clipboard module\n   *\n   * @param {IGrid} parent - specifies the IGrid\n   * @hidden\n   */\n  function Clipboard(parent) {\n    this.copyContent = '';\n    this.isSelect = false;\n    this.parent = parent;\n    this.addEventListener();\n  }\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Clipboard.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(events.contentReady, this.initialEnd, this);\n    this.parent.on(events.keyPressed, this.keyDownHandler, this);\n    this.parent.on(events.click, this.clickHandler, this);\n    EventHandler.add(this.parent.element, 'keydown', this.pasteHandler, this);\n  };\n  /**\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Clipboard.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.keyPressed, this.keyDownHandler);\n    this.parent.off(events.contentReady, this.initialEnd);\n    this.parent.off(events.click, this.clickHandler);\n    EventHandler.remove(this.parent.element, 'keydown', this.pasteHandler);\n  };\n\n  Clipboard.prototype.clickHandler = function (e) {\n    var target = e.target; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    target = parentsUntil(target, 'e-rowcell');\n  };\n\n  Clipboard.prototype.pasteHandler = function (e) {\n    var _this = this;\n\n    var grid = this.parent;\n    var isMacLike = /(Mac)/i.test(navigator.platform);\n\n    if (e.keyCode === 67 && isMacLike && e.metaKey && !grid.isEdit) {\n      this.copy();\n    }\n\n    if (e.keyCode === 86 && (e.ctrlKey || isMacLike && e.metaKey) && !grid.isEdit) {\n      var target = closest(document.activeElement, '.' + literals.rowCell);\n\n      if (!target || !grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' || grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {\n        return;\n      }\n\n      this.activeElement = document.activeElement;\n      this.clipBoardTextArea.value = '';\n      var x_1 = window.scrollX;\n      var y_1 = window.scrollY;\n      this.clipBoardTextArea.focus();\n      setTimeout(function () {\n        _this.activeElement.focus();\n\n        window.scrollTo(x_1, y_1);\n\n        _this.paste(_this.clipBoardTextArea.value, _this.parent.getSelectedRowCellIndexes()[0].rowIndex, _this.parent.getSelectedRowCellIndexes()[0].cellIndexes[0]);\n      }, 10);\n    }\n  };\n  /**\n   * Paste data from clipboard to selected cells.\n   *\n   * @param {boolean} data - Specifies the date for paste.\n   * @param {boolean} rowIndex - Specifies the row index.\n   * @param {boolean} colIndex - Specifies the column index.\n   * @returns {void}\n   */\n\n\n  Clipboard.prototype.paste = function (data, rowIndex, colIndex) {\n    var grid = this.parent;\n    var cIdx = colIndex;\n    var rIdx = rowIndex;\n    var col;\n    var value;\n    var isAvail;\n\n    if (!grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' || grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {\n      return;\n    }\n\n    var rows = data.split('\\n');\n    var cols;\n    var dataRows = grid.getDataRows();\n    var mRows;\n    var frRows;\n    var isFrozen = this.parent.isFrozenGrid();\n\n    if (isFrozen) {\n      mRows = grid.getMovableDataRows();\n\n      if (grid.getFrozenRightColumnsCount()) {\n        frRows = grid.getFrozenRightDataRows();\n      }\n    }\n\n    for (var r = 0; r < rows.length; r++) {\n      cols = rows[r].split('\\t');\n      cIdx = colIndex;\n\n      if (r === rows.length - 1 && rows[r] === '' || isUndefined(grid.getRowByIndex(rIdx))) {\n        cIdx++;\n        break;\n      }\n\n      for (var c = 0; c < cols.length; c++) {\n        isAvail = grid.getCellFromIndex(rIdx, cIdx);\n\n        if (isFrozen) {\n          var fTr = dataRows[rIdx];\n          var mTr = mRows[rIdx];\n          isAvail = !fTr.querySelector('[aria-colindex=\"' + cIdx + '\"]') ? mTr.querySelector('[aria-colindex=\"' + cIdx + '\"]') : true;\n\n          if (frRows && !isAvail) {\n            var frTr = frRows[rIdx];\n            isAvail = frTr.querySelector('[aria-colindex=\"' + cIdx + '\"]');\n          }\n        }\n\n        if (!isAvail) {\n          cIdx++;\n          break;\n        }\n\n        col = grid.getColumnByIndex(cIdx);\n        value = col.getParser() ? col.getParser()(cols[c]) : cols[c];\n\n        if (col.allowEditing && !col.isPrimaryKey && !col.template) {\n          var args = {\n            column: col,\n            data: value,\n            rowIndex: rIdx\n          };\n          this.parent.trigger(events.beforePaste, args);\n          rIdx = args.rowIndex;\n\n          if (!args.cancel) {\n            if (grid.editModule) {\n              if (col.type === 'number') {\n                this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.data));\n              } else {\n                grid.editModule.updateCell(rIdx, col.field, args.data);\n              }\n            }\n          }\n        }\n\n        cIdx++;\n      }\n\n      rIdx++;\n    }\n\n    grid.selectionModule.selectCellsByRange({\n      rowIndex: rowIndex,\n      cellIndex: colIndex\n    }, {\n      rowIndex: rIdx - 1,\n      cellIndex: cIdx - 1\n    });\n    var cell = this.parent.getCellFromIndex(rIdx - 1, cIdx - 1);\n\n    if (cell) {\n      classList(cell, ['e-focus', 'e-focused'], []);\n    }\n  };\n\n  Clipboard.prototype.initialEnd = function () {\n    this.parent.off(events.contentReady, this.initialEnd);\n    this.clipBoardTextArea = this.parent.createElement('textarea', {\n      className: 'e-clipboard',\n      styles: 'opacity: 0',\n      attrs: {\n        tabindex: '-1',\n        'aria-label': 'clipboard'\n      }\n    });\n    this.parent.element.appendChild(this.clipBoardTextArea);\n  };\n\n  Clipboard.prototype.keyDownHandler = function (e) {\n    if (e.action === 'ctrlPlusC') {\n      this.copy();\n    } else if (e.action === 'ctrlShiftPlusH') {\n      this.copy(true);\n    }\n  };\n\n  Clipboard.prototype.setCopyData = function (withHeader) {\n    if (window.getSelection().toString() === '') {\n      var isFrozen = this.parent.isFrozenGrid();\n      this.clipBoardTextArea.value = this.copyContent = '';\n      var mRows = void 0;\n      var frRows = void 0;\n      var rows = this.parent.getRows();\n\n      if (isFrozen) {\n        mRows = this.parent.getMovableDataRows();\n\n        if (this.parent.getFrozenMode() === literals.leftRight) {\n          frRows = this.parent.getFrozenRightRows();\n        }\n      }\n\n      if (this.parent.selectionSettings.mode !== 'Cell') {\n        var selectedIndexes = this.parent.getSelectedRowIndexes().sort(function (a, b) {\n          return a - b;\n        });\n\n        if (withHeader) {\n          var headerTextArray = [];\n\n          for (var i = 0; i < this.parent.getVisibleColumns().length; i++) {\n            headerTextArray[i] = this.parent.getVisibleColumns()[i].headerText;\n          }\n\n          this.getCopyData(headerTextArray, false, '\\t', withHeader);\n          this.copyContent += '\\n';\n        }\n\n        for (var i = 0; i < selectedIndexes.length; i++) {\n          if (i > 0) {\n            this.copyContent += '\\n';\n          }\n\n          var cells = [].slice.call(rows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)'));\n\n          if (isFrozen) {\n            cells.push.apply(cells, [].slice.call(mRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));\n\n            if (frRows) {\n              cells.push.apply(cells, [].slice.call(frRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));\n            }\n          }\n\n          this.getCopyData(cells, false, '\\t', withHeader);\n        }\n      } else {\n        var obj = this.checkBoxSelection();\n\n        if (obj.status) {\n          if (withHeader) {\n            var headers = [];\n\n            for (var i = 0; i < obj.colIndexes.length; i++) {\n              headers.push(this.parent.getColumnHeaderByIndex(obj.colIndexes[i]));\n            }\n\n            this.getCopyData(headers, false, '\\t', withHeader);\n            this.copyContent += '\\n';\n          }\n\n          for (var i = 0; i < obj.rowIndexes.length; i++) {\n            if (i > 0) {\n              this.copyContent += '\\n';\n            }\n\n            var cells = [].slice.call(rows[obj.rowIndexes[i]].getElementsByClassName('e-cellselectionbackground'));\n\n            if (isFrozen) {\n              cells.push.apply(cells, [].slice.call(mRows[obj.rowIndexes[i]].getElementsByClassName('e-cellselectionbackground')));\n\n              if (frRows) {\n                cells.push.apply(cells, [].slice.call(frRows[obj.rowIndexes[i]].getElementsByClassName('e-cellselectionbackground')));\n              }\n            }\n\n            this.getCopyData(cells, false, '\\t', withHeader);\n          }\n        } else {\n          this.getCopyData([].slice.call(this.parent.element.getElementsByClassName('e-cellselectionbackground')), true, '\\n', withHeader);\n        }\n      }\n\n      var args = {\n        data: this.copyContent,\n        cancel: false\n      };\n      this.parent.trigger(events.beforeCopy, args);\n\n      if (args.cancel) {\n        return;\n      }\n\n      this.clipBoardTextArea.value = this.copyContent = args.data;\n\n      if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {\n        this.clipBoardTextArea.select();\n      } else {\n        this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);\n      }\n\n      this.isSelect = true;\n    }\n  };\n\n  Clipboard.prototype.getCopyData = function (cells, isCell, splitKey, withHeader) {\n    var isElement = typeof cells[0] !== 'string';\n\n    for (var j = 0; j < cells.length; j++) {\n      if (withHeader && isCell) {\n        var colIdx = parseInt(cells[j].getAttribute(literals.ariaColIndex), 10);\n        this.copyContent += this.parent.getColumns()[colIdx].headerText + '\\n';\n      }\n\n      if (isElement) {\n        if (!cells[j].classList.contains('e-hide')) {\n          this.copyContent += cells[j].innerText;\n        }\n      } else {\n        this.copyContent += cells[j];\n      }\n\n      if (j < cells.length - 1) {\n        this.copyContent += splitKey;\n      }\n    }\n  };\n  /**\n   * Copy selected rows or cells data into clipboard.\n   *\n   * @returns {void}\n   * @param {boolean} withHeader - Specifies whether the column header data need to be copied or not.\n   */\n\n\n  Clipboard.prototype.copy = function (withHeader) {\n    if (document.queryCommandSupported('copy')) {\n      this.setCopyData(withHeader);\n      document.execCommand('copy');\n      this.clipBoardTextArea.blur();\n    }\n\n    if (this.isSelect) {\n      window.getSelection().removeAllRanges();\n      this.isSelect = false;\n    }\n  };\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} returns the module name\n   * @private\n   */\n\n\n  Clipboard.prototype.getModuleName = function () {\n    return 'clipboard';\n  };\n  /**\n   * To destroy the clipboard\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Clipboard.prototype.destroy = function () {\n    this.removeEventListener();\n\n    if (this.clipBoardTextArea) {\n      remove(this.clipBoardTextArea);\n    }\n  };\n\n  Clipboard.prototype.checkBoxSelection = function () {\n    var gridObj = this.parent;\n    var obj = {\n      status: false\n    };\n\n    if (gridObj.selectionSettings.mode === 'Cell') {\n      var rowCellIndxes = gridObj.getSelectedRowCellIndexes();\n      var str = void 0;\n      var rowIndexes = [];\n      var i = void 0;\n\n      for (i = 0; i < rowCellIndxes.length; i++) {\n        if (rowCellIndxes[i].cellIndexes.length) {\n          rowIndexes.push(rowCellIndxes[i].rowIndex);\n        }\n\n        if (rowCellIndxes[i].cellIndexes.length) {\n          if (!str) {\n            str = JSON.stringify(rowCellIndxes[i].cellIndexes.sort());\n          }\n\n          if (str !== JSON.stringify(rowCellIndxes[i].cellIndexes.sort())) {\n            break;\n          }\n        }\n      }\n\n      rowIndexes.sort(function (a, b) {\n        return a - b;\n      });\n\n      if (i === rowCellIndxes.length && rowIndexes[rowIndexes.length - 1] - rowIndexes[0] === rowIndexes.length - 1) {\n        obj = {\n          status: true,\n          rowIndexes: rowIndexes,\n          colIndexes: rowCellIndxes[0].cellIndexes\n        };\n      }\n    }\n\n    return obj;\n  };\n\n  return Clipboard;\n}();\n\nexport { Clipboard };","map":{"version":3,"names":["Browser","remove","EventHandler","isUndefined","closest","classList","parentsUntil","events","literals","Clipboard","parent","copyContent","isSelect","addEventListener","prototype","isDestroyed","on","contentReady","initialEnd","keyPressed","keyDownHandler","click","clickHandler","add","element","pasteHandler","removeEventListener","off","e","target","_this","grid","isMacLike","test","navigator","platform","keyCode","metaKey","isEdit","copy","ctrlKey","document","activeElement","rowCell","editSettings","allowEditing","mode","selectionSettings","cellSelectionMode","clipBoardTextArea","value","x_1","window","scrollX","y_1","scrollY","focus","setTimeout","scrollTo","paste","getSelectedRowCellIndexes","rowIndex","cellIndexes","data","colIndex","cIdx","rIdx","col","isAvail","rows","split","cols","dataRows","getDataRows","mRows","frRows","isFrozen","isFrozenGrid","getMovableDataRows","getFrozenRightColumnsCount","getFrozenRightDataRows","r","length","getRowByIndex","c","getCellFromIndex","fTr","mTr","querySelector","frTr","getColumnByIndex","getParser","isPrimaryKey","template","args","column","trigger","beforePaste","cancel","editModule","type","updateCell","field","parseFloat","selectionModule","selectCellsByRange","cellIndex","cell","createElement","className","styles","attrs","tabindex","appendChild","action","setCopyData","withHeader","getSelection","toString","getRows","getFrozenMode","leftRight","getFrozenRightRows","selectedIndexes","getSelectedRowIndexes","sort","a","b","headerTextArray","i","getVisibleColumns","headerText","getCopyData","cells","slice","call","querySelectorAll","push","apply","obj","checkBoxSelection","status","headers","colIndexes","getColumnHeaderByIndex","rowIndexes","getElementsByClassName","beforeCopy","userAgent","match","select","setSelectionRange","isCell","splitKey","isElement","j","colIdx","parseInt","getAttribute","ariaColIndex","getColumns","contains","innerText","queryCommandSupported","execCommand","blur","removeAllRanges","getModuleName","destroy","gridObj","rowCellIndxes","str","JSON","stringify"],"sources":["C:/Users/shahj/OneDrive/Documents/GitHub/Admin-Dashboard/frontend/node_modules/@syncfusion/ej2-grids/src/grid/actions/clipboard.js"],"sourcesContent":["import { Browser, remove, EventHandler, isUndefined, closest, classList } from '@syncfusion/ej2-base';\nimport { parentsUntil } from '../base/util';\nimport * as events from '../base/constant';\nimport * as literals from '../base/string-literals';\n/**\n * The `Clipboard` module is used to handle clipboard copy action.\n */\nvar Clipboard = /** @class */ (function () {\n    /**\n     * Constructor for the Grid clipboard module\n     *\n     * @param {IGrid} parent - specifies the IGrid\n     * @hidden\n     */\n    function Clipboard(parent) {\n        this.copyContent = '';\n        this.isSelect = false;\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Clipboard.prototype.addEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(events.contentReady, this.initialEnd, this);\n        this.parent.on(events.keyPressed, this.keyDownHandler, this);\n        this.parent.on(events.click, this.clickHandler, this);\n        EventHandler.add(this.parent.element, 'keydown', this.pasteHandler, this);\n    };\n    /**\n     * @returns {void}\n     * @hidden\n     */\n    Clipboard.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.keyPressed, this.keyDownHandler);\n        this.parent.off(events.contentReady, this.initialEnd);\n        this.parent.off(events.click, this.clickHandler);\n        EventHandler.remove(this.parent.element, 'keydown', this.pasteHandler);\n    };\n    Clipboard.prototype.clickHandler = function (e) {\n        var target = e.target;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        target = parentsUntil(target, 'e-rowcell');\n    };\n    Clipboard.prototype.pasteHandler = function (e) {\n        var _this = this;\n        var grid = this.parent;\n        var isMacLike = /(Mac)/i.test(navigator.platform);\n        if (e.keyCode === 67 && isMacLike && e.metaKey && !grid.isEdit) {\n            this.copy();\n        }\n        if (e.keyCode === 86 && (e.ctrlKey || (isMacLike && e.metaKey)) && !grid.isEdit) {\n            var target = closest(document.activeElement, '.' + literals.rowCell);\n            if (!target || !grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' ||\n                grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {\n                return;\n            }\n            this.activeElement = document.activeElement;\n            this.clipBoardTextArea.value = '';\n            var x_1 = window.scrollX;\n            var y_1 = window.scrollY;\n            this.clipBoardTextArea.focus();\n            setTimeout(function () {\n                _this.activeElement.focus();\n                window.scrollTo(x_1, y_1);\n                _this.paste(_this.clipBoardTextArea.value, _this.parent.getSelectedRowCellIndexes()[0].rowIndex, _this.parent.getSelectedRowCellIndexes()[0].cellIndexes[0]);\n            }, 10);\n        }\n    };\n    /**\n     * Paste data from clipboard to selected cells.\n     *\n     * @param {boolean} data - Specifies the date for paste.\n     * @param {boolean} rowIndex - Specifies the row index.\n     * @param {boolean} colIndex - Specifies the column index.\n     * @returns {void}\n     */\n    Clipboard.prototype.paste = function (data, rowIndex, colIndex) {\n        var grid = this.parent;\n        var cIdx = colIndex;\n        var rIdx = rowIndex;\n        var col;\n        var value;\n        var isAvail;\n        if (!grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' ||\n            grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {\n            return;\n        }\n        var rows = data.split('\\n');\n        var cols;\n        var dataRows = grid.getDataRows();\n        var mRows;\n        var frRows;\n        var isFrozen = this.parent.isFrozenGrid();\n        if (isFrozen) {\n            mRows = grid.getMovableDataRows();\n            if (grid.getFrozenRightColumnsCount()) {\n                frRows = grid.getFrozenRightDataRows();\n            }\n        }\n        for (var r = 0; r < rows.length; r++) {\n            cols = rows[r].split('\\t');\n            cIdx = colIndex;\n            if ((r === rows.length - 1 && rows[r] === '') || isUndefined(grid.getRowByIndex(rIdx))) {\n                cIdx++;\n                break;\n            }\n            for (var c = 0; c < cols.length; c++) {\n                isAvail = grid.getCellFromIndex(rIdx, cIdx);\n                if (isFrozen) {\n                    var fTr = dataRows[rIdx];\n                    var mTr = mRows[rIdx];\n                    isAvail = !fTr.querySelector('[aria-colindex=\"' + cIdx + '\"]') ?\n                        mTr.querySelector('[aria-colindex=\"' + cIdx + '\"]') : true;\n                    if (frRows && !isAvail) {\n                        var frTr = frRows[rIdx];\n                        isAvail = frTr.querySelector('[aria-colindex=\"' + cIdx + '\"]');\n                    }\n                }\n                if (!isAvail) {\n                    cIdx++;\n                    break;\n                }\n                col = grid.getColumnByIndex(cIdx);\n                value = col.getParser() ? col.getParser()(cols[c]) : cols[c];\n                if (col.allowEditing && !col.isPrimaryKey && !col.template) {\n                    var args = {\n                        column: col,\n                        data: value,\n                        rowIndex: rIdx\n                    };\n                    this.parent.trigger(events.beforePaste, args);\n                    rIdx = args.rowIndex;\n                    if (!args.cancel) {\n                        if (grid.editModule) {\n                            if (col.type === 'number') {\n                                this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.data));\n                            }\n                            else {\n                                grid.editModule.updateCell(rIdx, col.field, args.data);\n                            }\n                        }\n                    }\n                }\n                cIdx++;\n            }\n            rIdx++;\n        }\n        grid.selectionModule.selectCellsByRange({ rowIndex: rowIndex, cellIndex: colIndex }, { rowIndex: rIdx - 1, cellIndex: cIdx - 1 });\n        var cell = this.parent.getCellFromIndex(rIdx - 1, cIdx - 1);\n        if (cell) {\n            classList(cell, ['e-focus', 'e-focused'], []);\n        }\n    };\n    Clipboard.prototype.initialEnd = function () {\n        this.parent.off(events.contentReady, this.initialEnd);\n        this.clipBoardTextArea = this.parent.createElement('textarea', {\n            className: 'e-clipboard',\n            styles: 'opacity: 0',\n            attrs: { tabindex: '-1', 'aria-label': 'clipboard' }\n        });\n        this.parent.element.appendChild(this.clipBoardTextArea);\n    };\n    Clipboard.prototype.keyDownHandler = function (e) {\n        if (e.action === 'ctrlPlusC') {\n            this.copy();\n        }\n        else if (e.action === 'ctrlShiftPlusH') {\n            this.copy(true);\n        }\n    };\n    Clipboard.prototype.setCopyData = function (withHeader) {\n        if (window.getSelection().toString() === '') {\n            var isFrozen = this.parent.isFrozenGrid();\n            this.clipBoardTextArea.value = this.copyContent = '';\n            var mRows = void 0;\n            var frRows = void 0;\n            var rows = this.parent.getRows();\n            if (isFrozen) {\n                mRows = this.parent.getMovableDataRows();\n                if (this.parent.getFrozenMode() === literals.leftRight) {\n                    frRows = this.parent.getFrozenRightRows();\n                }\n            }\n            if (this.parent.selectionSettings.mode !== 'Cell') {\n                var selectedIndexes = this.parent.getSelectedRowIndexes().sort(function (a, b) { return a - b; });\n                if (withHeader) {\n                    var headerTextArray = [];\n                    for (var i = 0; i < this.parent.getVisibleColumns().length; i++) {\n                        headerTextArray[i] = this.parent.getVisibleColumns()[i].headerText;\n                    }\n                    this.getCopyData(headerTextArray, false, '\\t', withHeader);\n                    this.copyContent += '\\n';\n                }\n                for (var i = 0; i < selectedIndexes.length; i++) {\n                    if (i > 0) {\n                        this.copyContent += '\\n';\n                    }\n                    var cells = [].slice.call(rows[selectedIndexes[i]].\n                        querySelectorAll('.e-rowcell:not(.e-hide)'));\n                    if (isFrozen) {\n                        cells.push.apply(cells, [].slice.call(mRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));\n                        if (frRows) {\n                            cells.push.apply(cells, [].slice.call(frRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));\n                        }\n                    }\n                    this.getCopyData(cells, false, '\\t', withHeader);\n                }\n            }\n            else {\n                var obj = this.checkBoxSelection();\n                if (obj.status) {\n                    if (withHeader) {\n                        var headers = [];\n                        for (var i = 0; i < obj.colIndexes.length; i++) {\n                            headers.push(this.parent.getColumnHeaderByIndex(obj.colIndexes[i]));\n                        }\n                        this.getCopyData(headers, false, '\\t', withHeader);\n                        this.copyContent += '\\n';\n                    }\n                    for (var i = 0; i < obj.rowIndexes.length; i++) {\n                        if (i > 0) {\n                            this.copyContent += '\\n';\n                        }\n                        var cells = [].slice.call(rows[obj.rowIndexes[i]].\n                            getElementsByClassName('e-cellselectionbackground'));\n                        if (isFrozen) {\n                            cells.push.apply(cells, [].slice.call(mRows[obj.rowIndexes[i]]\n                                .getElementsByClassName('e-cellselectionbackground')));\n                            if (frRows) {\n                                cells.push.apply(cells, [].slice.call(frRows[obj.rowIndexes[i]]\n                                    .getElementsByClassName('e-cellselectionbackground')));\n                            }\n                        }\n                        this.getCopyData(cells, false, '\\t', withHeader);\n                    }\n                }\n                else {\n                    this.getCopyData([].slice.call(this.parent.element.getElementsByClassName('e-cellselectionbackground')), true, '\\n', withHeader);\n                }\n            }\n            var args = {\n                data: this.copyContent,\n                cancel: false\n            };\n            this.parent.trigger(events.beforeCopy, args);\n            if (args.cancel) {\n                return;\n            }\n            this.clipBoardTextArea.value = this.copyContent = args.data;\n            if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {\n                this.clipBoardTextArea.select();\n            }\n            else {\n                this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);\n            }\n            this.isSelect = true;\n        }\n    };\n    Clipboard.prototype.getCopyData = function (cells, isCell, splitKey, withHeader) {\n        var isElement = typeof cells[0] !== 'string';\n        for (var j = 0; j < cells.length; j++) {\n            if (withHeader && isCell) {\n                var colIdx = parseInt(cells[j].getAttribute(literals.ariaColIndex), 10);\n                this.copyContent += this.parent.getColumns()[colIdx].headerText + '\\n';\n            }\n            if (isElement) {\n                if (!cells[j].classList.contains('e-hide')) {\n                    this.copyContent += cells[j].innerText;\n                }\n            }\n            else {\n                this.copyContent += cells[j];\n            }\n            if (j < cells.length - 1) {\n                this.copyContent += splitKey;\n            }\n        }\n    };\n    /**\n     * Copy selected rows or cells data into clipboard.\n     *\n     * @returns {void}\n     * @param {boolean} withHeader - Specifies whether the column header data need to be copied or not.\n     */\n    Clipboard.prototype.copy = function (withHeader) {\n        if (document.queryCommandSupported('copy')) {\n            this.setCopyData(withHeader);\n            document.execCommand('copy');\n            this.clipBoardTextArea.blur();\n        }\n        if (this.isSelect) {\n            window.getSelection().removeAllRanges();\n            this.isSelect = false;\n        }\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @returns {string} returns the module name\n     * @private\n     */\n    Clipboard.prototype.getModuleName = function () {\n        return 'clipboard';\n    };\n    /**\n     * To destroy the clipboard\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Clipboard.prototype.destroy = function () {\n        this.removeEventListener();\n        if (this.clipBoardTextArea) {\n            remove(this.clipBoardTextArea);\n        }\n    };\n    Clipboard.prototype.checkBoxSelection = function () {\n        var gridObj = this.parent;\n        var obj = { status: false };\n        if (gridObj.selectionSettings.mode === 'Cell') {\n            var rowCellIndxes = gridObj.getSelectedRowCellIndexes();\n            var str = void 0;\n            var rowIndexes = [];\n            var i = void 0;\n            for (i = 0; i < rowCellIndxes.length; i++) {\n                if (rowCellIndxes[i].cellIndexes.length) {\n                    rowIndexes.push(rowCellIndxes[i].rowIndex);\n                }\n                if (rowCellIndxes[i].cellIndexes.length) {\n                    if (!str) {\n                        str = JSON.stringify(rowCellIndxes[i].cellIndexes.sort());\n                    }\n                    if (str !== JSON.stringify(rowCellIndxes[i].cellIndexes.sort())) {\n                        break;\n                    }\n                }\n            }\n            rowIndexes.sort(function (a, b) { return a - b; });\n            if (i === rowCellIndxes.length && rowIndexes[rowIndexes.length - 1] - rowIndexes[0] === rowIndexes.length - 1) {\n                obj = { status: true, rowIndexes: rowIndexes, colIndexes: rowCellIndxes[0].cellIndexes };\n            }\n        }\n        return obj;\n    };\n    return Clipboard;\n}());\nexport { Clipboard };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}