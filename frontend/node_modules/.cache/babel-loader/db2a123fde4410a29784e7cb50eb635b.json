{"ast":null,"code":"/* eslint-disable max-len */\nimport { isNullOrUndefined, getDefaultDateObject, getValue, cldrData } from '@syncfusion/ej2-base';\nimport { MS_PER_DAY, addDays, resetTime, capitalizeFirstWord } from '../schedule/base/util';\nimport { Islamic, Gregorian } from '../common/calendar-util';\nimport { Timezone } from '../schedule/timezone/timezone';\n/**\n * Date Generator from Recurrence Rule\n */\n\n/**\n * Generate Summary from Recurrence Rule\n *\n * @param {string} rule Accepts the Recurrence rule\n * @param {L10n} localeObject Accepts the locale object\n * @param {string} locale Accepts the locale name\n * @param {CalendarType} calendarType Accepts the calendar type\n * @returns {string} Returns the summary string from given recurrence rule\n */\n\nexport function generateSummary(rule, localeObject, locale, calendarType) {\n  if (calendarType === void 0) {\n    calendarType = 'Gregorian';\n  }\n\n  var ruleObject = extractObjectFromRule(rule);\n  var summary = localeObject.getConstant(EVERY) + ' ';\n  var cldrObj;\n  var cldrObj1;\n  var calendarMode = calendarType.toLowerCase();\n\n  if (locale === 'en' || locale === 'en-US') {\n    var nameSpace1 = 'months.stand-alone.abbreviated';\n    var nameSpace = 'days.stand-alone.abbreviated';\n    cldrObj1 = getValue(nameSpace1, getDefaultDateObject(calendarMode));\n    cldrObj = getValue(nameSpace, getDefaultDateObject(calendarMode));\n  } else {\n    var nameSpace1 = 'main.' + locale + '.dates.calendars.' + calendarMode + '.months.stand-alone.abbreviated';\n    var nameSpace = 'main.' + locale + '.dates.calendars.' + calendarMode + '.days.stand-alone.abbreviated';\n    cldrObj1 = getValue(nameSpace1, cldrData);\n    cldrObj = getValue(nameSpace, cldrData);\n  }\n\n  if (ruleObject.interval > 1) {\n    summary += ruleObject.interval + ' ';\n  }\n\n  switch (ruleObject.freq) {\n    case 'DAILY':\n      summary += localeObject.getConstant(DAYS);\n      break;\n\n    case 'WEEKLY':\n      summary += localeObject.getConstant(WEEKS) + ' ' + localeObject.getConstant(ON) + ' ';\n      ruleObject.day.forEach(function (day, index) {\n        summary += capitalizeFirstWord(getValue(DAYINDEXOBJECT[day], cldrObj), 'single');\n        summary += ruleObject.day.length - 1 === index ? '' : ', ';\n      });\n      break;\n\n    case 'MONTHLY':\n      summary += localeObject.getConstant(MONTHS) + ' ' + localeObject.getConstant(ON) + ' ';\n      summary += getMonthSummary(ruleObject, cldrObj, localeObject);\n      break;\n\n    case 'YEARLY':\n      summary += localeObject.getConstant(YEARS) + ' ' + localeObject.getConstant(ON) + ' ';\n      summary += capitalizeFirstWord(getValue(ruleObject.month[0].toString(), cldrObj1), 'single') + ' ';\n      summary += getMonthSummary(ruleObject, cldrObj, localeObject);\n      break;\n  }\n\n  if (ruleObject.count) {\n    summary += ', ' + ruleObject.count + ' ' + localeObject.getConstant(TIMES);\n  } else if (ruleObject.until) {\n    var tempDate = ruleObject.until;\n    summary += ', ' + localeObject.getConstant(UNTIL) + ' ' + tempDate.getDate() + ' ' + capitalizeFirstWord(getValue((tempDate.getMonth() + 1).toString(), cldrObj1), 'single') + ' ' + tempDate.getFullYear();\n  }\n\n  return summary;\n}\n/**\n * Generates Month summary\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {string[]} cldrObj Accepts the collections of month name from calendar\n * @param {L10n} localeObj Accepts the locale object\n * @returns {string} Returns the month summary string from given recurrence rule object\n * @private\n */\n\nfunction getMonthSummary(ruleObject, cldrObj, localeObj) {\n  var summary = '';\n\n  if (ruleObject.monthDay.length) {\n    summary += ruleObject.monthDay[0];\n  } else if (ruleObject.day) {\n    var pos = ruleObject.setPosition - 1;\n    summary += localeObj.getConstant(WEEKPOS[pos > -1 ? pos : WEEKPOS.length - 1]) + ' ' + capitalizeFirstWord(getValue(DAYINDEXOBJECT[ruleObject.day[0]], cldrObj), 'single');\n  }\n\n  return summary;\n}\n/**\n * Generates the date collections from the given recurrence rule\n *\n * @param {Date} startDate Accepts the rule start date\n * @param {string} rule Accepts the recurrence rule\n * @param {string} excludeDate Accepts the exception dates in string format\n * @param {number} startDayOfWeek Accepts the start day index of week\n * @param {number} maximumCount Accepts the maximum number count to generate date collections\n * @param {Date} viewDate Accepts the current date instead of start date\n * @param {CalendarType} calendarMode Accepts the calendar type\n * @param {string} oldTimezone Accepts the timezone name\n * @param {string} newTimezone Accepts the timezone name\n * @returns {number[]} Returns the collection of dates\n */\n\n\nexport function generate(startDate, rule, excludeDate, startDayOfWeek, maximumCount, viewDate, calendarMode, oldTimezone, newTimezone) {\n  if (maximumCount === void 0) {\n    maximumCount = MAXOCCURRENCE;\n  }\n\n  if (viewDate === void 0) {\n    viewDate = null;\n  }\n\n  if (calendarMode === void 0) {\n    calendarMode = 'Gregorian';\n  }\n\n  if (oldTimezone === void 0) {\n    oldTimezone = null;\n  }\n\n  if (newTimezone === void 0) {\n    newTimezone = null;\n  }\n\n  var ruleObject = extractObjectFromRule(rule);\n  var cacheDate;\n  calendarUtil = getCalendarUtil(calendarMode);\n  var data = [];\n  var modifiedDate = new Date(startDate.getTime());\n  tempExcludeDate = [];\n  var tempDate = isNullOrUndefined(excludeDate) ? [] : excludeDate.split(',');\n  var tz = new Timezone();\n  tempDate.forEach(function (content) {\n    var parsedDate = getDateFromRecurrenceDateString(content);\n\n    if (oldTimezone && newTimezone) {\n      parsedDate = tz.convert(new Date(parsedDate.getTime()), oldTimezone, newTimezone);\n    }\n\n    tempExcludeDate.push(new Date(parsedDate.getTime()).setHours(0, 0, 0, 0));\n  });\n  ruleObject.recExceptionCount = !isNullOrUndefined(ruleObject.count) ? tempExcludeDate.length : 0;\n\n  if (viewDate && viewDate > startDate && !ruleObject.count) {\n    tempViewDate = new Date(new Date(viewDate.getTime()).setHours(0, 0, 0));\n  } else {\n    tempViewDate = null;\n  }\n\n  if (!ruleObject.until && tempViewDate) {\n    cacheDate = new Date(tempViewDate.getTime());\n    cacheDate.setDate(tempViewDate.getDate() + maximumCount * ruleObject.interval);\n    ruleObject.until = cacheDate;\n  }\n\n  if (ruleObject.until && startDate > ruleObject.until) {\n    return data;\n  }\n\n  maxOccurrence = maximumCount;\n  setFirstDayOfWeek(DAYINDEX[startDayOfWeek]);\n\n  switch (ruleObject.freq) {\n    case 'DAILY':\n      dailyType(modifiedDate, ruleObject.until, data, ruleObject);\n      break;\n\n    case 'WEEKLY':\n      weeklyType(modifiedDate, ruleObject.until, data, ruleObject);\n      break;\n\n    case 'MONTHLY':\n      monthlyType(modifiedDate, ruleObject.until, data, ruleObject);\n      break;\n\n    case 'YEARLY':\n      yearlyType(modifiedDate, ruleObject.until, data, ruleObject);\n  }\n\n  return data;\n}\n/**\n * Generate date object from given date string\n *\n * @param {string} recDateString Accepts the exception date as string\n * @returns {Date} Returns the date from exception date string\n */\n\nexport function getDateFromRecurrenceDateString(recDateString) {\n  return new Date(recDateString.substr(0, 4) + '-' + recDateString.substr(4, 2) + '-' + recDateString.substr(6, 5) + ':' + recDateString.substr(11, 2) + ':' + recDateString.substr(13));\n}\n/**\n * Internal method to handle exclude date\n *\n * @param {number[]} data Accepts the exception date collections\n * @param {number} date Accepts the new exclude date\n * @returns {void}\n * @private\n */\n\nfunction excludeDateHandler(data, date) {\n  var zeroIndex = new Date(date).setHours(0, 0, 0, 0);\n\n  if (tempExcludeDate.indexOf(zeroIndex) === -1 && (!tempViewDate || zeroIndex >= tempViewDate.getTime())) {\n    data.push(date);\n  }\n}\n/**\n * Internal method for get date count\n *\n * @param {Date} startDate Accepts the date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {number} Returns the number of date count\n * @private\n */\n\n\nfunction getDateCount(startDate, ruleObject) {\n  var count = maxOccurrence;\n\n  if (ruleObject.count) {\n    count = ruleObject.count;\n  } else if (ruleObject.until) {\n    if (ruleObject.freq === 'DAILY' || ruleObject.freq === 'WEEKLY') {\n      count = Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1;\n    } else if (ruleObject.freq === 'MONTHLY' || ruleObject.freq === 'YEARLY') {\n      count = Math.floor((ruleObject.until.getMonth() + 12 * ruleObject.until.getFullYear() - (startDate.getMonth() + 12 * startDate.getFullYear())) / ruleObject.interval) + (ruleObject.day.length > 1 ? Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1 : 1);\n\n      if (ruleObject.freq === 'YEARLY') {\n        count = ruleObject.month.length > 1 ? count * ruleObject.month.length : count;\n      }\n    }\n  }\n\n  return count;\n}\n/**\n *  Internal method for daily type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction dailyType(startDate, endDate, data, ruleObject) {\n  var tempDate = new Date(startDate.getTime());\n  var interval = ruleObject.interval;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var state;\n  var expectedDays = ruleObject.day;\n\n  while (compareDates(tempDate, endDate)) {\n    state = true;\n    state = validateRules(tempDate, ruleObject);\n\n    if (state && (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1 || expectedDays.length === 0)) {\n      excludeDateHandler(data, tempDate.getTime());\n\n      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n        break;\n      }\n    }\n\n    tempDate.setDate(tempDate.getDate() + interval);\n  }\n}\n/**\n * Internal method for weekly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction weeklyType(startDate, endDate, data, ruleObject) {\n  var tempDate = new Date(startDate.getTime());\n\n  if (!ruleObject.day.length) {\n    ruleObject.day.push(DAYINDEX[startDate.getDay()]);\n  }\n\n  var interval = ruleObject.interval;\n  var expectedDays = ruleObject.day;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var weekState = true;\n  var wkstIndex;\n  var weekCollection = [];\n\n  if (expectedDays.length > 1) {\n    if (isNullOrUndefined(ruleObject.wkst) || ruleObject.wkst === '') {\n      ruleObject.wkst = dayIndex[0];\n    }\n\n    wkstIndex = DAYINDEX.indexOf(ruleObject.wkst);\n\n    while (compareDates(tempDate, endDate)) {\n      var startDateDiff = DAYINDEX.indexOf(DAYINDEX[tempDate.getDay()]) - wkstIndex;\n      startDateDiff = startDateDiff === -1 ? 6 : startDateDiff;\n      var weekstartDate = addDays(tempDate, -startDateDiff);\n      var weekendDate = addDays(weekstartDate, 6);\n      var compareTempDate = new Date(tempDate.getTime());\n      weekendDate = resetTime(weekendDate);\n      compareTempDate = resetTime(compareTempDate);\n\n      while (weekendDate >= compareTempDate) {\n        if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n          weekCollection.push([tempDate.getTime()]);\n        }\n\n        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n          break;\n        }\n\n        tempDate.setDate(tempDate.getDate() + 1);\n        compareTempDate = new Date(tempDate.getTime());\n        compareTempDate = resetTime(compareTempDate);\n      }\n\n      tempDate.setDate(tempDate.getDate() - 1);\n\n      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n        break;\n      }\n\n      tempDate.setDate(tempDate.getDate() + 1 + (interval - 1) * 7);\n      insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);\n      weekCollection = [];\n    }\n  } else {\n    tempDate = getStartDateForWeek(startDate, ruleObject.day);\n\n    while (compareDates(tempDate, endDate)) {\n      weekState = validateRules(tempDate, ruleObject);\n\n      if (weekState && expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n        excludeDateHandler(data, tempDate.getTime());\n      }\n\n      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n        break;\n      }\n\n      tempDate.setDate(tempDate.getDate() + interval * 7);\n    }\n\n    insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);\n    weekCollection = [];\n  }\n}\n/**\n *  Internal method for monthly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction monthlyType(startDate, endDate, data, ruleObject) {\n  // Set monthday value if BYDAY, BYMONTH and Month day property is not set based on start date\n  if (!ruleObject.month.length && !ruleObject.day.length && !ruleObject.monthDay.length) {\n    ruleObject.monthDay.push(startDate.getDate());\n\n    if (ruleObject.freq === 'YEARLY') {\n      ruleObject.month.push(startDate.getMonth() + 1);\n    }\n  } else if (ruleObject.month.length > 0 && !ruleObject.day.length && !ruleObject.monthDay.length) {\n    ruleObject.monthDay.push(startDate.getDate());\n  }\n\n  var ruleType = validateMonthlyRuleType(ruleObject);\n\n  switch (ruleType) {\n    case 'day':\n      switch (ruleObject.freq) {\n        case 'MONTHLY':\n          monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n          break;\n\n        case 'YEARLY':\n          monthlyDayTypeProcess(startDate, endDate, data, ruleObject);\n          break;\n      }\n\n      break;\n\n    case 'both':\n    case 'date':\n      switch (ruleObject.freq) {\n        case 'MONTHLY':\n          monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n          break;\n\n        case 'YEARLY':\n          monthlyDateTypeProcess(startDate, endDate, data, ruleObject);\n          break;\n      }\n\n      break;\n  }\n}\n/**\n * Internal method for yearly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction yearlyType(startDate, endDate, data, ruleObject) {\n  var typeValue = checkYearlyType(ruleObject);\n\n  switch (typeValue) {\n    case 'MONTH':\n      monthlyType(startDate, endDate, data, ruleObject);\n      break;\n\n    case 'WEEKNO':\n      processWeekNo(startDate, endDate, data, ruleObject);\n      break;\n\n    case 'YEARDAY':\n      processYearDay(startDate, endDate, data, ruleObject);\n      break;\n  }\n}\n/**\n * Internal method for process week no\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction processWeekNo(startDate, endDate, data, ruleObject) {\n  var stDate = calendarUtil.getYearLastDate(startDate, 0);\n  var tempDate;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var state;\n  var startDay;\n  var firstWeekSpan;\n  var weekNos = ruleObject.weekNo;\n  var weekNo;\n  var maxDate;\n  var minDate;\n  var weekCollection = [];\n  var expectedDays = ruleObject.day;\n\n  while (compareDates(stDate, endDate)) {\n    startDay = dayIndex.indexOf(DAYINDEX[stDate.getDay()]);\n    firstWeekSpan = 6 - startDay + 1;\n\n    for (var index = 0; index < weekNos.length; index++) {\n      weekNo = weekNos[index];\n      weekNo = weekNo > 0 ? weekNo : 53 + weekNo + 1;\n      maxDate = weekNo === 1 ? firstWeekSpan : firstWeekSpan + (weekNo - 1) * 7;\n      minDate = weekNo === 1 ? firstWeekSpan - 7 : firstWeekSpan + (weekNo - 2) * 7;\n\n      while (minDate < maxDate) {\n        tempDate = new Date(stDate.getTime() + MS_PER_DAY * minDate);\n\n        if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n          if (isNullOrUndefined(ruleObject.setPosition)) {\n            insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());\n          } else {\n            weekCollection.push([tempDate.getTime()]);\n          }\n        }\n\n        minDate++;\n      }\n    }\n\n    if (!isNullOrUndefined(ruleObject.setPosition)) {\n      insertDatasIntoExistingCollection(weekCollection, state, startDate, endDate, data, ruleObject);\n    }\n\n    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n      return;\n    }\n\n    stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);\n    weekCollection = [];\n  }\n}\n/**\n * Internal method for process year day\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction processYearDay(startDate, endDate, data, ruleObject) {\n  var stDate = calendarUtil.getYearLastDate(startDate, 0);\n  var tempDate;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var state;\n  var dateCollection = [];\n  var date;\n  var expectedDays = ruleObject.day;\n\n  while (compareDates(stDate, endDate)) {\n    for (var index = 0; index < ruleObject.yearDay.length; index++) {\n      date = ruleObject.yearDay[index];\n      tempDate = new Date(stDate.getTime());\n\n      if ((date === calendarUtil.getLeapYearDaysCount() || date === -calendarUtil.getLeapYearDaysCount()) && !calendarUtil.isLeapYear(calendarUtil.getFullYear(tempDate), 1)) {\n        tempDate.setDate(tempDate.getDate() + 1);\n        continue;\n      }\n\n      tempDate.setDate(tempDate.getDate() + (date < 0 ? calendarUtil.getYearDaysCount(tempDate, 1) + 1 + date : date));\n\n      if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n        if (ruleObject.setPosition == null) {\n          insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());\n        } else {\n          dateCollection.push([tempDate.getTime()]);\n        }\n      }\n    }\n\n    if (!isNullOrUndefined(ruleObject.setPosition)) {\n      insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject);\n    }\n\n    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n      return;\n    }\n\n    stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);\n    dateCollection = [];\n  }\n}\n/**\n * Internal method to check yearly type\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {YearRuleType} Returns the Yearly rule type object\n * @private\n */\n\n\nfunction checkYearlyType(ruleObject) {\n  if (ruleObject.yearDay.length) {\n    return 'YEARDAY';\n  } else if (ruleObject.weekNo.length) {\n    return 'WEEKNO';\n  }\n\n  return 'MONTH';\n}\n/**\n * Internal method to initialize recurrence rule variables\n *\n * @param {Date} startDate Accepts the start date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {RuleData} Return the rule data object\n * @private\n */\n\n\nfunction initializeRecRuleVariables(startDate, ruleObject) {\n  var ruleData = {\n    monthCollection: [],\n    index: 0,\n    tempDate: new Date(startDate.getTime()),\n    mainDate: new Date(startDate.getTime()),\n    expectedCount: getDateCount(startDate, ruleObject),\n    monthInit: 0,\n    dateCollection: []\n  };\n\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(ruleData.tempDate, ruleObject.month[0], ruleData.tempDate.getDate());\n  }\n\n  return ruleData;\n}\n/**\n * Internal method for process monthly date type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction monthlyDateTypeProcess(startDate, endDate, data, ruleObject) {\n  if (ruleObject.month.length) {\n    monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n    return;\n  }\n\n  var ruleData = initializeRecRuleVariables(startDate, ruleObject);\n  var currentMonthDate;\n  ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);\n\n  while (compareDates(ruleData.tempDate, endDate)) {\n    currentMonthDate = new Date(ruleData.tempDate.getTime());\n\n    while (calendarUtil.isSameYear(currentMonthDate, ruleData.tempDate) && ruleData.expectedCount && data.length + ruleObject.recExceptionCount <= ruleData.expectedCount) {\n      if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && !calendarUtil.checkMonth(ruleData.tempDate, ruleObject.month)) {\n        processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, false);\n        ruleData.beginDate = new Date(ruleData.tempDate.getTime());\n        ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n      } else {\n        calendarUtil.setValidDate(ruleData.tempDate, 1, 1);\n        ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n        break;\n      }\n    }\n\n    ruleData.tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());\n    insertDataCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);\n\n    if (calendarUtil.isLastMonth(ruleData.tempDate)) {\n      calendarUtil.setValidDate(ruleData.tempDate, 1, 1);\n      ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n    }\n\n    if (ruleData.expectedCount && data.length + ruleObject.recExceptionCount >= ruleData.expectedCount) {\n      return;\n    }\n\n    ruleData.tempDate.setFullYear(ruleData.tempDate.getFullYear() + ruleObject.interval - 1);\n    ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n    ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n    ruleData.dateCollection = [];\n  }\n}\n/**\n * Internal method for process monthly date type with month frequency from recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {\n  var ruleData = initializeRecRuleVariables(startDate, ruleObject);\n  ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);\n\n  if ((ruleObject.freq === 'MONTHLY' && ruleObject.interval === 12 || ruleObject.freq === 'YEARLY') && calendarUtil.getMonthDaysCount(startDate) < ruleObject.monthDay[0]) {\n    return;\n  }\n\n  while (compareDates(ruleData.tempDate, endDate)) {\n    ruleData.beginDate = new Date(ruleData.tempDate.getTime());\n    processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, true, startDate, data);\n\n    if (!isNullOrUndefined(ruleObject.setPosition)) {\n      insertDatasIntoExistingCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);\n    }\n\n    if (ruleData.expectedCount && data.length + ruleObject.recExceptionCount >= ruleData.expectedCount) {\n      return;\n    }\n\n    ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n    ruleData.dateCollection = [];\n  }\n}\n/**\n * To process date collection for Monthly & Yearly based on BYMONTH Day property\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {RuleData} recRuleVariables Accepts the rule data\n * @param {Date} endDate Accepts the end date\n * @param {boolean} isByMonth Accepts the boolean to validate either month or not\n * @param {Date} startDate Accepts the start date\n * @param {number[]} data Accepts the collection of dates\n * @returns {void}\n * @private\n */\n\n\nfunction processDateCollectionForByMonthDay(ruleObject, recRuleVariables, endDate, isByMonth, startDate, data) {\n  for (var index = 0; index < ruleObject.monthDay.length; index++) {\n    recRuleVariables.date = ruleObject.monthDay[index];\n    recRuleVariables.tempDate = calendarUtil.getMonthStartDate(recRuleVariables.tempDate);\n    var maxDate = calendarUtil.getMonthDaysCount(recRuleVariables.tempDate);\n    recRuleVariables.date = recRuleVariables.date > 0 ? recRuleVariables.date : maxDate + recRuleVariables.date + 1;\n\n    if (validateProperDate(recRuleVariables.tempDate, recRuleVariables.date, recRuleVariables.mainDate) && recRuleVariables.date > 0) {\n      calendarUtil.setDate(recRuleVariables.tempDate, recRuleVariables.date);\n\n      if (endDate && recRuleVariables.tempDate > endDate) {\n        return;\n      }\n\n      if (ruleObject.day.length === 0 || ruleObject.day.indexOf(DAYINDEX[recRuleVariables.tempDate.getDay()]) > -1) {\n        if (isByMonth && isNullOrUndefined(ruleObject.setPosition) && recRuleVariables.expectedCount && data.length + ruleObject.recExceptionCount < recRuleVariables.expectedCount) {\n          insertDateCollection(recRuleVariables.state, startDate, endDate, data, ruleObject, recRuleVariables.tempDate.getTime());\n        } else {\n          recRuleVariables.dateCollection.push([recRuleVariables.tempDate.getTime()]);\n        }\n      }\n    }\n  }\n}\n/**\n * Internal method to set next valid date\n *\n * @param {Date} tempDate Accepts the date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} monthInit Accepts the initial month\n * @param {Date} beginDate Accepts the initial date\n * @param {number} interval Accepts the interval duration\n * @returns {number} Returnx the next valid date\n * @private\n */\n\n\nfunction setNextValidDate(tempDate, ruleObject, monthInit, beginDate, interval) {\n  if (beginDate === void 0) {\n    beginDate = null;\n  }\n\n  var monthData = beginDate ? beginDate.getMonth() : 0;\n  var startDate = calendarUtil.getMonthStartDate(tempDate);\n  interval = isNullOrUndefined(interval) ? ruleObject.interval : interval;\n  tempDate.setFullYear(startDate.getFullYear());\n  tempDate.setMonth(startDate.getMonth());\n  tempDate.setDate(startDate.getDate());\n\n  if (ruleObject.month.length) {\n    monthInit++;\n    monthInit = monthInit % ruleObject.month.length;\n    calendarUtil.setMonth(tempDate, ruleObject.month[monthInit], 1);\n\n    if (monthInit === 0) {\n      calendarUtil.addYears(tempDate, interval, ruleObject.month[0]);\n    }\n  } else {\n    if (beginDate && beginDate.getFullYear() < tempDate.getFullYear()) {\n      monthData = tempDate.getMonth() - 1;\n    }\n\n    calendarUtil.setValidDate(tempDate, interval, 1, monthData, beginDate);\n  }\n\n  return monthInit;\n}\n/**\n * To get month collection when BYDAY property having more than one value in list.\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction getMonthCollection(startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  var tempDate = new Date(startDate.getTime());\n  tempDate = calendarUtil.getMonthStartDate(tempDate);\n  var monthCollection = [];\n  var dateCollection = [];\n  var dates = [];\n  var index;\n  var state;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var monthInit = 0;\n  var beginDate;\n\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n  }\n\n  tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n\n  while (compareDates(tempDate, endDate) && expectedCount && data.length + ruleObject.recExceptionCount < expectedCount) {\n    var currentMonthDate = new Date(tempDate.getTime());\n    var isHavingNumber = expectedDays.map(function (item) {\n      return HASNUMBER.test(item);\n    });\n\n    if (isHavingNumber.indexOf(true) > -1) {\n      for (var j = 0; j <= expectedDays.length - 1; j++) {\n        var expectedDaysArray = expectedDays[j].match(SPLITNUMBERANDSTRING);\n        var position = parseInt(expectedDaysArray[0], 10);\n        tempDate = new Date(tempDate.getTime());\n        tempDate = calendarUtil.getMonthStartDate(tempDate);\n        tempDate = getStartDateForWeek(tempDate, expectedDays);\n        currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());\n\n        while (calendarUtil.isSameYear(currentMonthDate, tempDate) && calendarUtil.isSameMonth(currentMonthDate, tempDate)) {\n          if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentMonthDate.getDay()]) {\n            monthCollection.push([currentMonthDate.getTime()]);\n          }\n\n          currentMonthDate.setDate(currentMonthDate.getDate() + 1);\n        }\n\n        currentMonthDate.setDate(currentMonthDate.getDate() - 1);\n\n        if (expectedDaysArray[0].indexOf('-') > -1) {\n          index = monthCollection.length - -1 * position;\n        } else {\n          index = position - 1;\n        }\n\n        index = isNaN(index) ? 0 : index;\n\n        if (monthCollection.length > 0) {\n          if (isNullOrUndefined(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n          } else {\n            dateCollection = [filterDateCollectionByIndex(monthCollection, index, dates)];\n          }\n        }\n\n        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n          return;\n        }\n\n        monthCollection = [];\n      }\n\n      if (!isNullOrUndefined(ruleObject.setPosition)) {\n        insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n        dates = [];\n      }\n\n      monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n      tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n      monthCollection = [];\n    } else {\n      var weekCollection = [];\n      var dayCycleData = processWeekDays(expectedDays);\n      currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());\n      var initialDate = new Date(tempDate.getTime());\n      beginDate = new Date(tempDate.getTime());\n\n      while (calendarUtil.isSameMonth(initialDate, tempDate)) {\n        weekCollection.push(tempDate.getTime());\n\n        if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n          monthCollection.push(weekCollection);\n          weekCollection = [];\n        }\n\n        tempDate.setDate(tempDate.getDate() + dayCycleData[DAYINDEX[tempDate.getDay()]]);\n      }\n\n      index = ruleObject.setPosition < 1 ? monthCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;\n\n      if (isNullOrUndefined(ruleObject.setPosition)) {\n        index = 0;\n        var datas = [];\n\n        for (var week = 0; week < monthCollection.length; week++) {\n          for (var row = 0; row < monthCollection[week].length; row++) {\n            datas.push(monthCollection[week][row]);\n          }\n        }\n\n        monthCollection = [datas];\n      }\n\n      if (monthCollection.length > 0) {\n        insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n      }\n\n      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n        return;\n      }\n\n      monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n      tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n      monthCollection = [];\n    }\n  }\n}\n/**\n * To process monday day type for FREQ=MONTHLY\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day; // When BYDAY property having more than 1 value.\n\n  if (expectedDays.length > 1) {\n    getMonthCollection(startDate, endDate, data, ruleObject);\n    return;\n  }\n\n  var tempDate = new Date(startDate.getTime());\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var monthCollection = [];\n  var beginDate;\n  var monthInit = 0;\n  tempDate = calendarUtil.getMonthStartDate(tempDate);\n\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n  }\n\n  tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n\n  while (compareDates(tempDate, endDate) && expectedCount && data.length + ruleObject.recExceptionCount < expectedCount) {\n    beginDate = new Date(tempDate.getTime());\n    var currentMonthDate = new Date(tempDate.getTime());\n\n    while (calendarUtil.isSameMonth(tempDate, currentMonthDate)) {\n      monthCollection.push([currentMonthDate.getTime()]);\n      currentMonthDate.setDate(currentMonthDate.getDate() + 7);\n    } // To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n\n\n    insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);\n    monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    monthCollection = [];\n  }\n}\n/**\n * To process monday day type for FREQ=YEARLY\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction monthlyDayTypeProcess(startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  var isHavingNumber = expectedDays.map(function (item) {\n    return HASNUMBER.test(item);\n  }); // If BYDAY property having more than 1 value in list\n\n  if (expectedDays.length > 1 && isHavingNumber.indexOf(true) > -1) {\n    processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject);\n    return;\n  } else if (ruleObject.month.length && expectedDays.length === 1 && isHavingNumber.indexOf(true) > -1) {\n    monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n    return;\n  }\n\n  var tempDate = new Date(startDate.getTime());\n  var currentMonthDate;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var interval = ruleObject.interval;\n  var monthCollection = [];\n\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());\n  } // Set the date as start date of the yeear if yearly freq having ByDay property alone\n\n\n  if (isNullOrUndefined(ruleObject.setPosition) && ruleObject.month.length === 0 && ruleObject.weekNo.length === 0) {\n    tempDate.setFullYear(startDate.getFullYear(), 0, 1);\n  }\n\n  tempDate = calendarUtil.getMonthStartDate(tempDate);\n  tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n\n  while (compareDates(tempDate, endDate)) {\n    currentMonthDate = new Date(tempDate.getTime());\n\n    while (calendarUtil.isSameYear(currentMonthDate, tempDate) && expectedCount && data.length + ruleObject.recExceptionCount <= expectedCount) {\n      currentMonthDate = new Date(tempDate.getTime());\n\n      while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {\n        if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && !calendarUtil.checkMonth(tempDate, ruleObject.month)) {\n          if (expectedDays.length > 1) {\n            if (calendarUtil.compareMonth(currentMonthDate, tempDate)) {\n              calendarUtil.setValidDate(tempDate, 1, 1);\n              tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n              break;\n            }\n\n            if (expectedDays.indexOf(DAYINDEX[currentMonthDate.getDay()]) > -1) {\n              monthCollection.push([currentMonthDate.getTime()]);\n            }\n\n            currentMonthDate.setDate(currentMonthDate.getDate() + 1);\n          } else {\n            // If BYDAY property having 1 value in list\n            if (currentMonthDate.getFullYear() > tempDate.getFullYear()) {\n              calendarUtil.setValidDate(tempDate, 1, 1);\n              tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n              break;\n            }\n\n            var newstr = getDayString(expectedDays[0]);\n\n            if (DAYINDEX[currentMonthDate.getDay()] === newstr && new Date(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), 0) > new Date(startDate.getFullYear())) {\n              monthCollection.push([currentMonthDate.getTime()]);\n            }\n\n            currentMonthDate.setDate(currentMonthDate.getDate() + 7);\n          }\n        } else {\n          calendarUtil.setValidDate(tempDate, 1, 1);\n          tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n          break;\n        }\n      }\n    }\n\n    tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate()); // To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n\n    insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);\n\n    if (calendarUtil.isLastMonth(tempDate)) {\n      calendarUtil.setValidDate(tempDate, 1, 1);\n      tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    }\n\n    tempDate.setFullYear(tempDate.getFullYear() + interval - 1);\n\n    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n      return;\n    }\n\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    monthCollection = [];\n  }\n}\n/**\n * To process the recurrence rule when BYDAY property having values with integer\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var tempDate = new Date(startDate.getTime());\n  var interval = ruleObject.interval;\n  var monthCollection = [];\n  var dateCollection = [];\n  var index;\n  var state;\n  var monthInit = 0;\n  var currentMonthDate;\n  var currentDate;\n  var beginDate;\n  tempDate = calendarUtil.getMonthStartDate(tempDate);\n  var datas = [];\n\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n  }\n\n  tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n\n  while (compareDates(tempDate, endDate)) {\n    currentMonthDate = new Date(tempDate.getTime());\n\n    for (var i = 0; i <= ruleObject.month.length; i++) {\n      for (var j = 0; j <= expectedDays.length - 1; j++) {\n        tempDate = calendarUtil.getMonthStartDate(tempDate);\n        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        monthCollection = [];\n\n        while (calendarUtil.isSameYear(currentMonthDate, tempDate) && expectedCount && data.length + ruleObject.recExceptionCount <= expectedCount) {\n          while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {\n            currentMonthDate = new Date(tempDate.getTime());\n\n            if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && ruleObject.month[i] === calendarUtil.getMonth(currentMonthDate)) {\n              var expectedDaysArray = expectedDays[j].match(SPLITNUMBERANDSTRING);\n              var position = parseInt(expectedDaysArray[0], 10);\n              currentDate = new Date(tempDate.getTime());\n\n              while (calendarUtil.isSameYear(currentDate, tempDate) && calendarUtil.isSameMonth(currentDate, tempDate)) {\n                if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentDate.getDay()]) {\n                  monthCollection.push([currentDate.getTime()]);\n                }\n\n                currentDate.setDate(currentDate.getDate() + 1);\n              }\n\n              currentDate.setDate(currentDate.getDate() - 1);\n\n              if (expectedDaysArray[0].indexOf('-') > -1) {\n                index = monthCollection.length - -1 * position;\n              } else {\n                index = position - 1;\n              }\n\n              index = isNaN(index) ? 0 : index;\n            }\n\n            monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate, 1);\n            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n          }\n        }\n\n        tempDate = j === 0 && currentDate ? new Date(currentDate.getTime()) : new Date(currentMonthDate.getTime());\n\n        if (monthCollection.length > 0) {\n          if (isNullOrUndefined(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n          } else {\n            dateCollection = [filterDateCollectionByIndex(monthCollection, index, datas)];\n          }\n        }\n\n        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n          return;\n        }\n      }\n    }\n\n    if (!isNullOrUndefined(ruleObject.setPosition)) {\n      insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n      datas = [];\n    }\n\n    if (calendarUtil.isLastMonth(tempDate)) {\n      calendarUtil.setValidDate(tempDate, 1, 1);\n      tempDate.setFullYear(tempDate.getFullYear() + interval - 1);\n    } else {\n      tempDate.setFullYear(tempDate.getFullYear() + interval);\n    }\n\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n\n    if (ruleObject.month.length) {\n      calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());\n    }\n  }\n}\n/**\n * To get recurrence collection if BYSETPOS is null\n *\n * @param {number[]} monthCollection Accepts the month collection dates\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {RuleData} Returns the rule data object\n * @private\n */\n\n\nfunction getRecurrenceCollection(monthCollection, expectedDays) {\n  var index;\n  var recurrenceCollectionObject = {\n    monthCollection: [],\n    index: 0\n  };\n\n  if (expectedDays.length === 1) {\n    // To split numeric value from BYDAY property value\n    var expectedDaysArrays = expectedDays[0].match(SPLITNUMBERANDSTRING);\n    var arrPosition = void 0;\n\n    if (expectedDaysArrays.length > 1) {\n      arrPosition = parseInt(expectedDaysArrays[0], 10);\n      index = arrPosition < 1 ? monthCollection.length + arrPosition : arrPosition - 1;\n    } else {\n      index = 0;\n      monthCollection = getDateCollectionforBySetPosNull(monthCollection);\n    }\n  } else {\n    index = 0;\n    monthCollection = getDateCollectionforBySetPosNull(monthCollection);\n  }\n\n  recurrenceCollectionObject.monthCollection = monthCollection;\n  recurrenceCollectionObject.index = index;\n  return recurrenceCollectionObject;\n}\n/**\n * Internal method to process the data collections\n *\n * @param {number[]} dateCollection Accepts the date collections\n * @param {boolean} state Accepts the state\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of numbers\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction insertDataCollection(dateCollection, state, startDate, endDate, data, ruleObject) {\n  var index = ruleObject.setPosition < 1 ? dateCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;\n\n  if (isNullOrUndefined(ruleObject.setPosition)) {\n    index = 0;\n    dateCollection = getDateCollectionforBySetPosNull(dateCollection);\n  }\n\n  if (dateCollection.length > 0) {\n    insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject, index);\n  }\n}\n/**\n * To process month collection if BYSETPOS is null\n *\n * @param {number[]} monthCollection Accepts the month date collections\n * @returns {number[]} Returns the month date collections\n * @private\n */\n\n\nfunction getDateCollectionforBySetPosNull(monthCollection) {\n  var datas = [];\n\n  for (var week = 0; week < monthCollection.length; week++) {\n    for (var row = 0; row < monthCollection[week].length; row++) {\n      datas.push(new Date(monthCollection[week][row]).getTime());\n    }\n  }\n\n  monthCollection = datas.length > 0 ? [datas] : [];\n  return monthCollection;\n}\n/**\n * To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n *\n * @param {number[]} monthCollection Accepts the month date collections\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the date collections\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  var state;\n  var datas = [];\n  var dateCollection = [];\n  var recurrenceCollections = getRecurrenceCollection(monthCollection, expectedDays);\n  monthCollection = recurrenceCollections.monthCollection;\n  var index = recurrenceCollections.index;\n\n  if (ruleObject.setPosition != null) {\n    dateCollection = [filterDateCollectionByIndex(monthCollection, index, datas)];\n    insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n  } else {\n    if (monthCollection.length > 0) {\n      insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n    }\n  }\n\n  datas = [];\n}\n/**\n * To filter date collection when BYDAY property having values with number\n *\n * @param {number[]} monthCollection Accepts the date collections\n * @param {number} index Accepts the index of date collections\n * @param {number[]} datas Accepts the collection of dates\n * @returns {number[]} Returns the collection of dates\n * @private\n */\n\n\nfunction filterDateCollectionByIndex(monthCollection, index, datas) {\n  for (var week = 0; week < monthCollection[index].length; week++) {\n    datas.push(monthCollection[index][week]);\n  }\n\n  return datas;\n}\n/**\n * To insert processed date collection in final array element\n *\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} dayData Accepts the date index\n * @returns {void}\n * @private\n */\n\n\nfunction insertDateCollection(state, startDate, endDate, data, ruleObject, dayData) {\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var chDate = new Date(dayData);\n  state = validateRules(chDate, ruleObject);\n\n  if (chDate >= startDate && compareDates(chDate, endDate) && state && expectedCount && data.length + ruleObject.recExceptionCount < expectedCount) {\n    excludeDateHandler(data, dayData);\n  }\n}\n/**\n * Return the last week number of given month and year.\n *\n * @param {number} year Accepts the Year in number format\n * @param {number} startDayOfWeek Accepts the start date\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {number} week Accepts the week in number format\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {number} returns week number\n * @private\n */\n\n\nfunction weekCount(year, startDayOfWeek, monthCollection, week, ruleObject) {\n  var firstDayOfWeek = startDayOfWeek || 0;\n  var firstOfMonth = new Date(year, ruleObject.month[0] - 1, 1);\n  var lastOfMonth = new Date(year, ruleObject.month[0] - 1, 0);\n  var numberOfDaysInMonth = lastOfMonth.getDate();\n  var firstWeekDay = (firstOfMonth.getDay() - firstDayOfWeek + 7) % 7;\n  var used = firstWeekDay + numberOfDaysInMonth;\n  var count = Math.ceil(used / 7) - 1;\n  var dayData = monthCollection[week][count];\n  var chDate = new Date(dayData);\n  var state = validateRules(chDate, ruleObject);\n  return state ? count : count - 1;\n}\n/**\n * To process date collection based on Byset position after process the collection based on BYDAY property value index: EX:BYDAY=1SUm-1SU\n *\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction insertDateCollectionBasedonBySetPos(monthCollection, state, startDate, endDate, data, ruleObject) {\n  if (monthCollection.length > 0) {\n    for (var week = 0; week < monthCollection.length; week++) {\n      monthCollection[week].sort();\n      var expectedDays = ruleObject.day;\n      var isHavingNumber = expectedDays.map(function (item) {\n        return HASNUMBER.test(item);\n      });\n      var weekIndex = ruleObject.freq === 'YEARLY' && ruleObject.validRules.indexOf('BYMONTH') > -1 && !(isHavingNumber.indexOf(true) > -1) ? weekCount(new Date(monthCollection[0][0]).getFullYear(), 0, monthCollection, week, ruleObject) : monthCollection[week].length + ruleObject.setPosition;\n      var index = ruleObject.setPosition < 1 ? weekIndex : ruleObject.setPosition - 1;\n      var dayData = monthCollection[week][index];\n      insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);\n    }\n  }\n}\n/**\n * To insert datas into existing collection which is processed from previous loop.\n *\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} index Accepts the index value\n * @returns {void}\n * @private\n */\n\n\nfunction insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index) {\n  if (monthCollection.length > 0) {\n    index = !isNullOrUndefined(index) ? index : ruleObject.setPosition < 1 ? monthCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;\n    monthCollection[index].sort();\n\n    for (var week = 0; week < monthCollection[index].length; week++) {\n      var dayData = monthCollection[index][week];\n      insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);\n    }\n  }\n}\n/**\n * Internal method to compare dates\n *\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @returns {boolean} Returns the result of checking start and end dates\n * @private\n */\n\n\nfunction compareDates(startDate, endDate) {\n  return endDate ? startDate <= endDate : true;\n}\n/**\n * Internal method to get day string\n *\n * @param {string} expectedDays Accepts the exception date string\n * @returns {string} Returns the valid string\n * @private\n */\n\n\nfunction getDayString(expectedDays) {\n  // To get BYDAY value without numeric value\n  var newstr = expectedDays.replace(REMOVENUMBERINSTRING, '');\n  return newstr;\n}\n/**\n * Internal method to check day index\n *\n * @param {number} day Accepts the day index\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {boolean} Returns the index date\n * @private\n */\n\n\nfunction checkDayIndex(day, expectedDays) {\n  var sortedExpectedDays = [];\n  expectedDays.forEach(function (element) {\n    var expectedDaysNumberSplit = element.match(SPLITNUMBERANDSTRING);\n\n    if (expectedDaysNumberSplit.length === 2) {\n      sortedExpectedDays.push(expectedDaysNumberSplit[1]);\n    } else {\n      sortedExpectedDays.push(expectedDaysNumberSplit[0]);\n    }\n  });\n  return sortedExpectedDays.indexOf(DAYINDEX[day]) === -1;\n}\n/**\n * Internal method to get start date of week\n *\n * @param {Date} startDate Accepts the start date\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {Date} Return the week start date\n * @private\n */\n\n\nfunction getStartDateForWeek(startDate, expectedDays) {\n  var tempDate = new Date(startDate.getTime());\n  var newstr;\n\n  if (expectedDays.length > 0) {\n    var expectedDaysArr = [];\n\n    for (var i = 0; i <= expectedDays.length - 1; i++) {\n      newstr = getDayString(expectedDays[i]);\n      expectedDaysArr.push(newstr);\n    }\n\n    if (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1) {\n      do {\n        tempDate.setDate(tempDate.getDate() + 1);\n      } while (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1);\n    }\n  }\n\n  return tempDate;\n}\n/**\n * Method to generate recurrence rule object from given rule\n *\n * @param {string} rules Accepts the recurrence rule\n * @returns {RecRule} Returns the recurrence rule object\n */\n\n\nexport function extractObjectFromRule(rules) {\n  var ruleObject = {\n    freq: null,\n    interval: 1,\n    count: null,\n    until: null,\n    day: [],\n    wkst: null,\n    month: [],\n    weekNo: [],\n    monthDay: [],\n    yearDay: [],\n    setPosition: null,\n    validRules: []\n  };\n  var rulesList = rules.split(';');\n  var splitData = [];\n  var temp;\n  rulesList.forEach(function (data) {\n    splitData = data.split('=');\n\n    switch (splitData[0]) {\n      case 'UNTIL':\n        temp = splitData[1];\n        ruleObject.until = getDateFromRecurrenceDateString(temp);\n        break;\n\n      case 'BYDAY':\n        ruleObject.day = splitData[1].split(',');\n        ruleObject.validRules.push(splitData[0]);\n        break;\n\n      case 'BYMONTHDAY':\n        ruleObject.monthDay = splitData[1].split(',').map(Number);\n        ruleObject.validRules.push(splitData[0]);\n        break;\n\n      case 'BYMONTH':\n        ruleObject.month = splitData[1].split(',').map(Number);\n        ruleObject.validRules.push(splitData[0]);\n        break;\n\n      case 'BYYEARDAY':\n        ruleObject.yearDay = splitData[1].split(',').map(Number);\n        ruleObject.validRules.push(splitData[0]);\n        break;\n\n      case 'BYWEEKNO':\n        ruleObject.weekNo = splitData[1].split(',').map(Number);\n        ruleObject.validRules.push(splitData[0]);\n        break;\n\n      case 'INTERVAL':\n        ruleObject.interval = parseInt(splitData[1], 10);\n        break;\n\n      case 'COUNT':\n        ruleObject.count = parseInt(splitData[1], 10);\n        break;\n\n      case 'BYSETPOS':\n        ruleObject.setPosition = parseInt(splitData[1], 10) > 4 ? -1 : parseInt(splitData[1], 10);\n        break;\n\n      case 'FREQ':\n        ruleObject.freq = splitData[1];\n        break;\n\n      case 'WKST':\n        ruleObject.wkst = splitData[1];\n        break;\n    }\n  });\n\n  if (ruleObject.freq === 'MONTHLY' && ruleObject.monthDay.length === 0) {\n    var index = ruleObject.validRules.indexOf('BYDAY');\n    ruleObject.validRules.splice(index, 1);\n  }\n\n  return ruleObject;\n}\n/**\n * Internal method to validate proper date\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number} data Accepts the data value\n * @param {Date} startDate Accepts the start date\n * @returns {boolean} Returns the result of date validate\n * @private\n */\n\nfunction validateProperDate(tempDate, data, startDate) {\n  var maxDate = calendarUtil.getMonthDaysCount(tempDate);\n  return data <= maxDate && tempDate >= startDate;\n}\n/**\n * Internal method to process week days\n *\n * @param {string[]} expectedDays Accepts the expection dates\n * @returns {Object} Returns the weekdays object\n * @private\n */\n\n\nfunction processWeekDays(expectedDays) {\n  var dayCycle = {};\n  expectedDays.forEach(function (element, index) {\n    if (index === expectedDays.length - 1) {\n      var startIndex = dayIndex.indexOf(element);\n      var temp = startIndex;\n\n      while (temp % 7 !== dayIndex.indexOf(expectedDays[0])) {\n        temp++;\n      }\n\n      dayCycle[element] = temp - startIndex;\n    } else {\n      dayCycle[element] = dayIndex.indexOf(expectedDays[index + 1]) - dayIndex.indexOf(element);\n    }\n  });\n  return dayCycle;\n}\n/**\n * Internal method to check date\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number[]} expectedDate Accepts the exception dates\n * @returns {boolean} Returns the boolean value\n * @private\n */\n\n\nfunction checkDate(tempDate, expectedDate) {\n  var temp = expectedDate.slice(0);\n  var data;\n  var maxDate = calendarUtil.getMonthDaysCount(tempDate);\n  data = temp.shift();\n\n  while (data) {\n    if (data < 0) {\n      data = data + maxDate + 1;\n    }\n\n    if (data === tempDate.getDate()) {\n      return false;\n    }\n\n    data = temp.shift();\n  }\n\n  return true;\n}\n/**\n * Internal method to check the year value\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number[]} expectedyearDay Accepts the exception dates in year\n * @returns {boolean} Returns the boolean value\n * @private\n */\n\n\nfunction checkYear(tempDate, expectedyearDay) {\n  var temp = expectedyearDay.slice(0);\n  var data;\n  var yearDay = getYearDay(tempDate);\n  data = temp.shift();\n\n  while (data) {\n    if (data < 0) {\n      data = data + calendarUtil.getYearDaysCount(tempDate, 0) + 1;\n    }\n\n    if (data === yearDay) {\n      return false;\n    }\n\n    data = temp.shift();\n  }\n\n  return true;\n}\n/**\n * Internal method to get the year day\n *\n * @param {Date} currentDate Accepts the date value\n * @returns {number} Returns the boolean value\n * @private\n */\n\n\nfunction getYearDay(currentDate) {\n  if (!startDateCollection[calendarUtil.getFullYear(currentDate)]) {\n    startDateCollection[calendarUtil.getFullYear(currentDate)] = calendarUtil.getYearLastDate(currentDate, 0);\n  }\n\n  var tempDate = startDateCollection[calendarUtil.getFullYear(currentDate)];\n  var diff = currentDate.getTime() - tempDate.getTime();\n  return Math.ceil(diff / MS_PER_DAY);\n}\n/**\n * Internal method to validate monthly rule type\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {MonthlyType} Returns the monthly type object\n * @private\n */\n\n\nfunction validateMonthlyRuleType(ruleObject) {\n  if (ruleObject.monthDay.length && !ruleObject.day.length) {\n    return 'date';\n  } else if (!ruleObject.monthDay.length && ruleObject.day.length) {\n    return 'day';\n  }\n\n  return 'both';\n}\n/**\n * Internal method to re-order the week days based on first day of week\n *\n * @param {string[]} days Accepts the week days value\n * @returns {void}\n * @private\n */\n\n\nfunction rotate(days) {\n  var data = days.shift();\n  days.push(data);\n}\n/**\n * Internal method to set first day of week\n *\n * @param {string} day Accepts the first day string\n * @returns {void}\n * @private\n */\n\n\nfunction setFirstDayOfWeek(day) {\n  while (dayIndex[0] !== day) {\n    rotate(dayIndex);\n  }\n}\n/**\n * Internal method to validate recurrence rule\n *\n * @param {Date} tempDate Accepts the date value\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {boolean} Returns the boolean value\n * @private\n */\n\n\nfunction validateRules(tempDate, ruleObject) {\n  var state = true;\n  var expectedDays = ruleObject.day;\n  var expectedMonth = ruleObject.month;\n  var expectedDate = calendarUtil.getExpectedDays(tempDate, ruleObject.monthDay);\n  var expectedyearDay = ruleObject.yearDay;\n  ruleObject.validRules.forEach(function (rule) {\n    switch (rule) {\n      case 'BYDAY':\n        if (checkDayIndex(tempDate.getDay(), expectedDays)) {\n          state = false;\n        }\n\n        break;\n\n      case 'BYMONTH':\n        if (calendarUtil.checkMonth(tempDate, expectedMonth)) {\n          state = false;\n        }\n\n        break;\n\n      case 'BYMONTHDAY':\n        if (checkDate(tempDate, expectedDate)) {\n          state = false;\n        }\n\n        break;\n\n      case 'BYYEARDAY':\n        if (checkYear(tempDate, expectedyearDay)) {\n          state = false;\n        }\n\n        break;\n    }\n  });\n  return state;\n}\n/**\n * Internal method to get calendar util\n *\n * @param {CalendarType} calendarMode Accepts the calendar type object\n * @returns {CalendarUtil} Returns the calendar util object\n * @private\n */\n\n\nexport function getCalendarUtil(calendarMode) {\n  if (calendarMode === 'Islamic') {\n    return new Islamic();\n  }\n\n  return new Gregorian();\n}\nvar startDateCollection = {};\nvar tempExcludeDate;\nvar dayIndex = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nvar maxOccurrence;\nvar tempViewDate;\nvar calendarUtil;\nvar DAYINDEX = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nvar MAXOCCURRENCE = 43;\nvar WEEKPOS = ['first', 'second', 'third', 'fourth', 'last'];\nvar TIMES = 'summaryTimes';\nvar ON = 'summaryOn';\nvar EVERY = 'every';\nvar UNTIL = 'summaryUntil';\nvar DAYS = 'summaryDay';\nvar WEEKS = 'summaryWeek';\nvar MONTHS = 'summaryMonth';\nvar YEARS = 'summaryYear';\nvar DAYINDEXOBJECT = {\n  SU: 'sun',\n  MO: 'mon',\n  TU: 'tue',\n  WE: 'wed',\n  TH: 'thu',\n  FR: 'fri',\n  SA: 'sat'\n}; // To check string has number\n\nvar HASNUMBER = /\\d/; // To find the numbers in string\n\nvar REMOVENUMBERINSTRING = /[^A-Z]+/; // To split number and string\n\nvar SPLITNUMBERANDSTRING = /[a-z]+|[^a-z]+/gi;\n/**\n * Method to generate string from date\n *\n * @param {Date} date Accepts the date value\n * @returns {string} Returns the string value\n */\n\nexport function getRecurrenceStringFromDate(date) {\n  return [date.getUTCFullYear(), roundDateValues(date.getUTCMonth() + 1), roundDateValues(date.getUTCDate()), 'T', roundDateValues(date.getUTCHours()), roundDateValues(date.getUTCMinutes()), roundDateValues(date.getUTCSeconds()), 'Z'].join('');\n}\n/**\n * Internal method to round the date values\n *\n * @param {string | number} date Accepts the date value in either string or number format\n * @returns {string} Returns the date value in string format\n * @private\n */\n\nfunction roundDateValues(date) {\n  return ('0' + date).slice(-2);\n}","map":{"version":3,"names":["isNullOrUndefined","getDefaultDateObject","getValue","cldrData","MS_PER_DAY","addDays","resetTime","capitalizeFirstWord","Islamic","Gregorian","Timezone","generateSummary","rule","localeObject","locale","calendarType","ruleObject","extractObjectFromRule","summary","getConstant","EVERY","cldrObj","cldrObj1","calendarMode","toLowerCase","nameSpace1","nameSpace","interval","freq","DAYS","WEEKS","ON","day","forEach","index","DAYINDEXOBJECT","length","MONTHS","getMonthSummary","YEARS","month","toString","count","TIMES","until","tempDate","UNTIL","getDate","getMonth","getFullYear","localeObj","monthDay","pos","setPosition","WEEKPOS","generate","startDate","excludeDate","startDayOfWeek","maximumCount","viewDate","oldTimezone","newTimezone","MAXOCCURRENCE","cacheDate","calendarUtil","getCalendarUtil","data","modifiedDate","Date","getTime","tempExcludeDate","split","tz","content","parsedDate","getDateFromRecurrenceDateString","convert","push","setHours","recExceptionCount","tempViewDate","setDate","maxOccurrence","setFirstDayOfWeek","DAYINDEX","dailyType","weeklyType","monthlyType","yearlyType","recDateString","substr","excludeDateHandler","date","zeroIndex","indexOf","getDateCount","Math","floor","endDate","expectedCount","state","expectedDays","compareDates","validateRules","getDay","weekState","wkstIndex","weekCollection","wkst","dayIndex","startDateDiff","weekstartDate","weekendDate","compareTempDate","insertDataCollection","getStartDateForWeek","ruleType","validateMonthlyRuleType","monthlyDayTypeProcessforMonthFreq","monthlyDayTypeProcess","monthlyDateTypeProcessforMonthFreq","monthlyDateTypeProcess","typeValue","checkYearlyType","processWeekNo","processYearDay","stDate","getYearLastDate","startDay","firstWeekSpan","weekNos","weekNo","maxDate","minDate","insertDateCollection","insertDatasIntoExistingCollection","dateCollection","yearDay","getLeapYearDaysCount","isLeapYear","getYearDaysCount","initializeRecRuleVariables","ruleData","monthCollection","mainDate","monthInit","setMonth","currentMonthDate","getMonthStartDate","isSameYear","checkMonth","processDateCollectionForByMonthDay","beginDate","setNextValidDate","setValidDate","setFullYear","isLastMonth","getMonthDaysCount","recRuleVariables","isByMonth","validateProperDate","monthData","addYears","getMonthCollection","dates","isHavingNumber","map","item","HASNUMBER","test","j","expectedDaysArray","match","SPLITNUMBERANDSTRING","position","parseInt","isSameMonth","isNaN","filterDateCollectionByIndex","insertDateCollectionBasedonBySetPos","dayCycleData","processWeekDays","initialDate","datas","week","row","insertDateCollectionBasedonIndex","processDateCollectionforByDayWithInteger","compareMonth","newstr","getDayString","currentDate","i","getRecurrenceCollection","recurrenceCollectionObject","expectedDaysArrays","arrPosition","getDateCollectionforBySetPosNull","recurrenceCollections","dayData","chDate","weekCount","year","firstDayOfWeek","firstOfMonth","lastOfMonth","numberOfDaysInMonth","firstWeekDay","used","ceil","sort","weekIndex","validRules","replace","REMOVENUMBERINSTRING","checkDayIndex","sortedExpectedDays","element","expectedDaysNumberSplit","expectedDaysArr","rules","rulesList","splitData","temp","Number","splice","dayCycle","startIndex","checkDate","expectedDate","slice","shift","checkYear","expectedyearDay","getYearDay","startDateCollection","diff","rotate","days","expectedMonth","getExpectedDays","SU","MO","TU","WE","TH","FR","SA","getRecurrenceStringFromDate","getUTCFullYear","roundDateValues","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","join"],"sources":["C:/Users/shahj/OneDrive/Documents/GitHub/Multifunctional-React-Dashboard/node_modules/@syncfusion/ej2-schedule/src/recurrence-editor/date-generator.js"],"sourcesContent":["/* eslint-disable max-len */\nimport { isNullOrUndefined, getDefaultDateObject, getValue, cldrData } from '@syncfusion/ej2-base';\nimport { MS_PER_DAY, addDays, resetTime, capitalizeFirstWord } from '../schedule/base/util';\nimport { Islamic, Gregorian } from '../common/calendar-util';\nimport { Timezone } from '../schedule/timezone/timezone';\n/**\n * Date Generator from Recurrence Rule\n */\n/**\n * Generate Summary from Recurrence Rule\n *\n * @param {string} rule Accepts the Recurrence rule\n * @param {L10n} localeObject Accepts the locale object\n * @param {string} locale Accepts the locale name\n * @param {CalendarType} calendarType Accepts the calendar type\n * @returns {string} Returns the summary string from given recurrence rule\n */\nexport function generateSummary(rule, localeObject, locale, calendarType) {\n    if (calendarType === void 0) { calendarType = 'Gregorian'; }\n    var ruleObject = extractObjectFromRule(rule);\n    var summary = localeObject.getConstant(EVERY) + ' ';\n    var cldrObj;\n    var cldrObj1;\n    var calendarMode = calendarType.toLowerCase();\n    if (locale === 'en' || locale === 'en-US') {\n        var nameSpace1 = 'months.stand-alone.abbreviated';\n        var nameSpace = 'days.stand-alone.abbreviated';\n        cldrObj1 = (getValue(nameSpace1, getDefaultDateObject(calendarMode)));\n        cldrObj = (getValue(nameSpace, getDefaultDateObject(calendarMode)));\n    }\n    else {\n        var nameSpace1 = 'main.' + locale + '.dates.calendars.' + calendarMode + '.months.stand-alone.abbreviated';\n        var nameSpace = 'main.' + locale + '.dates.calendars.' + calendarMode + '.days.stand-alone.abbreviated';\n        cldrObj1 =\n            (getValue(nameSpace1, cldrData));\n        cldrObj =\n            (getValue(nameSpace, cldrData));\n    }\n    if (ruleObject.interval > 1) {\n        summary += ruleObject.interval + ' ';\n    }\n    switch (ruleObject.freq) {\n        case 'DAILY':\n            summary += localeObject.getConstant(DAYS);\n            break;\n        case 'WEEKLY':\n            summary += localeObject.getConstant(WEEKS) + ' ' + localeObject.getConstant(ON) + ' ';\n            ruleObject.day.forEach(function (day, index) {\n                summary += capitalizeFirstWord(getValue(DAYINDEXOBJECT[day], cldrObj), 'single');\n                summary += (((ruleObject.day.length - 1) === index) ? '' : ', ');\n            });\n            break;\n        case 'MONTHLY':\n            summary += localeObject.getConstant(MONTHS) + ' ' + localeObject.getConstant(ON) + ' ';\n            summary += getMonthSummary(ruleObject, cldrObj, localeObject);\n            break;\n        case 'YEARLY':\n            summary += localeObject.getConstant(YEARS) + ' ' + localeObject.getConstant(ON) + ' ';\n            summary += capitalizeFirstWord(getValue((ruleObject.month[0]).toString(), cldrObj1), 'single') + ' ';\n            summary += getMonthSummary(ruleObject, cldrObj, localeObject);\n            break;\n    }\n    if (ruleObject.count) {\n        summary += ', ' + (ruleObject.count) + ' ' + localeObject.getConstant(TIMES);\n    }\n    else if (ruleObject.until) {\n        var tempDate = ruleObject.until;\n        summary += ', ' + localeObject.getConstant(UNTIL)\n            + ' ' + tempDate.getDate()\n            + ' ' + capitalizeFirstWord(getValue((tempDate.getMonth() + 1).toString(), cldrObj1), 'single')\n            + ' ' + tempDate.getFullYear();\n    }\n    return summary;\n}\n/**\n * Generates Month summary\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {string[]} cldrObj Accepts the collections of month name from calendar\n * @param {L10n} localeObj Accepts the locale object\n * @returns {string} Returns the month summary string from given recurrence rule object\n * @private\n */\nfunction getMonthSummary(ruleObject, cldrObj, localeObj) {\n    var summary = '';\n    if (ruleObject.monthDay.length) {\n        summary += ruleObject.monthDay[0];\n    }\n    else if (ruleObject.day) {\n        var pos = ruleObject.setPosition - 1;\n        summary += localeObj.getConstant(WEEKPOS[pos > -1 ? pos : (WEEKPOS.length - 1)])\n            + ' ' + capitalizeFirstWord(getValue(DAYINDEXOBJECT[ruleObject.day[0]], cldrObj), 'single');\n    }\n    return summary;\n}\n/**\n * Generates the date collections from the given recurrence rule\n *\n * @param {Date} startDate Accepts the rule start date\n * @param {string} rule Accepts the recurrence rule\n * @param {string} excludeDate Accepts the exception dates in string format\n * @param {number} startDayOfWeek Accepts the start day index of week\n * @param {number} maximumCount Accepts the maximum number count to generate date collections\n * @param {Date} viewDate Accepts the current date instead of start date\n * @param {CalendarType} calendarMode Accepts the calendar type\n * @param {string} oldTimezone Accepts the timezone name\n * @param {string} newTimezone Accepts the timezone name\n * @returns {number[]} Returns the collection of dates\n */\nexport function generate(startDate, rule, excludeDate, startDayOfWeek, maximumCount, viewDate, calendarMode, oldTimezone, newTimezone) {\n    if (maximumCount === void 0) { maximumCount = MAXOCCURRENCE; }\n    if (viewDate === void 0) { viewDate = null; }\n    if (calendarMode === void 0) { calendarMode = 'Gregorian'; }\n    if (oldTimezone === void 0) { oldTimezone = null; }\n    if (newTimezone === void 0) { newTimezone = null; }\n    var ruleObject = extractObjectFromRule(rule);\n    var cacheDate;\n    calendarUtil = getCalendarUtil(calendarMode);\n    var data = [];\n    var modifiedDate = new Date(startDate.getTime());\n    tempExcludeDate = [];\n    var tempDate = isNullOrUndefined(excludeDate) ? [] : excludeDate.split(',');\n    var tz = new Timezone();\n    tempDate.forEach(function (content) {\n        var parsedDate = getDateFromRecurrenceDateString(content);\n        if (oldTimezone && newTimezone) {\n            parsedDate = tz.convert(new Date(parsedDate.getTime()), oldTimezone, newTimezone);\n        }\n        tempExcludeDate.push(new Date(parsedDate.getTime()).setHours(0, 0, 0, 0));\n    });\n    ruleObject.recExceptionCount = !isNullOrUndefined(ruleObject.count) ? tempExcludeDate.length : 0;\n    if (viewDate && viewDate > startDate && !ruleObject.count) {\n        tempViewDate = new Date(new Date(viewDate.getTime()).setHours(0, 0, 0));\n    }\n    else {\n        tempViewDate = null;\n    }\n    if (!ruleObject.until && tempViewDate) {\n        cacheDate = new Date(tempViewDate.getTime());\n        cacheDate.setDate(tempViewDate.getDate() + maximumCount * (ruleObject.interval));\n        ruleObject.until = cacheDate;\n    }\n    if (ruleObject.until && startDate > ruleObject.until) {\n        return data;\n    }\n    maxOccurrence = maximumCount;\n    setFirstDayOfWeek(DAYINDEX[startDayOfWeek]);\n    switch (ruleObject.freq) {\n        case 'DAILY':\n            dailyType(modifiedDate, ruleObject.until, data, ruleObject);\n            break;\n        case 'WEEKLY':\n            weeklyType(modifiedDate, ruleObject.until, data, ruleObject);\n            break;\n        case 'MONTHLY':\n            monthlyType(modifiedDate, ruleObject.until, data, ruleObject);\n            break;\n        case 'YEARLY':\n            yearlyType(modifiedDate, ruleObject.until, data, ruleObject);\n    }\n    return data;\n}\n/**\n * Generate date object from given date string\n *\n * @param {string} recDateString Accepts the exception date as string\n * @returns {Date} Returns the date from exception date string\n */\nexport function getDateFromRecurrenceDateString(recDateString) {\n    return new Date(recDateString.substr(0, 4) +\n        '-' + recDateString.substr(4, 2) +\n        '-' + recDateString.substr(6, 5) +\n        ':' + recDateString.substr(11, 2) +\n        ':' + recDateString.substr(13));\n}\n/**\n * Internal method to handle exclude date\n *\n * @param {number[]} data Accepts the exception date collections\n * @param {number} date Accepts the new exclude date\n * @returns {void}\n * @private\n */\nfunction excludeDateHandler(data, date) {\n    var zeroIndex = new Date(date).setHours(0, 0, 0, 0);\n    if (tempExcludeDate.indexOf(zeroIndex) === -1 && (!tempViewDate || zeroIndex >= tempViewDate.getTime())) {\n        data.push(date);\n    }\n}\n/**\n * Internal method for get date count\n *\n * @param {Date} startDate Accepts the date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {number} Returns the number of date count\n * @private\n */\nfunction getDateCount(startDate, ruleObject) {\n    var count = maxOccurrence;\n    if (ruleObject.count) {\n        count = ruleObject.count;\n    }\n    else if (ruleObject.until) {\n        if (ruleObject.freq === 'DAILY' || ruleObject.freq === 'WEEKLY') {\n            count = Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1;\n        }\n        else if (ruleObject.freq === 'MONTHLY' || ruleObject.freq === 'YEARLY') {\n            count = Math.floor(((ruleObject.until.getMonth() + 12 * ruleObject.until.getFullYear()) -\n                (startDate.getMonth() + 12 * startDate.getFullYear())) / ruleObject.interval) +\n                (ruleObject.day.length > 1 ? (Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1) : 1);\n            if (ruleObject.freq === 'YEARLY') {\n                count = ruleObject.month.length > 1 ? (count * ruleObject.month.length) : count;\n            }\n        }\n    }\n    return count;\n}\n/**\n *  Internal method for daily type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction dailyType(startDate, endDate, data, ruleObject) {\n    var tempDate = new Date(startDate.getTime());\n    var interval = ruleObject.interval;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var state;\n    var expectedDays = ruleObject.day;\n    while (compareDates(tempDate, endDate)) {\n        state = true;\n        state = validateRules(tempDate, ruleObject);\n        if (state && (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1 || expectedDays.length === 0)) {\n            excludeDateHandler(data, tempDate.getTime());\n            if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                break;\n            }\n        }\n        tempDate.setDate(tempDate.getDate() + interval);\n    }\n}\n/**\n * Internal method for weekly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction weeklyType(startDate, endDate, data, ruleObject) {\n    var tempDate = new Date(startDate.getTime());\n    if (!ruleObject.day.length) {\n        ruleObject.day.push(DAYINDEX[startDate.getDay()]);\n    }\n    var interval = ruleObject.interval;\n    var expectedDays = ruleObject.day;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var weekState = true;\n    var wkstIndex;\n    var weekCollection = [];\n    if (expectedDays.length > 1) {\n        if (isNullOrUndefined(ruleObject.wkst) || ruleObject.wkst === '') {\n            ruleObject.wkst = dayIndex[0];\n        }\n        wkstIndex = DAYINDEX.indexOf(ruleObject.wkst);\n        while (compareDates(tempDate, endDate)) {\n            var startDateDiff = DAYINDEX.indexOf(DAYINDEX[tempDate.getDay()]) - wkstIndex;\n            startDateDiff = startDateDiff === -1 ? 6 : startDateDiff;\n            var weekstartDate = addDays(tempDate, -startDateDiff);\n            var weekendDate = addDays(weekstartDate, 6);\n            var compareTempDate = new Date(tempDate.getTime());\n            weekendDate = resetTime(weekendDate);\n            compareTempDate = resetTime(compareTempDate);\n            while (weekendDate >= compareTempDate) {\n                if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n                    weekCollection.push([tempDate.getTime()]);\n                }\n                if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                    break;\n                }\n                tempDate.setDate(tempDate.getDate() + 1);\n                compareTempDate = new Date(tempDate.getTime());\n                compareTempDate = resetTime(compareTempDate);\n            }\n            tempDate.setDate(tempDate.getDate() - 1);\n            if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                break;\n            }\n            tempDate.setDate((tempDate.getDate()) + 1 + ((interval - 1) * 7));\n            insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);\n            weekCollection = [];\n        }\n    }\n    else {\n        tempDate = getStartDateForWeek(startDate, ruleObject.day);\n        while (compareDates(tempDate, endDate)) {\n            weekState = validateRules(tempDate, ruleObject);\n            if (weekState && (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1)) {\n                excludeDateHandler(data, tempDate.getTime());\n            }\n            if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                break;\n            }\n            tempDate.setDate(tempDate.getDate() + (interval * 7));\n        }\n        insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);\n        weekCollection = [];\n    }\n}\n/**\n *  Internal method for monthly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyType(startDate, endDate, data, ruleObject) {\n    // Set monthday value if BYDAY, BYMONTH and Month day property is not set based on start date\n    if (!ruleObject.month.length && !ruleObject.day.length && !ruleObject.monthDay.length) {\n        ruleObject.monthDay.push(startDate.getDate());\n        if (ruleObject.freq === 'YEARLY') {\n            ruleObject.month.push(startDate.getMonth() + 1);\n        }\n    }\n    else if (ruleObject.month.length > 0 && !ruleObject.day.length && !ruleObject.monthDay.length) {\n        ruleObject.monthDay.push(startDate.getDate());\n    }\n    var ruleType = validateMonthlyRuleType(ruleObject);\n    switch (ruleType) {\n        case 'day':\n            switch (ruleObject.freq) {\n                case 'MONTHLY':\n                    monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n                    break;\n                case 'YEARLY':\n                    monthlyDayTypeProcess(startDate, endDate, data, ruleObject);\n                    break;\n            }\n            break;\n        case 'both':\n        case 'date':\n            switch (ruleObject.freq) {\n                case 'MONTHLY':\n                    monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n                    break;\n                case 'YEARLY':\n                    monthlyDateTypeProcess(startDate, endDate, data, ruleObject);\n                    break;\n            }\n            break;\n    }\n}\n/**\n * Internal method for yearly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction yearlyType(startDate, endDate, data, ruleObject) {\n    var typeValue = checkYearlyType(ruleObject);\n    switch (typeValue) {\n        case 'MONTH':\n            monthlyType(startDate, endDate, data, ruleObject);\n            break;\n        case 'WEEKNO':\n            processWeekNo(startDate, endDate, data, ruleObject);\n            break;\n        case 'YEARDAY':\n            processYearDay(startDate, endDate, data, ruleObject);\n            break;\n    }\n}\n/**\n * Internal method for process week no\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction processWeekNo(startDate, endDate, data, ruleObject) {\n    var stDate = calendarUtil.getYearLastDate(startDate, 0);\n    var tempDate;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var state;\n    var startDay;\n    var firstWeekSpan;\n    var weekNos = ruleObject.weekNo;\n    var weekNo;\n    var maxDate;\n    var minDate;\n    var weekCollection = [];\n    var expectedDays = ruleObject.day;\n    while (compareDates(stDate, endDate)) {\n        startDay = dayIndex.indexOf(DAYINDEX[stDate.getDay()]);\n        firstWeekSpan = (6 - startDay) + 1;\n        for (var index = 0; index < weekNos.length; index++) {\n            weekNo = weekNos[index];\n            weekNo = (weekNo > 0) ? weekNo : 53 + weekNo + 1;\n            maxDate = (weekNo === 1) ? firstWeekSpan : firstWeekSpan + ((weekNo - 1) * 7);\n            minDate = (weekNo === 1) ? firstWeekSpan - 7 : firstWeekSpan + ((weekNo - 2) * 7);\n            while (minDate < maxDate) {\n                tempDate = new Date(stDate.getTime() + (MS_PER_DAY * minDate));\n                if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n                    if (isNullOrUndefined(ruleObject.setPosition)) {\n                        insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());\n                    }\n                    else {\n                        weekCollection.push([tempDate.getTime()]);\n                    }\n                }\n                minDate++;\n            }\n        }\n        if (!isNullOrUndefined(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(weekCollection, state, startDate, endDate, data, ruleObject);\n        }\n        if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n            return;\n        }\n        stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);\n        weekCollection = [];\n    }\n}\n/**\n * Internal method for process year day\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction processYearDay(startDate, endDate, data, ruleObject) {\n    var stDate = calendarUtil.getYearLastDate(startDate, 0);\n    var tempDate;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var state;\n    var dateCollection = [];\n    var date;\n    var expectedDays = ruleObject.day;\n    while (compareDates(stDate, endDate)) {\n        for (var index = 0; index < ruleObject.yearDay.length; index++) {\n            date = ruleObject.yearDay[index];\n            tempDate = new Date(stDate.getTime());\n            if ((date === calendarUtil.getLeapYearDaysCount() || date === -calendarUtil.getLeapYearDaysCount()) &&\n                (!calendarUtil.isLeapYear(calendarUtil.getFullYear(tempDate), 1))) {\n                tempDate.setDate(tempDate.getDate() + 1);\n                continue;\n            }\n            tempDate.setDate(tempDate.getDate() + ((date < 0) ?\n                calendarUtil.getYearDaysCount(tempDate, 1) + 1 + date : date));\n            if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n                if (ruleObject.setPosition == null) {\n                    insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());\n                }\n                else {\n                    dateCollection.push([tempDate.getTime()]);\n                }\n            }\n        }\n        if (!isNullOrUndefined(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject);\n        }\n        if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n            return;\n        }\n        stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);\n        dateCollection = [];\n    }\n}\n/**\n * Internal method to check yearly type\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {YearRuleType} Returns the Yearly rule type object\n * @private\n */\nfunction checkYearlyType(ruleObject) {\n    if (ruleObject.yearDay.length) {\n        return 'YEARDAY';\n    }\n    else if (ruleObject.weekNo.length) {\n        return 'WEEKNO';\n    }\n    return 'MONTH';\n}\n/**\n * Internal method to initialize recurrence rule variables\n *\n * @param {Date} startDate Accepts the start date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {RuleData} Return the rule data object\n * @private\n */\nfunction initializeRecRuleVariables(startDate, ruleObject) {\n    var ruleData = {\n        monthCollection: [],\n        index: 0,\n        tempDate: new Date(startDate.getTime()),\n        mainDate: new Date(startDate.getTime()),\n        expectedCount: getDateCount(startDate, ruleObject),\n        monthInit: 0,\n        dateCollection: []\n    };\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(ruleData.tempDate, ruleObject.month[0], ruleData.tempDate.getDate());\n    }\n    return ruleData;\n}\n/**\n * Internal method for process monthly date type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDateTypeProcess(startDate, endDate, data, ruleObject) {\n    if (ruleObject.month.length) {\n        monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n        return;\n    }\n    var ruleData = initializeRecRuleVariables(startDate, ruleObject);\n    var currentMonthDate;\n    ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);\n    while (compareDates(ruleData.tempDate, endDate)) {\n        currentMonthDate = new Date(ruleData.tempDate.getTime());\n        while (calendarUtil.isSameYear(currentMonthDate, ruleData.tempDate) &&\n            (ruleData.expectedCount && (data.length + ruleObject.recExceptionCount) <= ruleData.expectedCount)) {\n            if (ruleObject.month.length === 0 || (ruleObject.month.length > 0\n                && !calendarUtil.checkMonth(ruleData.tempDate, ruleObject.month))) {\n                processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, false);\n                ruleData.beginDate = new Date(ruleData.tempDate.getTime());\n                ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n            }\n            else {\n                calendarUtil.setValidDate(ruleData.tempDate, 1, 1);\n                ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n                break;\n            }\n        }\n        ruleData.tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());\n        insertDataCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);\n        if (calendarUtil.isLastMonth(ruleData.tempDate)) {\n            calendarUtil.setValidDate(ruleData.tempDate, 1, 1);\n            ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n        }\n        if (ruleData.expectedCount && (data.length + ruleObject.recExceptionCount) >= ruleData.expectedCount) {\n            return;\n        }\n        ruleData.tempDate.setFullYear(ruleData.tempDate.getFullYear() + ruleObject.interval - 1);\n        ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n        ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n        ruleData.dateCollection = [];\n    }\n}\n/**\n * Internal method for process monthly date type with month frequency from recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {\n    var ruleData = initializeRecRuleVariables(startDate, ruleObject);\n    ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);\n    if (((ruleObject.freq === 'MONTHLY' && ruleObject.interval === 12) || (ruleObject.freq === 'YEARLY')) &&\n        calendarUtil.getMonthDaysCount(startDate) < ruleObject.monthDay[0]) {\n        return;\n    }\n    while (compareDates(ruleData.tempDate, endDate)) {\n        ruleData.beginDate = new Date(ruleData.tempDate.getTime());\n        processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, true, startDate, data);\n        if (!isNullOrUndefined(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);\n        }\n        if (ruleData.expectedCount && (data.length + ruleObject.recExceptionCount) >= ruleData.expectedCount) {\n            return;\n        }\n        ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n        ruleData.dateCollection = [];\n    }\n}\n/**\n * To process date collection for Monthly & Yearly based on BYMONTH Day property\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {RuleData} recRuleVariables Accepts the rule data\n * @param {Date} endDate Accepts the end date\n * @param {boolean} isByMonth Accepts the boolean to validate either month or not\n * @param {Date} startDate Accepts the start date\n * @param {number[]} data Accepts the collection of dates\n * @returns {void}\n * @private\n */\nfunction processDateCollectionForByMonthDay(ruleObject, recRuleVariables, endDate, isByMonth, startDate, data) {\n    for (var index = 0; index < ruleObject.monthDay.length; index++) {\n        recRuleVariables.date = ruleObject.monthDay[index];\n        recRuleVariables.tempDate = calendarUtil.getMonthStartDate(recRuleVariables.tempDate);\n        var maxDate = calendarUtil.getMonthDaysCount(recRuleVariables.tempDate);\n        recRuleVariables.date = recRuleVariables.date > 0 ? recRuleVariables.date : (maxDate + recRuleVariables.date + 1);\n        if (validateProperDate(recRuleVariables.tempDate, recRuleVariables.date, recRuleVariables.mainDate)\n            && (recRuleVariables.date > 0)) {\n            calendarUtil.setDate(recRuleVariables.tempDate, recRuleVariables.date);\n            if (endDate && recRuleVariables.tempDate > endDate) {\n                return;\n            }\n            if (ruleObject.day.length === 0 || ruleObject.day.indexOf(DAYINDEX[recRuleVariables.tempDate.getDay()]) > -1) {\n                if (isByMonth && isNullOrUndefined(ruleObject.setPosition) && (recRuleVariables.expectedCount\n                    && (data.length + ruleObject.recExceptionCount) < recRuleVariables.expectedCount)) {\n                    insertDateCollection(recRuleVariables.state, startDate, endDate, data, ruleObject, recRuleVariables.tempDate.getTime());\n                }\n                else {\n                    recRuleVariables.dateCollection.push([recRuleVariables.tempDate.getTime()]);\n                }\n            }\n        }\n    }\n}\n/**\n * Internal method to set next valid date\n *\n * @param {Date} tempDate Accepts the date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} monthInit Accepts the initial month\n * @param {Date} beginDate Accepts the initial date\n * @param {number} interval Accepts the interval duration\n * @returns {number} Returnx the next valid date\n * @private\n */\nfunction setNextValidDate(tempDate, ruleObject, monthInit, beginDate, interval) {\n    if (beginDate === void 0) { beginDate = null; }\n    var monthData = beginDate ? beginDate.getMonth() : 0;\n    var startDate = calendarUtil.getMonthStartDate(tempDate);\n    interval = isNullOrUndefined(interval) ? ruleObject.interval : interval;\n    tempDate.setFullYear(startDate.getFullYear());\n    tempDate.setMonth(startDate.getMonth());\n    tempDate.setDate(startDate.getDate());\n    if (ruleObject.month.length) {\n        monthInit++;\n        monthInit = monthInit % ruleObject.month.length;\n        calendarUtil.setMonth(tempDate, ruleObject.month[monthInit], 1);\n        if (monthInit === 0) {\n            calendarUtil.addYears(tempDate, interval, ruleObject.month[0]);\n        }\n    }\n    else {\n        if (beginDate && (beginDate.getFullYear() < tempDate.getFullYear())) {\n            monthData = tempDate.getMonth() - 1;\n        }\n        calendarUtil.setValidDate(tempDate, interval, 1, monthData, beginDate);\n    }\n    return monthInit;\n}\n/**\n * To get month collection when BYDAY property having more than one value in list.\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction getMonthCollection(startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    var tempDate = new Date(startDate.getTime());\n    tempDate = calendarUtil.getMonthStartDate(tempDate);\n    var monthCollection = [];\n    var dateCollection = [];\n    var dates = [];\n    var index;\n    var state;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var monthInit = 0;\n    var beginDate;\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n    }\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    while (compareDates(tempDate, endDate)\n        && (expectedCount && (data.length + ruleObject.recExceptionCount) < expectedCount)) {\n        var currentMonthDate = new Date(tempDate.getTime());\n        var isHavingNumber = expectedDays.map(function (item) { return HASNUMBER.test(item); });\n        if (isHavingNumber.indexOf(true) > -1) {\n            for (var j = 0; j <= expectedDays.length - 1; j++) {\n                var expectedDaysArray = expectedDays[j].match(SPLITNUMBERANDSTRING);\n                var position = parseInt(expectedDaysArray[0], 10);\n                tempDate = new Date(tempDate.getTime());\n                tempDate = calendarUtil.getMonthStartDate(tempDate);\n                tempDate = getStartDateForWeek(tempDate, expectedDays);\n                currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());\n                while (calendarUtil.isSameYear(currentMonthDate, tempDate) && calendarUtil.isSameMonth(currentMonthDate, tempDate)) {\n                    if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentMonthDate.getDay()]) {\n                        monthCollection.push([currentMonthDate.getTime()]);\n                    }\n                    currentMonthDate.setDate(currentMonthDate.getDate() + (1));\n                }\n                currentMonthDate.setDate(currentMonthDate.getDate() - (1));\n                if (expectedDaysArray[0].indexOf('-') > -1) {\n                    index = monthCollection.length - (-1 * position);\n                }\n                else {\n                    index = position - 1;\n                }\n                index = isNaN(index) ? 0 : index;\n                if (monthCollection.length > 0) {\n                    if (isNullOrUndefined(ruleObject.setPosition)) {\n                        insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n                    }\n                    else {\n                        dateCollection = [(filterDateCollectionByIndex(monthCollection, index, dates))];\n                    }\n                }\n                if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                    return;\n                }\n                monthCollection = [];\n            }\n            if (!isNullOrUndefined(ruleObject.setPosition)) {\n                insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n                dates = [];\n            }\n            monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n            monthCollection = [];\n        }\n        else {\n            var weekCollection = [];\n            var dayCycleData = processWeekDays(expectedDays);\n            currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());\n            var initialDate = new Date(tempDate.getTime());\n            beginDate = new Date(tempDate.getTime());\n            while (calendarUtil.isSameMonth(initialDate, tempDate)) {\n                weekCollection.push(tempDate.getTime());\n                if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n                    monthCollection.push(weekCollection);\n                    weekCollection = [];\n                }\n                tempDate.setDate(tempDate.getDate()\n                    + dayCycleData[DAYINDEX[tempDate.getDay()]]);\n            }\n            index = ((ruleObject.setPosition < 1) ? (monthCollection.length + ruleObject.setPosition) : ruleObject.setPosition - 1);\n            if (isNullOrUndefined(ruleObject.setPosition)) {\n                index = 0;\n                var datas = [];\n                for (var week = 0; week < monthCollection.length; week++) {\n                    for (var row = 0; row < monthCollection[week].length; row++) {\n                        datas.push(monthCollection[week][row]);\n                    }\n                }\n                monthCollection = [datas];\n            }\n            if (monthCollection.length > 0) {\n                insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n            }\n            if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                return;\n            }\n            monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n            monthCollection = [];\n        }\n    }\n}\n/**\n * To process monday day type for FREQ=MONTHLY\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    // When BYDAY property having more than 1 value.\n    if (expectedDays.length > 1) {\n        getMonthCollection(startDate, endDate, data, ruleObject);\n        return;\n    }\n    var tempDate = new Date(startDate.getTime());\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var monthCollection = [];\n    var beginDate;\n    var monthInit = 0;\n    tempDate = calendarUtil.getMonthStartDate(tempDate);\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n    }\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    while (compareDates(tempDate, endDate) && (expectedCount && (data.length + ruleObject.recExceptionCount) < expectedCount)) {\n        beginDate = new Date(tempDate.getTime());\n        var currentMonthDate = new Date(tempDate.getTime());\n        while (calendarUtil.isSameMonth(tempDate, currentMonthDate)) {\n            monthCollection.push([currentMonthDate.getTime()]);\n            currentMonthDate.setDate(currentMonthDate.getDate() + (7));\n        }\n        // To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n        insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);\n        monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        monthCollection = [];\n    }\n}\n/**\n * To process monday day type for FREQ=YEARLY\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDayTypeProcess(startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    var isHavingNumber = expectedDays.map(function (item) { return HASNUMBER.test(item); });\n    // If BYDAY property having more than 1 value in list\n    if (expectedDays.length > 1 && isHavingNumber.indexOf(true) > -1) {\n        processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject);\n        return;\n    }\n    else if (ruleObject.month.length && expectedDays.length === 1 && isHavingNumber.indexOf(true) > -1) {\n        monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n        return;\n    }\n    var tempDate = new Date(startDate.getTime());\n    var currentMonthDate;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var interval = ruleObject.interval;\n    var monthCollection = [];\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());\n    }\n    // Set the date as start date of the yeear if yearly freq having ByDay property alone\n    if (isNullOrUndefined(ruleObject.setPosition) && ruleObject.month.length === 0 && ruleObject.weekNo.length === 0) {\n        tempDate.setFullYear(startDate.getFullYear(), 0, 1);\n    }\n    tempDate = calendarUtil.getMonthStartDate(tempDate);\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    while (compareDates(tempDate, endDate)) {\n        currentMonthDate = new Date(tempDate.getTime());\n        while (calendarUtil.isSameYear(currentMonthDate, tempDate) &&\n            (expectedCount && (data.length + ruleObject.recExceptionCount) <= expectedCount)) {\n            currentMonthDate = new Date(tempDate.getTime());\n            while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {\n                if (ruleObject.month.length === 0 || (ruleObject.month.length > 0\n                    && !calendarUtil.checkMonth(tempDate, ruleObject.month))) {\n                    if (expectedDays.length > 1) {\n                        if (calendarUtil.compareMonth(currentMonthDate, tempDate)) {\n                            calendarUtil.setValidDate(tempDate, 1, 1);\n                            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                            break;\n                        }\n                        if (expectedDays.indexOf(DAYINDEX[currentMonthDate.getDay()]) > -1) {\n                            monthCollection.push([currentMonthDate.getTime()]);\n                        }\n                        currentMonthDate.setDate(currentMonthDate.getDate() + (1));\n                    }\n                    else {\n                        // If BYDAY property having 1 value in list\n                        if (currentMonthDate.getFullYear() > tempDate.getFullYear()) {\n                            calendarUtil.setValidDate(tempDate, 1, 1);\n                            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                            break;\n                        }\n                        var newstr = getDayString(expectedDays[0]);\n                        if (DAYINDEX[currentMonthDate.getDay()] === newstr\n                            && new Date(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), 0)\n                                > new Date(startDate.getFullYear())) {\n                            monthCollection.push([currentMonthDate.getTime()]);\n                        }\n                        currentMonthDate.setDate(currentMonthDate.getDate() + (7));\n                    }\n                }\n                else {\n                    calendarUtil.setValidDate(tempDate, 1, 1);\n                    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                    break;\n                }\n            }\n        }\n        tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());\n        // To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n        insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);\n        if (calendarUtil.isLastMonth(tempDate)) {\n            calendarUtil.setValidDate(tempDate, 1, 1);\n            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        }\n        tempDate.setFullYear(tempDate.getFullYear() + interval - 1);\n        if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n            return;\n        }\n        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        monthCollection = [];\n    }\n}\n/**\n * To process the recurrence rule when BYDAY property having values with integer\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var tempDate = new Date(startDate.getTime());\n    var interval = ruleObject.interval;\n    var monthCollection = [];\n    var dateCollection = [];\n    var index;\n    var state;\n    var monthInit = 0;\n    var currentMonthDate;\n    var currentDate;\n    var beginDate;\n    tempDate = calendarUtil.getMonthStartDate(tempDate);\n    var datas = [];\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n    }\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    while (compareDates(tempDate, endDate)) {\n        currentMonthDate = new Date(tempDate.getTime());\n        for (var i = 0; i <= ruleObject.month.length; i++) {\n            for (var j = 0; j <= expectedDays.length - 1; j++) {\n                tempDate = calendarUtil.getMonthStartDate(tempDate);\n                tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                monthCollection = [];\n                while (calendarUtil.isSameYear(currentMonthDate, tempDate) &&\n                    (expectedCount && (data.length + ruleObject.recExceptionCount) <= expectedCount)) {\n                    while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {\n                        currentMonthDate = new Date(tempDate.getTime());\n                        if (ruleObject.month.length === 0 ||\n                            (ruleObject.month.length > 0 && ruleObject.month[i] === calendarUtil.getMonth(currentMonthDate))) {\n                            var expectedDaysArray = expectedDays[j].match(SPLITNUMBERANDSTRING);\n                            var position = parseInt(expectedDaysArray[0], 10);\n                            currentDate = new Date(tempDate.getTime());\n                            while (calendarUtil.isSameYear(currentDate, tempDate)\n                                && calendarUtil.isSameMonth(currentDate, tempDate)) {\n                                if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentDate.getDay()]) {\n                                    monthCollection.push([currentDate.getTime()]);\n                                }\n                                currentDate.setDate(currentDate.getDate() + (1));\n                            }\n                            currentDate.setDate(currentDate.getDate() - (1));\n                            if (expectedDaysArray[0].indexOf('-') > -1) {\n                                index = monthCollection.length - (-1 * position);\n                            }\n                            else {\n                                index = position - 1;\n                            }\n                            index = isNaN(index) ? 0 : index;\n                        }\n                        monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate, 1);\n                        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                    }\n                }\n                tempDate = j === 0 && currentDate ? new Date(currentDate.getTime()) : new Date(currentMonthDate.getTime());\n                if (monthCollection.length > 0) {\n                    if (isNullOrUndefined(ruleObject.setPosition)) {\n                        insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n                    }\n                    else {\n                        dateCollection = [(filterDateCollectionByIndex(monthCollection, index, datas))];\n                    }\n                }\n                if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                    return;\n                }\n            }\n        }\n        if (!isNullOrUndefined(ruleObject.setPosition)) {\n            insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n            datas = [];\n        }\n        if (calendarUtil.isLastMonth(tempDate)) {\n            calendarUtil.setValidDate(tempDate, 1, 1);\n            tempDate.setFullYear(tempDate.getFullYear() + interval - 1);\n        }\n        else {\n            tempDate.setFullYear(tempDate.getFullYear() + interval);\n        }\n        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        if (ruleObject.month.length) {\n            calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());\n        }\n    }\n}\n/**\n * To get recurrence collection if BYSETPOS is null\n *\n * @param {number[]} monthCollection Accepts the month collection dates\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {RuleData} Returns the rule data object\n * @private\n */\nfunction getRecurrenceCollection(monthCollection, expectedDays) {\n    var index;\n    var recurrenceCollectionObject = { monthCollection: [], index: 0 };\n    if (expectedDays.length === 1) {\n        // To split numeric value from BYDAY property value\n        var expectedDaysArrays = expectedDays[0].match(SPLITNUMBERANDSTRING);\n        var arrPosition = void 0;\n        if (expectedDaysArrays.length > 1) {\n            arrPosition = parseInt(expectedDaysArrays[0], 10);\n            index = ((arrPosition < 1) ? (monthCollection.length + arrPosition) : arrPosition - 1);\n        }\n        else {\n            index = 0;\n            monthCollection = getDateCollectionforBySetPosNull(monthCollection);\n        }\n    }\n    else {\n        index = 0;\n        monthCollection = getDateCollectionforBySetPosNull(monthCollection);\n    }\n    recurrenceCollectionObject.monthCollection = monthCollection;\n    recurrenceCollectionObject.index = index;\n    return recurrenceCollectionObject;\n}\n/**\n * Internal method to process the data collections\n *\n * @param {number[]} dateCollection Accepts the date collections\n * @param {boolean} state Accepts the state\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of numbers\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction insertDataCollection(dateCollection, state, startDate, endDate, data, ruleObject) {\n    var index = ((ruleObject.setPosition < 1) ?\n        (dateCollection.length + ruleObject.setPosition) : ruleObject.setPosition - 1);\n    if (isNullOrUndefined(ruleObject.setPosition)) {\n        index = 0;\n        dateCollection = getDateCollectionforBySetPosNull(dateCollection);\n    }\n    if (dateCollection.length > 0) {\n        insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject, index);\n    }\n}\n/**\n * To process month collection if BYSETPOS is null\n *\n * @param {number[]} monthCollection Accepts the month date collections\n * @returns {number[]} Returns the month date collections\n * @private\n */\nfunction getDateCollectionforBySetPosNull(monthCollection) {\n    var datas = [];\n    for (var week = 0; week < monthCollection.length; week++) {\n        for (var row = 0; row < monthCollection[week].length; row++) {\n            datas.push(new Date(monthCollection[week][row]).getTime());\n        }\n    }\n    monthCollection = datas.length > 0 ? [datas] : [];\n    return monthCollection;\n}\n/**\n * To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n *\n * @param {number[]} monthCollection Accepts the month date collections\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the date collections\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    var state;\n    var datas = [];\n    var dateCollection = [];\n    var recurrenceCollections = getRecurrenceCollection(monthCollection, expectedDays);\n    monthCollection = recurrenceCollections.monthCollection;\n    var index = recurrenceCollections.index;\n    if (ruleObject.setPosition != null) {\n        dateCollection = [(filterDateCollectionByIndex(monthCollection, index, datas))];\n        insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n    }\n    else {\n        if (monthCollection.length > 0) {\n            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n        }\n    }\n    datas = [];\n}\n/**\n * To filter date collection when BYDAY property having values with number\n *\n * @param {number[]} monthCollection Accepts the date collections\n * @param {number} index Accepts the index of date collections\n * @param {number[]} datas Accepts the collection of dates\n * @returns {number[]} Returns the collection of dates\n * @private\n */\nfunction filterDateCollectionByIndex(monthCollection, index, datas) {\n    for (var week = 0; week < monthCollection[index].length; week++) {\n        datas.push(monthCollection[index][week]);\n    }\n    return datas;\n}\n/**\n * To insert processed date collection in final array element\n *\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} dayData Accepts the date index\n * @returns {void}\n * @private\n */\nfunction insertDateCollection(state, startDate, endDate, data, ruleObject, dayData) {\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var chDate = new Date(dayData);\n    state = validateRules(chDate, ruleObject);\n    if ((chDate >= startDate) && compareDates(chDate, endDate) && state\n        && expectedCount && (data.length + ruleObject.recExceptionCount) < expectedCount) {\n        excludeDateHandler(data, dayData);\n    }\n}\n/**\n * Return the last week number of given month and year.\n *\n * @param {number} year Accepts the Year in number format\n * @param {number} startDayOfWeek Accepts the start date\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {number} week Accepts the week in number format\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {number} returns week number\n * @private\n */\nfunction weekCount(year, startDayOfWeek, monthCollection, week, ruleObject) {\n    var firstDayOfWeek = startDayOfWeek || 0;\n    var firstOfMonth = new Date(year, ruleObject.month[0] - 1, 1);\n    var lastOfMonth = new Date(year, ruleObject.month[0] - 1, 0);\n    var numberOfDaysInMonth = lastOfMonth.getDate();\n    var firstWeekDay = (firstOfMonth.getDay() - firstDayOfWeek + 7) % 7;\n    var used = firstWeekDay + numberOfDaysInMonth;\n    var count = Math.ceil(used / 7) - 1;\n    var dayData = monthCollection[week][count];\n    var chDate = new Date(dayData);\n    var state = validateRules(chDate, ruleObject);\n    return (state) ? count : count - 1;\n}\n/**\n * To process date collection based on Byset position after process the collection based on BYDAY property value index: EX:BYDAY=1SUm-1SU\n *\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction insertDateCollectionBasedonBySetPos(monthCollection, state, startDate, endDate, data, ruleObject) {\n    if (monthCollection.length > 0) {\n        for (var week = 0; week < monthCollection.length; week++) {\n            monthCollection[week].sort();\n            var expectedDays = ruleObject.day;\n            var isHavingNumber = expectedDays.map(function (item) { return HASNUMBER.test(item); });\n            var weekIndex = (ruleObject.freq === 'YEARLY' && (ruleObject.validRules.indexOf('BYMONTH') > -1) &&\n                !(isHavingNumber.indexOf(true) > -1)) ?\n                weekCount(new Date(monthCollection[0][0]).getFullYear(), 0, monthCollection, week, ruleObject)\n                : (monthCollection[week].length + ruleObject.setPosition);\n            var index = ((ruleObject.setPosition < 1) ? weekIndex : ruleObject.setPosition - 1);\n            var dayData = monthCollection[week][index];\n            insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);\n        }\n    }\n}\n/**\n * To insert datas into existing collection which is processed from previous loop.\n *\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} index Accepts the index value\n * @returns {void}\n * @private\n */\nfunction insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index) {\n    if (monthCollection.length > 0) {\n        index = !isNullOrUndefined(index) ? index :\n            ((ruleObject.setPosition < 1)\n                ? (monthCollection.length + ruleObject.setPosition) : ruleObject.setPosition - 1);\n        monthCollection[index].sort();\n        for (var week = 0; week < monthCollection[index].length; week++) {\n            var dayData = monthCollection[index][week];\n            insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);\n        }\n    }\n}\n/**\n * Internal method to compare dates\n *\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @returns {boolean} Returns the result of checking start and end dates\n * @private\n */\nfunction compareDates(startDate, endDate) {\n    return endDate ? (startDate <= endDate) : true;\n}\n/**\n * Internal method to get day string\n *\n * @param {string} expectedDays Accepts the exception date string\n * @returns {string} Returns the valid string\n * @private\n */\nfunction getDayString(expectedDays) {\n    // To get BYDAY value without numeric value\n    var newstr = expectedDays.replace(REMOVENUMBERINSTRING, '');\n    return newstr;\n}\n/**\n * Internal method to check day index\n *\n * @param {number} day Accepts the day index\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {boolean} Returns the index date\n * @private\n */\nfunction checkDayIndex(day, expectedDays) {\n    var sortedExpectedDays = [];\n    expectedDays.forEach(function (element) {\n        var expectedDaysNumberSplit = element.match(SPLITNUMBERANDSTRING);\n        if (expectedDaysNumberSplit.length === 2) {\n            sortedExpectedDays.push(expectedDaysNumberSplit[1]);\n        }\n        else {\n            sortedExpectedDays.push(expectedDaysNumberSplit[0]);\n        }\n    });\n    return (sortedExpectedDays.indexOf(DAYINDEX[day]) === -1);\n}\n/**\n * Internal method to get start date of week\n *\n * @param {Date} startDate Accepts the start date\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {Date} Return the week start date\n * @private\n */\nfunction getStartDateForWeek(startDate, expectedDays) {\n    var tempDate = new Date(startDate.getTime());\n    var newstr;\n    if (expectedDays.length > 0) {\n        var expectedDaysArr = [];\n        for (var i = 0; i <= expectedDays.length - 1; i++) {\n            newstr = getDayString(expectedDays[i]);\n            expectedDaysArr.push(newstr);\n        }\n        if (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1) {\n            do {\n                tempDate.setDate(tempDate.getDate() + 1);\n            } while (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1);\n        }\n    }\n    return tempDate;\n}\n/**\n * Method to generate recurrence rule object from given rule\n *\n * @param {string} rules Accepts the recurrence rule\n * @returns {RecRule} Returns the recurrence rule object\n */\nexport function extractObjectFromRule(rules) {\n    var ruleObject = {\n        freq: null,\n        interval: 1,\n        count: null,\n        until: null,\n        day: [],\n        wkst: null,\n        month: [],\n        weekNo: [],\n        monthDay: [],\n        yearDay: [],\n        setPosition: null,\n        validRules: []\n    };\n    var rulesList = rules.split(';');\n    var splitData = [];\n    var temp;\n    rulesList.forEach(function (data) {\n        splitData = data.split('=');\n        switch (splitData[0]) {\n            case 'UNTIL':\n                temp = splitData[1];\n                ruleObject.until = getDateFromRecurrenceDateString(temp);\n                break;\n            case 'BYDAY':\n                ruleObject.day = splitData[1].split(',');\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'BYMONTHDAY':\n                ruleObject.monthDay = splitData[1].split(',').map(Number);\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'BYMONTH':\n                ruleObject.month = splitData[1].split(',').map(Number);\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'BYYEARDAY':\n                ruleObject.yearDay = splitData[1].split(',').map(Number);\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'BYWEEKNO':\n                ruleObject.weekNo = splitData[1].split(',').map(Number);\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'INTERVAL':\n                ruleObject.interval = parseInt(splitData[1], 10);\n                break;\n            case 'COUNT':\n                ruleObject.count = parseInt(splitData[1], 10);\n                break;\n            case 'BYSETPOS':\n                ruleObject.setPosition = parseInt(splitData[1], 10) > 4 ? -1 : parseInt(splitData[1], 10);\n                break;\n            case 'FREQ':\n                ruleObject.freq = splitData[1];\n                break;\n            case 'WKST':\n                ruleObject.wkst = splitData[1];\n                break;\n        }\n    });\n    if ((ruleObject.freq === 'MONTHLY') && (ruleObject.monthDay.length === 0)) {\n        var index = ruleObject.validRules.indexOf('BYDAY');\n        ruleObject.validRules.splice(index, 1);\n    }\n    return ruleObject;\n}\n/**\n * Internal method to validate proper date\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number} data Accepts the data value\n * @param {Date} startDate Accepts the start date\n * @returns {boolean} Returns the result of date validate\n * @private\n */\nfunction validateProperDate(tempDate, data, startDate) {\n    var maxDate = calendarUtil.getMonthDaysCount(tempDate);\n    return (data <= maxDate) && (tempDate >= startDate);\n}\n/**\n * Internal method to process week days\n *\n * @param {string[]} expectedDays Accepts the expection dates\n * @returns {Object} Returns the weekdays object\n * @private\n */\nfunction processWeekDays(expectedDays) {\n    var dayCycle = {};\n    expectedDays.forEach(function (element, index) {\n        if (index === expectedDays.length - 1) {\n            var startIndex = dayIndex.indexOf(element);\n            var temp = startIndex;\n            while (temp % 7 !== dayIndex.indexOf(expectedDays[0])) {\n                temp++;\n            }\n            dayCycle[element] = temp - startIndex;\n        }\n        else {\n            dayCycle[element] = dayIndex.indexOf(expectedDays[(index + 1)]) - dayIndex.indexOf(element);\n        }\n    });\n    return dayCycle;\n}\n/**\n * Internal method to check date\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number[]} expectedDate Accepts the exception dates\n * @returns {boolean} Returns the boolean value\n * @private\n */\nfunction checkDate(tempDate, expectedDate) {\n    var temp = expectedDate.slice(0);\n    var data;\n    var maxDate = calendarUtil.getMonthDaysCount(tempDate);\n    data = temp.shift();\n    while (data) {\n        if (data < 0) {\n            data = data + maxDate + 1;\n        }\n        if (data === tempDate.getDate()) {\n            return false;\n        }\n        data = temp.shift();\n    }\n    return true;\n}\n/**\n * Internal method to check the year value\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number[]} expectedyearDay Accepts the exception dates in year\n * @returns {boolean} Returns the boolean value\n * @private\n */\nfunction checkYear(tempDate, expectedyearDay) {\n    var temp = expectedyearDay.slice(0);\n    var data;\n    var yearDay = getYearDay(tempDate);\n    data = temp.shift();\n    while (data) {\n        if (data < 0) {\n            data = data + calendarUtil.getYearDaysCount(tempDate, 0) + 1;\n        }\n        if (data === yearDay) {\n            return false;\n        }\n        data = temp.shift();\n    }\n    return true;\n}\n/**\n * Internal method to get the year day\n *\n * @param {Date} currentDate Accepts the date value\n * @returns {number} Returns the boolean value\n * @private\n */\nfunction getYearDay(currentDate) {\n    if (!startDateCollection[calendarUtil.getFullYear(currentDate)]) {\n        startDateCollection[calendarUtil.getFullYear(currentDate)] = calendarUtil.getYearLastDate(currentDate, 0);\n    }\n    var tempDate = startDateCollection[calendarUtil.getFullYear(currentDate)];\n    var diff = currentDate.getTime() - tempDate.getTime();\n    return Math.ceil(diff / MS_PER_DAY);\n}\n/**\n * Internal method to validate monthly rule type\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {MonthlyType} Returns the monthly type object\n * @private\n */\nfunction validateMonthlyRuleType(ruleObject) {\n    if (ruleObject.monthDay.length && !ruleObject.day.length) {\n        return 'date';\n    }\n    else if (!ruleObject.monthDay.length && ruleObject.day.length) {\n        return 'day';\n    }\n    return 'both';\n}\n/**\n * Internal method to re-order the week days based on first day of week\n *\n * @param {string[]} days Accepts the week days value\n * @returns {void}\n * @private\n */\nfunction rotate(days) {\n    var data = days.shift();\n    days.push(data);\n}\n/**\n * Internal method to set first day of week\n *\n * @param {string} day Accepts the first day string\n * @returns {void}\n * @private\n */\nfunction setFirstDayOfWeek(day) {\n    while (dayIndex[0] !== day) {\n        rotate(dayIndex);\n    }\n}\n/**\n * Internal method to validate recurrence rule\n *\n * @param {Date} tempDate Accepts the date value\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {boolean} Returns the boolean value\n * @private\n */\nfunction validateRules(tempDate, ruleObject) {\n    var state = true;\n    var expectedDays = ruleObject.day;\n    var expectedMonth = ruleObject.month;\n    var expectedDate = calendarUtil.getExpectedDays(tempDate, ruleObject.monthDay);\n    var expectedyearDay = ruleObject.yearDay;\n    ruleObject.validRules.forEach(function (rule) {\n        switch (rule) {\n            case 'BYDAY':\n                if (checkDayIndex(tempDate.getDay(), expectedDays)) {\n                    state = false;\n                }\n                break;\n            case 'BYMONTH':\n                if (calendarUtil.checkMonth(tempDate, expectedMonth)) {\n                    state = false;\n                }\n                break;\n            case 'BYMONTHDAY':\n                if (checkDate(tempDate, expectedDate)) {\n                    state = false;\n                }\n                break;\n            case 'BYYEARDAY':\n                if (checkYear(tempDate, expectedyearDay)) {\n                    state = false;\n                }\n                break;\n        }\n    });\n    return state;\n}\n/**\n * Internal method to get calendar util\n *\n * @param {CalendarType} calendarMode Accepts the calendar type object\n * @returns {CalendarUtil} Returns the calendar util object\n * @private\n */\nexport function getCalendarUtil(calendarMode) {\n    if (calendarMode === 'Islamic') {\n        return new Islamic();\n    }\n    return new Gregorian();\n}\nvar startDateCollection = {};\nvar tempExcludeDate;\nvar dayIndex = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nvar maxOccurrence;\nvar tempViewDate;\nvar calendarUtil;\nvar DAYINDEX = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nvar MAXOCCURRENCE = 43;\nvar WEEKPOS = ['first', 'second', 'third', 'fourth', 'last'];\nvar TIMES = 'summaryTimes';\nvar ON = 'summaryOn';\nvar EVERY = 'every';\nvar UNTIL = 'summaryUntil';\nvar DAYS = 'summaryDay';\nvar WEEKS = 'summaryWeek';\nvar MONTHS = 'summaryMonth';\nvar YEARS = 'summaryYear';\nvar DAYINDEXOBJECT = {\n    SU: 'sun',\n    MO: 'mon',\n    TU: 'tue',\n    WE: 'wed',\n    TH: 'thu',\n    FR: 'fri',\n    SA: 'sat'\n};\n// To check string has number\nvar HASNUMBER = /\\d/;\n// To find the numbers in string\nvar REMOVENUMBERINSTRING = /[^A-Z]+/;\n// To split number and string\nvar SPLITNUMBERANDSTRING = /[a-z]+|[^a-z]+/gi;\n/**\n * Method to generate string from date\n *\n * @param {Date} date Accepts the date value\n * @returns {string} Returns the string value\n */\nexport function getRecurrenceStringFromDate(date) {\n    return [date.getUTCFullYear(),\n        roundDateValues(date.getUTCMonth() + 1),\n        roundDateValues(date.getUTCDate()),\n        'T',\n        roundDateValues(date.getUTCHours()),\n        roundDateValues(date.getUTCMinutes()),\n        roundDateValues(date.getUTCSeconds()),\n        'Z'].join('');\n}\n/**\n * Internal method to round the date values\n *\n * @param {string | number} date Accepts the date value in either string or number format\n * @returns {string} Returns the date value in string format\n * @private\n */\nfunction roundDateValues(date) {\n    return ('0' + date).slice(-2);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}