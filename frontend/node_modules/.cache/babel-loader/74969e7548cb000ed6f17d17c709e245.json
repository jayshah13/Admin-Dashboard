{"ast":null,"code":"/**\n * StringTokenizer.ts class for EJ2-PDF\n * Utility class for working with strings.\n * @private\n */\nvar StringTokenizer =\n/** @class */\nfunction () {\n  // Constructors\n\n  /**\n   * Initializes a new instance of the `StringTokenizer` class.\n   * @private\n   */\n  function StringTokenizer(textValue) {\n    /**\n     * Current `position`.\n     * @private\n     */\n    this.currentPosition = 0;\n\n    if (textValue == null) {\n      throw new Error('ArgumentNullException:text');\n    }\n\n    this.text = textValue;\n  }\n\n  Object.defineProperty(StringTokenizer.prototype, \"length\", {\n    // Properties\n\n    /**\n     * Gets text `length`.\n     * @private\n     */\n    get: function () {\n      return this.text.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StringTokenizer.prototype, \"end\", {\n    get: function () {\n      return this.currentPosition === this.text.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StringTokenizer.prototype, \"position\", {\n    /**\n     * Gets or sets the position.\n     * @private\n     */\n    get: function () {\n      return this.currentPosition;\n    },\n    set: function (value) {\n      this.currentPosition = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StringTokenizer.getCharsCount = function (text, symbols) {\n    if (typeof symbols === 'string') {\n      if (text == null) {\n        throw new Error('ArgumentNullException:wholeText');\n      }\n\n      var numSymbols = 0;\n      var curIndex = 0;\n\n      for (;;) {\n        curIndex = text.indexOf(symbols, curIndex);\n\n        if (curIndex === -1) {\n          break;\n        } else {\n          numSymbols++;\n          curIndex++;\n        }\n      }\n\n      return numSymbols;\n    } else {\n      if (text == null) {\n        throw new Error('ArgumentNullException:text');\n      }\n\n      if (symbols == null) {\n        throw new Error('ArgumentNullException:symbols');\n      }\n\n      var count = 0;\n\n      for (var i = 0, len = text.length; i < len; i++) {\n        var ch = text[i];\n\n        if (this.contains(symbols, ch)) {\n          count++;\n        }\n      }\n\n      return count;\n    }\n  };\n  /**\n   * Reads line of the text.\n   * @private\n   */\n\n\n  StringTokenizer.prototype.readLine = function () {\n    var pos = this.currentPosition;\n\n    while (pos < this.length) {\n      var ch = this.text[pos];\n\n      switch (ch) {\n        case '\\r':\n        case '\\n':\n          {\n            var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos + 1;\n\n            if (ch === '\\r' && this.currentPosition < this.length && this.text[this.currentPosition] === '\\n') {\n              this.currentPosition++;\n            }\n\n            return text;\n          }\n      }\n\n      pos++;\n    } // The remaining text.\n\n\n    if (pos > this.currentPosition) {\n      var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\n      this.currentPosition = pos;\n      return text2;\n    }\n\n    return null;\n  };\n  /**\n   * Reads line of the text.\n   * @private\n   */\n\n\n  StringTokenizer.prototype.peekLine = function () {\n    var pos = this.currentPosition;\n    var line = this.readLine();\n    this.currentPosition = pos;\n    return line;\n  };\n  /**\n   * Reads a word from the text.\n   * @private\n   */\n\n\n  StringTokenizer.prototype.readWord = function () {\n    var pos = this.currentPosition;\n\n    while (pos < this.length) {\n      var ch = this.text[pos];\n\n      switch (ch) {\n        case '\\r':\n        case '\\n':\n          var textValue = this.text.substr(this.currentPosition, pos - this.currentPosition);\n          this.currentPosition = pos + 1;\n\n          if (ch === '\\r' && this.currentPosition < this.length && this.text[this.currentPosition] === '\\n') {\n            this.currentPosition++;\n          }\n\n          return textValue;\n\n        case ' ':\n        case '\\t':\n          {\n            if (pos === this.currentPosition) {\n              pos++;\n            }\n\n            var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos;\n            return text;\n          }\n      }\n\n      pos++;\n    } // The remaining text.\n\n\n    if (pos > this.currentPosition) {\n      var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\n      this.currentPosition = pos;\n      return text2;\n    }\n\n    return null;\n  };\n  /**\n   * Peeks a word from the text.\n   * @private\n   */\n\n\n  StringTokenizer.prototype.peekWord = function () {\n    var pos = this.currentPosition;\n    var word = this.readWord();\n    this.currentPosition = pos;\n    return word;\n  };\n\n  StringTokenizer.prototype.read = function (count) {\n    if (typeof count === 'undefined') {\n      var ch = '0';\n\n      if (!this.end) {\n        ch = this.text[this.currentPosition];\n        this.currentPosition++;\n      }\n\n      return ch;\n    } else {\n      var num = 0;\n      var builder = '';\n\n      while (!this.end && num < count) {\n        var ch = this.read();\n        builder = builder + ch;\n        num++;\n      }\n\n      return builder;\n    }\n  };\n  /**\n   * Peeks char form the data.\n   * @private\n   */\n\n\n  StringTokenizer.prototype.peek = function () {\n    var ch = '0';\n\n    if (!this.end) {\n      ch = this.text[this.currentPosition];\n    }\n\n    return ch;\n  };\n  /**\n   * Closes a reader.\n   * @private\n   */\n\n\n  StringTokenizer.prototype.close = function () {\n    this.text = null;\n  };\n\n  StringTokenizer.prototype.readToEnd = function () {\n    var text;\n\n    if (this.currentPosition === 0) {\n      text = this.text;\n    } else {\n      text = this.text.substr(this.currentPosition, this.length - this.currentPosition);\n    }\n\n    this.currentPosition = this.length;\n    return text;\n  }; //Implementation\n\n  /**\n   * Checks whether array contains a symbol.\n   * @private\n   */\n\n\n  StringTokenizer.contains = function (array, symbol) {\n    var contains = false;\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === symbol) {\n        contains = true;\n        break;\n      }\n    }\n\n    return contains;\n  }; // Constants\n\n  /**\n   * `Whitespace` symbol.\n   * @private\n   */\n\n\n  StringTokenizer.whiteSpace = ' ';\n  /**\n   * `tab` symbol.\n   * @private\n   */\n\n  StringTokenizer.tab = '\\t';\n  /**\n   * Array of `spaces`.\n   * @private\n   */\n\n  StringTokenizer.spaces = [StringTokenizer.whiteSpace, StringTokenizer.tab];\n  /**\n   * `Pattern` for WhiteSpace.\n   * @private\n   */\n\n  StringTokenizer.whiteSpacePattern = '^[ \\t]+$';\n  return StringTokenizer;\n}();\n\nexport { StringTokenizer };","map":{"version":3,"names":["StringTokenizer","textValue","currentPosition","Error","text","Object","defineProperty","prototype","get","length","enumerable","configurable","set","value","getCharsCount","symbols","numSymbols","curIndex","indexOf","count","i","len","ch","contains","readLine","pos","substr","text2","peekLine","line","readWord","peekWord","word","read","end","num","builder","peek","close","readToEnd","array","symbol","whiteSpace","tab","spaces","whiteSpacePattern"],"sources":["C:/Users/shahj/OneDrive/Documents/GitHub/Admin-Dashboard/frontend/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/string-tokenizer.js"],"sourcesContent":["/**\n * StringTokenizer.ts class for EJ2-PDF\n * Utility class for working with strings.\n * @private\n */\nvar StringTokenizer = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `StringTokenizer` class.\n     * @private\n     */\n    function StringTokenizer(textValue) {\n        /**\n         * Current `position`.\n         * @private\n         */\n        this.currentPosition = 0;\n        if (textValue == null) {\n            throw new Error('ArgumentNullException:text');\n        }\n        this.text = textValue;\n    }\n    Object.defineProperty(StringTokenizer.prototype, \"length\", {\n        // Properties\n        /**\n         * Gets text `length`.\n         * @private\n         */\n        get: function () {\n            return this.text.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StringTokenizer.prototype, \"end\", {\n        get: function () {\n            return (this.currentPosition === this.text.length);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StringTokenizer.prototype, \"position\", {\n        /**\n         * Gets or sets the position.\n         * @private\n         */\n        get: function () {\n            return this.currentPosition;\n        },\n        set: function (value) {\n            this.currentPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StringTokenizer.getCharsCount = function (text, symbols) {\n        if (typeof symbols === 'string') {\n            if (text == null) {\n                throw new Error('ArgumentNullException:wholeText');\n            }\n            var numSymbols = 0;\n            var curIndex = 0;\n            for (;;) {\n                curIndex = text.indexOf(symbols, curIndex);\n                if (curIndex === -1) {\n                    break;\n                }\n                else {\n                    numSymbols++;\n                    curIndex++;\n                }\n            }\n            return numSymbols;\n        }\n        else {\n            if (text == null) {\n                throw new Error('ArgumentNullException:text');\n            }\n            if (symbols == null) {\n                throw new Error('ArgumentNullException:symbols');\n            }\n            var count = 0;\n            for (var i = 0, len = text.length; i < len; i++) {\n                var ch = text[i];\n                if (this.contains(symbols, ch)) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    };\n    /**\n     * Reads line of the text.\n     * @private\n     */\n    StringTokenizer.prototype.readLine = function () {\n        var pos = this.currentPosition;\n        while (pos < this.length) {\n            var ch = this.text[pos];\n            switch (ch) {\n                case '\\r':\n                case '\\n': {\n                    var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\n                    this.currentPosition = pos + 1;\n                    if (((ch === '\\r') && (this.currentPosition < this.length)) && (this.text[this.currentPosition] === '\\n')) {\n                        this.currentPosition++;\n                    }\n                    return text;\n                }\n            }\n            pos++;\n        }\n        // The remaining text.\n        if (pos > this.currentPosition) {\n            var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos;\n            return text2;\n        }\n        return null;\n    };\n    /**\n     * Reads line of the text.\n     * @private\n     */\n    StringTokenizer.prototype.peekLine = function () {\n        var pos = this.currentPosition;\n        var line = this.readLine();\n        this.currentPosition = pos;\n        return line;\n    };\n    /**\n     * Reads a word from the text.\n     * @private\n     */\n    StringTokenizer.prototype.readWord = function () {\n        var pos = this.currentPosition;\n        while (pos < this.length) {\n            var ch = this.text[pos];\n            switch (ch) {\n                case '\\r':\n                case '\\n':\n                    var textValue = this.text.substr(this.currentPosition, pos - this.currentPosition);\n                    this.currentPosition = pos + 1;\n                    if (((ch === '\\r') && (this.currentPosition < this.length)) && (this.text[this.currentPosition] === '\\n')) {\n                        this.currentPosition++;\n                    }\n                    return textValue;\n                case ' ':\n                case '\\t': {\n                    if (pos === this.currentPosition) {\n                        pos++;\n                    }\n                    var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\n                    this.currentPosition = pos;\n                    return text;\n                }\n            }\n            pos++;\n        }\n        // The remaining text.\n        if (pos > this.currentPosition) {\n            var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos;\n            return text2;\n        }\n        return null;\n    };\n    /**\n     * Peeks a word from the text.\n     * @private\n     */\n    StringTokenizer.prototype.peekWord = function () {\n        var pos = this.currentPosition;\n        var word = this.readWord();\n        this.currentPosition = pos;\n        return word;\n    };\n    StringTokenizer.prototype.read = function (count) {\n        if (typeof count === 'undefined') {\n            var ch = '0';\n            if (!this.end) {\n                ch = this.text[this.currentPosition];\n                this.currentPosition++;\n            }\n            return ch;\n        }\n        else {\n            var num = 0;\n            var builder = '';\n            while (!this.end && num < count) {\n                var ch = this.read();\n                builder = builder + ch;\n                num++;\n            }\n            return builder;\n        }\n    };\n    /**\n     * Peeks char form the data.\n     * @private\n     */\n    StringTokenizer.prototype.peek = function () {\n        var ch = '0';\n        if (!this.end) {\n            ch = this.text[this.currentPosition];\n        }\n        return ch;\n    };\n    /**\n     * Closes a reader.\n     * @private\n     */\n    StringTokenizer.prototype.close = function () {\n        this.text = null;\n    };\n    StringTokenizer.prototype.readToEnd = function () {\n        var text;\n        if (this.currentPosition === 0) {\n            text = this.text;\n        }\n        else {\n            text = this.text.substr(this.currentPosition, this.length - this.currentPosition);\n        }\n        this.currentPosition = this.length;\n        return text;\n    };\n    //Implementation\n    /**\n     * Checks whether array contains a symbol.\n     * @private\n     */\n    StringTokenizer.contains = function (array, symbol) {\n        var contains = false;\n        for (var i = 0; i < array.length; i++) {\n            if (array[i] === symbol) {\n                contains = true;\n                break;\n            }\n        }\n        return contains;\n    };\n    // Constants\n    /**\n     * `Whitespace` symbol.\n     * @private\n     */\n    StringTokenizer.whiteSpace = ' ';\n    /**\n     * `tab` symbol.\n     * @private\n     */\n    StringTokenizer.tab = '\\t';\n    /**\n     * Array of `spaces`.\n     * @private\n     */\n    StringTokenizer.spaces = [StringTokenizer.whiteSpace, StringTokenizer.tab];\n    /**\n     * `Pattern` for WhiteSpace.\n     * @private\n     */\n    StringTokenizer.whiteSpacePattern = '^[ \\t]+$';\n    return StringTokenizer;\n}());\nexport { StringTokenizer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}